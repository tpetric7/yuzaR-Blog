<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>yuzaR-Blog</title>
    <link>https://yuzar-blog.netlify.app/</link>
    <atom:link href="https://yuzar-blog.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
    <description>Data Science with R
</description>
    <generator>Distill</generator>
    <lastBuildDate>Tue, 09 May 2023 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Transform Your Data Like a Pro with {tidyr} and Say Goodbye to Messy Data!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2023-04-18-datawrangling3</link>
      <description>


&lt;pre&gt;&lt;code&gt;“Happy families are all alike; every unhappy family is unhappy in its own way.” 
– Leo Tolstoy

“Tidy datasets are all alike, but every messy dataset is messy in its own way.” 
– Hadley Wickham&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;This picture shows three simple rules which make a dataset tidy&lt;a
href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Each column is a variable&lt;/li&gt;
&lt;li&gt;Each row is an observation&lt;/li&gt;
&lt;li&gt;Each cell is a single value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But it’s surprising, how rare these three rules are followed.&lt;/p&gt;
&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;To maximize the effect of this post you should definitely work
through &lt;a
href="https://yuzar-blog.netlify.app/posts/2023-01-31-datawrangling1/"&gt;Data
Wrangling Vol. 1&lt;/a&gt; and &lt;a
href="https://yuzar-blog.netlify.app/posts/2023-02-07-datawrangling2/"&gt;Data
Wrangling Vol. 2&lt;/a&gt; before. And I also recommend to watch a video
first, because I highlight things I talk about. It’s ca. 13 minutes
long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/DotnsqCoa7I" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="reshape-data-make-then-wider-or-longer"&gt;Reshape data: make then
wider or longer&lt;/h1&gt;
&lt;p&gt;&lt;img
src="../file3ddf5ed347d7_files/figure-html/unnamed-chunk-3-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h2 id="pivot_wider-spread"&gt;pivot_wider &amp;amp; spread&lt;/h2&gt;
&lt;p&gt;Imagine the situation where various types of information are combined
into one column, but you need to “spread” them out into separate
columns, because the information they convey cannot coexist, like in
columns &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;. The “cases” and
“population” values have nothing in common and therefore, don’t belong
in the same column. So, we have to broaden our table by taking the
column “names from” the “type” and the “values from” the “count” column.
Simply put, &lt;strong&gt;we need to make our table wider&lt;/strong&gt;. And while
it’s easy to manually copy and paste the data for two categories, you
wouldn’t want to do that with 100 categories.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy-8.png" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2 %&amp;gt;% 
  pivot_wider(names_from = type, values_from = count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A “pivot_wider” is amazing, but if you work with real-world data
(which is often dirty), you’ll certainly encounter two common problems.
The first one is that “pivot_wider” will eventually produce missing
values. For this case, “pivot_wider” has an useful argument that fills
in the missing values.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- tibble(A = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), B = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), C = c(1, 2, 3) )

x %&amp;gt;% pivot_wider(names_from = B, values_from = C)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  A       one   two three
  &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a         1    NA    NA
2 b        NA     2    NA
3 c        NA    NA     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;x %&amp;gt;% pivot_wider(names_from = B, values_from = C, values_fill = list(C = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  A       one   two three
  &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a         1     0     0
2 b         0     2     0
3 c         0     0     3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second problem is that widening a table can lead to several
values being put into one cell, resulting in a list of values that
violates the third principle of tidy data - each cell is a single
measurement.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy_data.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;To address this problem, you can utilize the “values_fn” argument,
which enables you to fill this cell with an aggregation function such as
“mean”. If there are still missing values after aggregation (because
there was nothing to aggregate), you can fill them with a value of your
choice using the “values_fill” argument.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  pivot_wider(
    id_cols = c(vs, am), 
    names_from = cyl, 
    values_from = mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 5
     vs    am `6`       `4`       `8`       
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;    &amp;lt;list&amp;gt;    &amp;lt;list&amp;gt;    
1     0     1 &amp;lt;dbl [3]&amp;gt; &amp;lt;dbl [1]&amp;gt; &amp;lt;dbl [2]&amp;gt; 
2     1     1 &amp;lt;NULL&amp;gt;    &amp;lt;dbl [7]&amp;gt; &amp;lt;NULL&amp;gt;    
3     1     0 &amp;lt;dbl [4]&amp;gt; &amp;lt;dbl [3]&amp;gt; &amp;lt;NULL&amp;gt;    
4     0     0 &amp;lt;NULL&amp;gt;    &amp;lt;NULL&amp;gt;    &amp;lt;dbl [12]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  pivot_wider(
    id_cols = c(am, vs), 
    names_from = cyl, 
    values_from = mpg, 
    values_fn = list(mpg = mean),
    values_fill = list(mpg = 9999) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 5
     am    vs    `6`    `4`    `8`
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
1     1     0   20.6   26     15.4
2     1     1 9999     28.4 9999  
3     0     1   19.1   22.9 9999  
4     0     0 9999   9999     15.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A “pivot_wider” is the more intuitive next-generation version of the
“spread” command. However, “spread” is still commonly used, so it
remains in the package. Knowing how “spread” works can help in
understanding older code.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2 %&amp;gt;% 
  spread(key = type, value = count) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="pivot_longer-gather"&gt;pivot_longer &amp;amp; gather&lt;/h2&gt;
&lt;p&gt;Now, imagine this: you’ve got a bunch of data collected over a span
of years. Usually, these surveys organize the measurements by year and
put them in separate columns. So, you’d have a column for each specific
year.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table4a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 3
  country     `1999` `2000`
  &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
1 Afghanistan    745   2666
2 Brazil       37737  80488
3 China       212258 213766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, storing data in this manner limits the information we can
extract from it. By separating the measurements into different columns
based on year, we lose the valuable variable - “time”, which is
imprisoned in the table header (imagine liquid metal T-1000 before
passing prison bars), unable to be fully utilized.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy-9.png" /&gt;&lt;/p&gt;
&lt;p&gt;For such a case, “pivot_longer” takes multiple columns and combines
them into just two columns - one with column names and one with survey
values. This way, the information about time is freed up (T-1000 passing
prison bars) and can be used for things like plotting or modeling.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table4a %&amp;gt;% 
  pivot_longer(cols = c(&amp;quot;1999&amp;quot;, &amp;quot;2000&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 3
  country     name   value
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
1 Afghanistan 1999     745
2 Afghanistan 2000    2666
3 Brazil      1999   37737
4 Brazil      2000   80488
5 China       1999  212258
6 China       2000  213766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in this example, we kept it simple and just used two years. But
let’s say you have a lot more data, like hundreds of columns. No
problem, just use a “colon” between the first and last column names to
quickly cover them all. And if you want to make things &lt;strong&gt;even
clearer&lt;/strong&gt;, you can use the “names_to” and “values_to” arguments
to give the new columns better names, like “year” and “number of cases”
for example.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table4a %&amp;gt;% 
  pivot_longer(cols = c(&amp;quot;1999&amp;quot; : &amp;quot;2000&amp;quot;), names_to = &amp;quot;year&amp;quot;, values_to = &amp;quot;number of cases&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 3
  country     year  `number of cases`
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;
1 Afghanistan 1999                745
2 Afghanistan 2000               2666
3 Brazil      1999              37737
4 Brazil      2000              80488
5 China       1999             212258
6 China       2000             213766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the “pivot_longer” command is basically the new and improved
version of the retired “gather” command. But don’t worry, “gather” is
still around and people still use it, so it’s good to know how it works
too.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table4a %&amp;gt;% 
  gather(2:3, key = &amp;quot;year&amp;quot;, value = &amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 3
  country     year   value
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
1 Afghanistan 1999     745
2 Brazil      1999   37737
3 China       1999  212258
4 Afghanistan 2000    2666
5 Brazil      2000   80488
6 China       2000  213766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf5ed347d7_files/figure-html/unnamed-chunk-12-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;h1 id="split-or-combine-cells"&gt;Split or combine cells&lt;/h1&gt;
&lt;h2 id="unite"&gt;unite&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy-18.png" /&gt;&lt;/p&gt;
&lt;p&gt;The real-world data can be a bit messy (footbal star messy), which
sometimes requires us to &lt;strong&gt;combine several columns into
one&lt;/strong&gt;. For example, separating a century and a year into
different columns doesn’t make much sense, does it? That’s where the
“unite” command comes in handy.&lt;/p&gt;
&lt;p&gt;With “unite”, we can do a few things. First, we give a name to the
new column. Second, we specify which columns to combine. Third, we
determine what separator to use between the values. Fourth, we can
decide whether to remove the input columns from the output data (but I
like to keep them in to make sure everything is working properly). And
finally, we can choose to remove any missing values.&lt;/p&gt;
&lt;p&gt;For example, we could unite a “century” and a “year” into a
“new_year” column (imagine a picture of Santa here). After we’re
confident that our code is working properly, we can set the “remove”
argument to TRUE and say goodbye to those old, separate columns.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table5 %&amp;gt;% 
  unite(
    col = &amp;quot;new_year&amp;quot;, 
    c(&amp;quot;century&amp;quot;, &amp;quot;year&amp;quot;), 
    sep = &amp;quot;&amp;quot;, 
    remove = FALSE, # remove = TRUE, 
    na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
  country     new_year century year  rate             
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            
1 Afghanistan 1999     19      99    745/19987071     
2 Afghanistan 2000     20      00    2666/20595360    
3 Brazil      1999     19      99    37737/172006362  
4 Brazil      2000     20      00    80488/174504898  
5 China       1999     19      99    212258/1272915272
6 China       2000     20      00    213766/1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isn’t that cool? However, it’s too early to celebrate just yet,
because in the very next “rate” column, we face an opposite problem
where two variables “cases” and “population” are trapped within the same
column. Luckily, the “separate” command offers an intuitive solution to
this issue.&lt;/p&gt;
&lt;h2 id="separate"&gt;separate&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/tidy-17.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let me break this down for you. If you spot a separator within your
data, you can utilize the “sep” argument to inform the “separate”
command where to split, and you can specify the names of new columns you
want to create.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table5 %&amp;gt;% 
  unite(col = &amp;quot;year&amp;quot;, c(&amp;quot;century&amp;quot;, &amp;quot;year&amp;quot;), sep = &amp;quot;&amp;quot;) %&amp;gt;% 
  separate(col = rate, sep = &amp;quot;/&amp;quot;, into = c(&amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country     year  cases  population
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     
1 Afghanistan 1999  745    19987071  
2 Afghanistan 2000  2666   20595360  
3 Brazil      1999  37737  172006362 
4 Brazil      2000  80488  174504898 
5 China       1999  212258 1272915272
6 China       2000  213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the best part is - “separate” is quite intelligent and can
detect split-points that aren’t characters or letters automatically.
This means that even if your dataset is super messy (football star
messy), and different separators such as underscores, slashes, special
characters or empty spaces are present, “separate” can still split it
like a boss.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;blah &amp;lt;- tribble(
  ~ID, ~month,
  1,   &amp;quot;a_c&amp;quot;,
  2,   &amp;quot;d/c&amp;quot;,
  3,   &amp;quot;7 &amp;amp; 8&amp;quot;,
  4,   &amp;quot;9 10&amp;quot;
)

blah %&amp;gt;% 
  separate(month, into = c(&amp;quot;month 1&amp;quot;, &amp;quot;month 2&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 3
     ID `month 1` `month 2`
  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    
1     1 a         c        
2     2 d         c        
3     3 7         8        
4     4 9         10       &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait, there’s more. There are actually &lt;strong&gt;two unique ways to
separate&lt;/strong&gt; a messy column:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;First, we can create several columns out of one, like we just did.
But that’s only half of the story. Because we have some useful tricks
that can make your life even easier. For instance, this output shows
that two new columns are of the “character” type, put simply -
&lt;strong&gt;text&lt;/strong&gt;, because they inherited it from the original
column. But I’d like them to be what they actually are -
&lt;strong&gt;numbers&lt;/strong&gt;. For this we can allow the “separate” command
to “convert” them to a better format of it’s choice:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;table3 %&amp;gt;% 
  separate(col = rate, into = c(&amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;), convert = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also split a column without any separators by specifying where
the values should be separated.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  separate(col = country, into = c(&amp;quot;begin&amp;quot;, &amp;quot;end&amp;quot;), sep = 5) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
  begin end       year  cases population
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afgha &amp;quot;nistan&amp;quot;  1999    745   19987071
2 Afgha &amp;quot;nistan&amp;quot;  2000   2666   20595360
3 Brazi &amp;quot;l&amp;quot;       1999  37737  172006362
4 Brazi &amp;quot;l&amp;quot;       2000  80488  174504898
5 China &amp;quot;&amp;quot;        1999 212258 1272915272
6 China &amp;quot;&amp;quot;        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;But we have to be careful&lt;/strong&gt;. Because, if we have too
many pieces of text inside of a column, the automatic separation may
leave out &lt;strong&gt;very important&lt;/strong&gt; text.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;blah &amp;lt;- tribble(
  ~sex, ~joke,
  &amp;quot;She&amp;quot;,   &amp;quot;Darling, tell me something dirty!&amp;quot;,
  &amp;quot;He&amp;quot;,   &amp;quot;Ahhhhh .... kitchen?&amp;quot;
)

blah %&amp;gt;% 
  separate(col = joke, into = c(&amp;quot;part 1&amp;quot;, &amp;quot;part 2&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 3
  sex   `part 1` `part 2`
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   
1 She   Darling  tell    
2 He    Ahhhhh   kitchen &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To prevent this, we can use the “extra” option to “merge” the rest of
the text together. And finally, to check the quality of separation, we
again should use the “remove = FALSE” option.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;blah %&amp;gt;% 
  separate(
    col    = joke, 
    into   = c(&amp;quot;part 1&amp;quot;, &amp;quot;part 2&amp;quot;),
    extra  = &amp;quot;merge&amp;quot;, 
    remove = FALSE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 4
  sex   joke                              `part 1` `part 2`           
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;              
1 She   Darling, tell me something dirty! Darling  tell me something …
2 He    Ahhhhh .... kitchen?              Ahhhhh   kitchen?           &lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;So, we now learned how to create several columns out of one. The
second way to separate is to &lt;strong&gt;create several rows&lt;/strong&gt; out of
one. This is useful when messy data violates the third rule of a data
set and contains multiple measurements in a single cell. It’s kind of
“pivot_longer” on steroids (Arni), because it makes a clean table from a
single messy column, instead of multiple tidy columns.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;blah &amp;lt;- tribble(
  ~season,    ~month,
  &amp;quot;Winter&amp;quot;,   &amp;quot;Dez &amp;amp; Jan + Feb&amp;quot;,
  &amp;quot;Spring&amp;quot;,   &amp;quot;Mar | Apr ? Mai&amp;quot;
)

blah %&amp;gt;% 
  separate_rows(month) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 2
  season month
  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;
1 Winter Dez  
2 Winter Jan  
3 Winter Feb  
4 Spring Mar  
5 Spring Apr  
6 Spring Mai  &lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="nested-data"&gt;Nested data&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;But get ready for a plot twist!&lt;/strong&gt; While storing
several values in one cell is bad, storing several columns in one cell
can actually be incredibly useful, because it helps to organize complex
data and allows for more effective work with multiple sub-tables at
once, using functions like “map”. For example, we can create multiple
models and store their results for further use with just a few lines of
code. I have also created a &lt;a
href="https://youtu.be/tQ8dC0oLTnA"&gt;tutorial on multiple models&lt;/a&gt;, so
feel free to check it out later. But for now let’s see how to create a
nested data frame.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/nest_data.png" /&gt;&lt;/p&gt;
&lt;h2 id="create-nested-data"&gt;Create nested data&lt;/h2&gt;
&lt;p&gt;Creating a nested data frame is as easy as just using “group_by” and
“nest” functions to move the groups into a list-column. We can also
specify the columns we want to “nest”, which can help with large
datasets. But what if we already have a nested data frame and need to
access the data inside it?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;storms %&amp;gt;%
 group_by(name) %&amp;gt;%
 nest()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 258 × 2
# Groups:   name [258]
   name     data              
   &amp;lt;chr&amp;gt;    &amp;lt;list&amp;gt;            
 1 Amy      &amp;lt;tibble [31 × 12]&amp;gt;
 2 Blanche  &amp;lt;tibble [20 × 12]&amp;gt;
 3 Caroline &amp;lt;tibble [33 × 12]&amp;gt;
 4 Doris    &amp;lt;tibble [29 × 12]&amp;gt;
 5 Eloise   &amp;lt;tibble [46 × 12]&amp;gt;
 6 Faye     &amp;lt;tibble [19 × 12]&amp;gt;
 7 Gladys   &amp;lt;tibble [46 × 12]&amp;gt;
 8 Hallie   &amp;lt;tibble [14 × 12]&amp;gt;
 9 Belle    &amp;lt;tibble [18 × 12]&amp;gt;
10 Dottie   &amp;lt;tibble [10 × 12]&amp;gt;
# ℹ 248 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;storms %&amp;gt;%
  group_by(name) %&amp;gt;%
 nest(data = c(year:long, category:hurricane_force_diameter))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1,035 × 3
# Groups:   name [258]
   name     status              data              
   &amp;lt;chr&amp;gt;    &amp;lt;fct&amp;gt;               &amp;lt;list&amp;gt;            
 1 Amy      tropical depression &amp;lt;tibble [8 × 11]&amp;gt; 
 2 Amy      tropical storm      &amp;lt;tibble [22 × 11]&amp;gt;
 3 Amy      extratropical       &amp;lt;tibble [1 × 11]&amp;gt; 
 4 Blanche  tropical depression &amp;lt;tibble [9 × 11]&amp;gt; 
 5 Blanche  tropical storm      &amp;lt;tibble [4 × 11]&amp;gt; 
 6 Blanche  hurricane           &amp;lt;tibble [5 × 11]&amp;gt; 
 7 Blanche  extratropical       &amp;lt;tibble [2 × 11]&amp;gt; 
 8 Caroline tropical depression &amp;lt;tibble [22 × 11]&amp;gt;
 9 Caroline tropical storm      &amp;lt;tibble [4 × 11]&amp;gt; 
10 Caroline hurricane           &amp;lt;tibble [7 × 11]&amp;gt; 
# ℹ 1,025 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="reshape-nested-data"&gt;Reshape nested data&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-04-18-datawrangling3/unnest_longer.png" /&gt;&lt;/p&gt;
&lt;p&gt;Well, similarly to “separate_rows” which &lt;strong&gt;unpacks&lt;/strong&gt; the
single cell into several rows, {tidyr} package provides the
“unnest_longer” function, which &lt;strong&gt;unpacks nested data&lt;/strong&gt;
into multiple rows.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;starwars %&amp;gt;%
  select(name, films) %&amp;gt;%
  filter(name %in% c(&amp;quot;Luke Skywalker&amp;quot;, &amp;quot;C-3PO&amp;quot;, &amp;quot;R2-D2&amp;quot;)) %&amp;gt;%
  unnest_longer(films)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 18 × 2
   name           films                  
   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;                  
 1 Luke Skywalker The Empire Strikes Back
 2 Luke Skywalker Revenge of the Sith    
 3 Luke Skywalker Return of the Jedi     
 4 Luke Skywalker A New Hope             
 5 Luke Skywalker The Force Awakens      
 6 C-3PO          The Empire Strikes Back
 7 C-3PO          Attack of the Clones   
 8 C-3PO          The Phantom Menace     
 9 C-3PO          Revenge of the Sith    
10 C-3PO          Return of the Jedi     
11 C-3PO          A New Hope             
12 R2-D2          The Empire Strikes Back
13 R2-D2          Attack of the Clones   
14 R2-D2          The Phantom Menace     
15 R2-D2          Revenge of the Sith    
16 R2-D2          Return of the Jedi     
17 R2-D2          A New Hope             
18 R2-D2          The Force Awakens      &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, we can easily turn each element of a list-column into a
regular column via “unnest_wider” function. But interestingly, that
creates missing values, which uncovers a new problem.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;starwars %&amp;gt;%
  select(name, films) %&amp;gt;%
  filter(name %in% c(&amp;quot;Luke Skywalker&amp;quot;, &amp;quot;C-3PO&amp;quot;, &amp;quot;R2-D2&amp;quot;)) %&amp;gt;%
  unnest_wider(films, names_sep = &amp;quot;_&amp;quot;) %&amp;gt;% 
  flextable::regulartable()&lt;/code&gt;&lt;/pre&gt;
&lt;div class="tabwid"&gt;&lt;style&gt;.cl-4c49a284{}.cl-4c3f244e{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-4c44129c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-4c442d90{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4c442d9a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-4c442da4{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}&lt;/style&gt;&lt;table data-quarto-disable-processing='true' class='cl-4c49a284'&gt;&lt;thead&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;name&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_1&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_2&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_3&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_4&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_5&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_6&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-4c442d90"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;films_7&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Luke Skywalker&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Empire Strikes Back&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Revenge of the Sith&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Return of the Jedi&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;A New Hope&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Force Awakens&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;C-3PO&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Empire Strikes Back&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Attack of the Clones&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Phantom Menace&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Revenge of the Sith&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Return of the Jedi&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;A New Hope&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442d9a"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;R2-D2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Empire Strikes Back&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Attack of the Clones&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Phantom Menace&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Revenge of the Sith&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;Return of the Jedi&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;A New Hope&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-4c442da4"&gt;&lt;p class="cl-4c44129c"&gt;&lt;span class="cl-4c3f244e"&gt;The Force Awakens&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h1 id="expand-and-complete-tables"&gt;Expand and complete tables&lt;/h1&gt;
&lt;h2 id="expand"&gt;expand&lt;/h2&gt;
&lt;p&gt;The problem is that sometimes we think we have all the data we need,
but in reality, we don’t. Let’s take, for example, a study on cars with
different transmissions or gears. Before we dive in, we need to make
sure we’re aware of how many unique values each variable has.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;xtabs(~ am, data = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;am
 0  1 
19 13 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;xtabs(~ gear, data = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;gear
 3  4  5 
15 12  5 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having two categories from the transmission variable (“am”), and
three from the gearbox (“gear”), you’d think we’d have six different
combinations of cars, right? But if we look at the combination of both
variables, we actually end up with only four distinct combinations.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% distinct(am, gear)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               am gear
Mazda RX4       1    4
Hornet 4 Drive  0    3
Merc 240D       0    4
Porsche 914-2   1    5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s where things get tricky. Even if we have a massive
dataset, there are still some combos we might be missing. In our case we
have zero cars with an automatic transmission and five gears, and not a
single car with a manual transmission and three gears.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;xtabs(~ am + gear, data = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   gear
am   3  4  5
  0 15  4  0
  1  0  8  5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;strong&gt;is a problem&lt;/strong&gt;, because &lt;strong&gt;these missing
values are kinda sneaky - they’re implicit&lt;/strong&gt;, meaning we don’t
even realize we’re missing them. And that’s the dangerous moment when we
start to think we have all the data we need, when in reality, we don’t.
Fortunately, “expand” function provides a solution for it, by finding
all possible combinations of categorical variables we should have:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% expand(am, gear)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 2
     am  gear
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     0     3
2     0     4
3     0     5
4     1     3
5     1     4
6     1     5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wouldn’t it be great if we could add those missing combos to our
dataset, even if we don’t have any data for them yet? Well, yes! Why?
Because then we could &lt;strong&gt;estimate&lt;/strong&gt; what their values could
&lt;strong&gt;probably&lt;/strong&gt; be.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;d &amp;lt;- mtcars %&amp;gt;% 
  complete(cyl, am, gear) %&amp;gt;% 
  arrange(desc(is.na(mpg)))

d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 40 × 11
     cyl    am  gear   mpg  disp    hp  drat    wt  qsec    vs  carb
   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
 1     4     0     5  NA     NA     NA NA    NA     NA      NA    NA
 2     4     1     3  NA     NA     NA NA    NA     NA      NA    NA
 3     6     0     5  NA     NA     NA NA    NA     NA      NA    NA
 4     6     1     3  NA     NA     NA NA    NA     NA      NA    NA
 5     8     0     4  NA     NA     NA NA    NA     NA      NA    NA
 6     8     0     5  NA     NA     NA NA    NA     NA      NA    NA
 7     8     1     3  NA     NA     NA NA    NA     NA      NA    NA
 8     8     1     4  NA     NA     NA NA    NA     NA      NA    NA
 9     4     0     3  21.5  120.    97  3.7   2.46  20.0     1     1
10     4     0     4  24.4  147.    62  3.69  3.19  20       1     2
# ℹ 30 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="complete"&gt;complete&lt;/h2&gt;
&lt;p&gt;And if you think that &lt;strong&gt;estimates are too uncertain&lt;/strong&gt;,
consider this: &lt;strong&gt;even a rough idea is often better than no
information at all&lt;/strong&gt;. That’s why it’s &lt;strong&gt;essential&lt;/strong&gt;
to fill in missing data to uncover new opportunities. Because, even when
we have &lt;strong&gt;only three&lt;/strong&gt; categorical variables from the
“mtcars” dataset, we’re missing &lt;strong&gt;eight combinations&lt;/strong&gt;.
Imagine how much would you miss, if you have 100 categorical variables
with several categories each? This highlights the importance of dealing
with missing values.&lt;/p&gt;
&lt;p&gt;Luckily for us {tidyr} package provides two ways to deal with missing
values. The first is rather radical: we could simply remove all rows
containing missing values, doesn’t matter implicit or explicit, using
“drop_na” function. But that could eliminate most of our data, because
missing values are very common, and we would have missed the opportunity
to uncover something new and get a Nobel price.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;d %&amp;gt;% 
  drop_na()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 32 × 11
     cyl    am  gear   mpg  disp    hp  drat    wt  qsec    vs  carb
   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
 1     4     0     3  21.5 120.     97  3.7   2.46  20.0     1     1
 2     4     0     4  24.4 147.     62  3.69  3.19  20       1     2
 3     4     0     4  22.8 141.     95  3.92  3.15  22.9     1     2
 4     4     1     4  22.8 108      93  3.85  2.32  18.6     1     1
 5     4     1     4  32.4  78.7    66  4.08  2.2   19.5     1     1
 6     4     1     4  30.4  75.7    52  4.93  1.62  18.5     1     2
 7     4     1     4  33.9  71.1    65  4.22  1.84  19.9     1     1
 8     4     1     4  27.3  79      66  4.08  1.94  18.9     1     1
 9     4     1     4  21.4 121     109  4.11  2.78  18.6     1     2
10     4     1     5  26   120.     91  4.43  2.14  16.7     0     2
# ℹ 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second way is to “fill up” missing values with something useful.
What is useful? Well, the average would do the job. So, let’s “fill” the
first three columns “mpg, disp and hp” with their averages:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  complete(cyl, am, gear, 
           fill = list(mpg  = mean(mtcars$mpg), 
                       disp = mean(mtcars$disp), 
                       hp   = mean(mtcars$hp))) %&amp;gt;% 
  arrange(desc(is.na(wt)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 40 × 11
     cyl    am  gear   mpg  disp    hp  drat    wt  qsec    vs  carb
   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
 1     4     0     5  20.1  231.  147. NA    NA     NA      NA    NA
 2     4     1     3  20.1  231.  147. NA    NA     NA      NA    NA
 3     6     0     5  20.1  231.  147. NA    NA     NA      NA    NA
 4     6     1     3  20.1  231.  147. NA    NA     NA      NA    NA
 5     8     0     4  20.1  231.  147. NA    NA     NA      NA    NA
 6     8     0     5  20.1  231.  147. NA    NA     NA      NA    NA
 7     8     1     3  20.1  231.  147. NA    NA     NA      NA    NA
 8     8     1     4  20.1  231.  147. NA    NA     NA      NA    NA
 9     4     0     3  21.5  120.   97   3.7   2.46  20.0     1     1
10     4     0     4  24.4  147.   62   3.69  3.19  20       1     2
# ℹ 30 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, the average may be better then nothing, but it’s far from
perfect, right? But that’s not the point. The point is that you can
first “discover” your implicit missing values and then turn them into
opportunity by filling them out with some sophisticated machine learning
method, like chained random forest, which is unfortunately way outside
of the scope of today’s topic. But if you want to learn more about
imputing missing values with fancy machine learning algorithms, check
out &lt;a href="https://youtu.be/Akb401i32Oc"&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for reading!&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="further-readings-and-references"&gt;Further readings and
references&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a
href="https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf"&gt;cheat
sheet on {tidyr}&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and the &lt;a href="https://tidyr.tidyverse.org/"&gt;official page of
{tidyr}&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Amazing and Free Book by Garrett Grolemund and Hadley
Wickham: &lt;a href="https://r4ds.had.co.nz/"&gt;“R for Data Science”&lt;/a&gt;&lt;a
href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>b74cf2938b8444dccaf6b009e432c059</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>data wrangling</category>
      <category>R package reviews</category>
      <guid>https://yuzar-blog.netlify.app/posts/2023-04-18-datawrangling3</guid>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2023-04-18-datawrangling3/dplyr_3_thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>(in progress, very, don't even look inside) {dplyr} on steroids: Handling Data Bases</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2023-05-09-datawrangling4</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s ca. … minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of this article, especially pictures, code and quotes below,
stem from &lt;a href="https://r4ds.had.co.nz/"&gt;“R for Data Science”&lt;/a&gt;
book by Garrett Grolemund and Hadley Wickham (Chapters 12 and 13).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;“Happy families are all alike; every unhappy family is unhappy in its own way.” 
– Leo Tolstoy

“Tidy datasets are all alike, but every messy dataset is messy in its own way.” 
– Hadley Wickham
  &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="previous-topics"&gt;Previous topics&lt;/h3&gt;
&lt;p&gt;To maximise the effect of this post you should definitely work
through &lt;a
href="https://yuzar-blog.netlify.app/posts/2023-01-31-datawrangling1/"&gt;Data
Wrangling Vol. 1&lt;/a&gt; and &lt;a
href="https://yuzar-blog.netlify.app/posts/2023-02-07-datawrangling2/"&gt;Data
Wrangling Vol. 2&lt;/a&gt; before.&lt;/p&gt;
&lt;h3 id="why-do-we-need-tidy-data-what-are-the-benefits"&gt;Why do we need
tidy data? What are the benefits?&lt;/h3&gt;
&lt;h3 id="how-to-tidy-up-your-data"&gt;How to tidy up your data&lt;/h3&gt;
&lt;p&gt;There are three simple rules which make a dataset tidy&lt;a href="#fn1"
class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;Each variable must have its own column.&lt;/li&gt;
&lt;li&gt;Each observation must have its own row.&lt;/li&gt;
&lt;li&gt;Each value must have its own cell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="tidy-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;But it’s surprising, how rare these three rules are followed Here is
an examples of &lt;strong&gt;tidy dataset&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse) # it&amp;#39;s the only package you need

table1 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan  1999    745   19987071
2 Afghanistan  2000   2666   20595360
3 Brazil       1999  37737  172006362
4 Brazil       2000  80488  174504898
5 China        1999 212258 1272915272
6 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider following tables:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- tibble(A = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), B = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;), C = c(1, 2, 3) )

y &amp;lt;- tibble(A = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;), B = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;four&amp;quot;),  C = c(3, 2, 1) )

z &amp;lt;- tibble(D = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;d&amp;quot;), E = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;four&amp;quot;),  F = c(3, 2, 1) )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf21478db7_files/figure-html/unnamed-chunk-5-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h4 id="bind-rows-and-bind-columns"&gt;Bind rows and bind columns&lt;/h4&gt;
&lt;p&gt;Sometimes you just want to combine (bind) several tables into one.
You can bind together either their columns, or rows.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;bind_cols(x, y, z) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 9
  A...1 B...2 C...3 A...4 B...5 C...6 D     E         F
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1 a     one       3 a     one       3
2 b     two       2 b     two       2 b     two       2
3 c     three     3 d     four      1 d     four      1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bind_cols&lt;/code&gt; even renames identical columns automatically,
so that every column name is unique. That’s really cool, but it also has
one problem: it needs the &lt;strong&gt;same number of rows&lt;/strong&gt;, or it
refuses to work. Run the code below, and you’ll get a following error
message: &lt;code&gt;Error: Argument 3 must be length 3, not 4&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;bind_cols(x, 
          y,
          z %&amp;gt;% add_row(D = &amp;quot;bla&amp;quot;, E = &amp;quot;bla&amp;quot;, F = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to put two tables below each other, they need to have the
&lt;strong&gt;same column names&lt;/strong&gt;, otherwise it’ll produce &lt;em&gt;NAs&lt;/em&gt;
in your new dataset, where names of columns don’t match:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;bind_rows(x, y) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 b     two       2
3 c     three     3
4 a     one       3
5 b     two       2
6 d     four      1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;bind_rows(x, y, z,  .id = &amp;quot;table&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 9 × 7
  table A     B         C D     E         F
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 1     a     one       1 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
2 1     b     two       2 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
3 1     c     three     3 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
4 2     a     one       3 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
5 2     b     two       2 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
6 2     d     four      1 &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA
7 3     &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA a     one       3
8 3     &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA b     two       2
9 3     &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;     NA d     four      1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.id&lt;/code&gt; argument allows you to track to which table
belong the values.&lt;/p&gt;
&lt;h4 id="intersect-and-union"&gt;Intersect and union&lt;/h4&gt;
&lt;p&gt;If you need to find rows identical in both tables (duplicates), use
&lt;code&gt;intersect&lt;/code&gt;, but if you wish to find rows which differ, use
&lt;code&gt;setdiff&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;intersect.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-9-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;intersect(x,y)   # find duplicates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;setdiff.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-11-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;setdiff-rev.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-11-2.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;setdiff(x,y)     # find rows that appear in x but not y &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$A
[1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;

$B
[1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot;

$C
[1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;setdiff(y,x)     # find rows that appear in y but not x &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$A
[1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;d&amp;quot;

$B
[1] &amp;quot;one&amp;quot;  &amp;quot;two&amp;quot;  &amp;quot;four&amp;quot;

$C
[1] 3 2 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bind_rows&lt;/code&gt; simply combines tables without examining them,
which might produce duplicates, if there are identical rows appear in
both tables. Another command you might encounter which produce the same
result is &lt;code&gt;union all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-13-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;union_all(x,y) == bind_rows(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;        A    B    C
[1,] TRUE TRUE TRUE
[2,] TRUE TRUE TRUE
[3,] TRUE TRUE TRUE
[4,] TRUE TRUE TRUE
[5,] TRUE TRUE TRUE
[6,] TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in order to remove duplicates while combining two tables, use
&lt;code&gt;union&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-15-1.gif" /&gt;&lt;!-- --&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-15-2.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-16-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;union(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1]]
[1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;

[[2]]
[1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot;

[[3]]
[1] 1 2 3

[[4]]
[1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;d&amp;quot;

[[5]]
[1] &amp;quot;one&amp;quot;  &amp;quot;two&amp;quot;  &amp;quot;four&amp;quot;

[[6]]
[1] 3 2 1&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="join-tables"&gt;Join tables&lt;/h4&gt;
&lt;p&gt;Combining tables is important, but it sometimes leads to a
&lt;strong&gt;redundancy&lt;/strong&gt;. Consider binding columns of two following
tables:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;tidy4a &amp;lt;- table4a %&amp;gt;%
  gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;cases&amp;quot;)
tidy4b &amp;lt;- table4b %&amp;gt;%
  gather(`1999`, `2000`, key = &amp;quot;year&amp;quot;, value = &amp;quot;population&amp;quot;)

bind_cols(tidy4a,tidy4b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 6
  country...1 year...2  cases country...4 year...5 population
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
1 Afghanistan 1999        745 Afghanistan 1999       19987071
2 Brazil      1999      37737 Brazil      1999      172006362
3 China       1999     212258 China       1999     1272915272
4 Afghanistan 2000       2666 Afghanistan 2000       20595360
5 Brazil      2000      80488 Brazil      2000      174504898
6 China       2000     213766 China       2000     1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two of the columns, &lt;code&gt;country&lt;/code&gt; and &lt;code&gt;year&lt;/code&gt;, are
&lt;strong&gt;identical&lt;/strong&gt; in both tables. We’ll call them
&lt;strong&gt;key&lt;/strong&gt; columns. A &lt;code&gt;bind_cols()&lt;/code&gt; nicely renames
them for us to avoid confusion, but it keeps both. Although they don’t
provide any new information - they are redundant! If we add a green
colour to a green colour, it will still be green. Thus, we would love
&lt;em&gt;R&lt;/em&gt; to recognise those identical - &lt;strong&gt;key&lt;/strong&gt; columns
and use them to &lt;strong&gt;join&lt;/strong&gt; (not to add!) only columns which
are different. And that is exactly what &lt;strong&gt;join&lt;/strong&gt; commands
are for.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;inner_join&lt;/code&gt; is the most intuitive. It looks inside of
the tables, finds identical columns and keeps just one of them and adds
all not matching columns behind it. This removes redundancy and delivers
a tidy dataset:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;inner-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-19-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;inner_join(tidy4a, tidy4b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country     year   cases population
  &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan 1999     745   19987071
2 Brazil      1999   37737  172006362
3 China       1999  212258 1272915272
4 Afghanistan 2000    2666   20595360
5 Brazil      2000   80488  174504898
6 China       2000  213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if columns are not perfectly identical? I am grad you asked
:). To answer this question, please, let me explain all the joins
visually, beginning with our friend &lt;code&gt;inner_join&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id="mutating-joins-combine-columns"&gt;Mutating joins combine
columns&lt;/h5&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;inner_join&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An inner join matches pairs of observations whenever their keys are
equal. And, as mentioned before, it then keeps the key columns and all
the other columns which are different.&lt;/p&gt;
&lt;p&gt;&lt;img src="join-inner.png" /&gt;&lt;/p&gt;
&lt;p&gt;Below is an example with x and y we have created earlier in the post.
Have a look at them in the console, if you forgot them.&lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;all&lt;/strong&gt; three columns are the &lt;strong&gt;key&lt;/strong&gt;
columns, &lt;code&gt;inner_join&lt;/code&gt; looks for a perfect match, where all
columns for this row have identical values in both tables. In our
example only second row matches perfectly (see the first output below).
The first row is different in the column “C” and the third raw have
different values in all three columns.&lt;/p&gt;
&lt;p&gt;If only two variables are &lt;strong&gt;keys&lt;/strong&gt;, “A” and “B”, then
two rows have identical values in this both columns, while other, not
matching values from the column “C” are added to the right of the table.
In this way we reduce the redundancy but don’t loose any
information.&lt;/p&gt;
&lt;p&gt;If only one variable is a key, then you’ll simply get more unmatched
columns, “B” and “C” in our case, see below. This case is interesting,
because it does not reduce the redundancy for “B” columns. This
emphasizes the importance of &lt;strong&gt;key&lt;/strong&gt; columns, thus you
often have to know (and you usually do!) what &lt;strong&gt;keys&lt;/strong&gt; are
you want to join by.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;inner_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 b     two       2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;inner_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 4
  A     B       C.x   C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1     3
2 b     two       2     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;inner_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 5
  A     B.x     C.x B.y     C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1 one       3
2 b     two       2 two       2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only problem with &lt;code&gt;inner_join&lt;/code&gt; is that it looses
observations. If you are interested in keeping all the observations from
one, the other or both tables, you can apply &lt;code&gt;outer_joins&lt;/code&gt;.
There are three of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left_join&lt;/code&gt; keeps all observations from the left table,
i.e. &lt;em&gt;x&lt;/em&gt; for &lt;code&gt;left_join(x, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right_join&lt;/code&gt; keeps all observations from the right table,
i.e. &lt;em&gt;y&lt;/em&gt; for &lt;code&gt;left_join(x, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;full_join&lt;/code&gt; keeps all observations from both &lt;em&gt;x&lt;/em&gt;
and &lt;em&gt;y&lt;/em&gt; tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-05-09-datawrangling4/join-outer.png" /&gt;&lt;/p&gt;
&lt;p&gt;To summarise how they all work, have a look at the following
diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-05-09-datawrangling4/join-venn.png" /&gt;&lt;/p&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;left_join&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;left-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-22-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;left-join-extra.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-22-2.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;left_join&lt;/code&gt; keeps all the common / matched observations in
the left columns and adds additional data from another table. But as you
could see in the graphs above, if I want to keep all the observations
from &lt;em&gt;x&lt;/em&gt;, but there is no match for some of them in &lt;em&gt;y&lt;/em&gt;,
it’ll add empty rows - &lt;em&gt;NA&lt;/em&gt;. It doesn’t sound good first, but I
actually loved this side effect, because it always showed me a mismatch
between tables, which, if not discovered early enough, could lead to
crappy results.&lt;/p&gt;
&lt;p&gt;Now, let’s left-join &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; considering all
columns a &lt;strong&gt;key&lt;/strong&gt;. The &lt;code&gt;left_join&lt;/code&gt; does it by
default, so you could actually right &lt;code&gt;left_join(x, y)&lt;/code&gt; to get
the same result, but here for the teaching purposes I prefer to write
out the keys explicitly:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;left_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 b     two       2
3 c     three     3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, interestingly, our result is identical to &lt;em&gt;x&lt;/em&gt; and there
is not a single value from &lt;em&gt;y&lt;/em&gt;. This is because not a single row
in &lt;em&gt;y&lt;/em&gt; matched a row in &lt;em&gt;x&lt;/em&gt; in all three
&lt;strong&gt;keys&lt;/strong&gt;. So, since there is a total mismatch between
tables, only &lt;em&gt;x&lt;/em&gt; table was returned.&lt;/p&gt;
&lt;p&gt;Now, if we only have two &lt;strong&gt;keys&lt;/strong&gt;,
&lt;code&gt;left_join&lt;/code&gt; finds that second and third rows in both table
match for columns “A” and “B”. It keeps only one of them to reduce the
redundancy. The column “C” was different for first two rows, so
&lt;code&gt;left_join&lt;/code&gt; kept “C” columns from both tables. The third row
from &lt;em&gt;x&lt;/em&gt; does not find any match in &lt;em&gt;y&lt;/em&gt;, thus it kept its
own observation and joined a new-empty cell - &lt;em&gt;NA&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;left_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  A     B       C.x   C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1     3
2 b     two       2     2
3 c     three     3    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One key shows that column “B” in &lt;em&gt;y&lt;/em&gt; table also has one
unmatching value in the third row, thus, it uncovers the mismatch, which
could be useful, if you want to make sure the tables have identical
observations. But if you know they are not and you want to get rid of
the mismatch, use &lt;code&gt;inner_join&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;left_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 5
  A     B.x     C.x B.y     C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1 one       3
2 b     two       2 two       2
3 c     three     3 &amp;lt;NA&amp;gt;     NA&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;right_join&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;right-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-26-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Right join&lt;/em&gt; works in the say way &lt;em&gt;left join&lt;/em&gt; does, but
keeps all the observation from the right table, &lt;em&gt;y&lt;/em&gt; in our
case.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;right_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 b     two       2
2 a     one       3
3 d     four      1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;right_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  A     B       C.x   C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1     3
2 b     two       2     2
3 d     four     NA     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;right_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 5
  A     B.x     C.x B.y     C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1 one       3
2 b     two       2 two       2
3 d     &amp;lt;NA&amp;gt;     NA four      1&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" style="list-style-type: decimal"&gt;
&lt;li&gt;full_join&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;full-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-28-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Full join&lt;/em&gt; is the most greedy join because it keeps every
possible mismatch. Thus, if all columns are &lt;strong&gt;keys&lt;/strong&gt;,
similarly to the &lt;em&gt;inner join&lt;/em&gt; finds that only second row matches
across all the columns. But, in contrast to inner join, it keeps the
first and third rows from both tables. That’s how with
&lt;code&gt;full_join&lt;/code&gt; you’ll finish up with 5 rows in contrast to only
1 raw returned by the &lt;code&gt;inner_join&lt;/code&gt;. If not all columns are
&lt;strong&gt;keys&lt;/strong&gt;, a &lt;em&gt;full join&lt;/em&gt; acts as a combination of
&lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; joins.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;full_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 b     two       2
3 c     three     3
4 a     one       3
5 d     four      1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;full_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 4
  A     B       C.x   C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1     3
2 b     two       2     2
3 c     three     3    NA
4 d     four     NA     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;full_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 5
  A     B.x     C.x B.y     C.y
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1 one       3
2 b     two       2 two       2
3 c     three     3 &amp;lt;NA&amp;gt;     NA
4 d     &amp;lt;NA&amp;gt;     NA four      1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returning every mismatch between tables could be a blessing if you
want to find inconsistencies in your table, but it also could become a
huge headache since it may produce thousands of “new” observations out
of nowhere. And if your dataset is big and messy, and the chances are it
is, and you have &lt;em&gt;NAs&lt;/em&gt; in it from the start, you wouldn’t be able
to differentiate among original &lt;em&gt;NAs&lt;/em&gt; and “new” &lt;em&gt;NAs&lt;/em&gt;. The
danger here is that you might continue with your analysis and produce
unrealistic results without even knowing about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus, despite the advantages of joins, e.g. reducing
redundancy, please, be very careful and always double check the
output.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start="5" style="list-style-type: decimal"&gt;
&lt;li&gt;Duplicates&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you join duplicated keys, you get all possible combinations,
thus try to make a &lt;strong&gt;key&lt;/strong&gt; column as unique as
possible.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-05-09-datawrangling4/join-many-to-many.png" /&gt;&lt;/p&gt;
&lt;ol start="6" style="list-style-type: decimal"&gt;
&lt;li&gt;Join tables with different names&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you know that some columns in two different tables are identical
but have different names, you don’t have to &lt;strong&gt;rename&lt;/strong&gt; them
(although you can), but use the &lt;strong&gt;equal&lt;/strong&gt; sing to tell
&lt;code&gt;dplyr&lt;/code&gt; they are the same:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;left_join(y, z, by = c(&amp;quot;A&amp;quot; = &amp;quot;D&amp;quot;, &amp;quot;B&amp;quot; = &amp;quot;E&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  A     B         C     F
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       3     3
2 b     two       2     2
3 d     four      1     1&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="filtering-joins-combine-rows"&gt;Filtering joins combine rows&lt;/h5&gt;
&lt;p&gt;Filtering joins affect only the rows / observations, not the columns
/ variables. But filtering joins never duplicate rows like mutating
joins do.&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;semi_join&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;semi-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-31-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;An semi-join keeps only the rows that have a match:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-05-09-datawrangling4/join-semi-many.png" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;semi_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 b     two       2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;semi_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 b     two       2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;semi_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 b     two       2&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;anti_join&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;image_read(&amp;quot;anti-join.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img
src="../file3ddf21478db7_files/figure-html/unnamed-chunk-33-1.gif" /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;anti-join&lt;/code&gt; only keeps the rows that don’t have a
match. I often use it to check for discrepancies between tables. If
&lt;code&gt;anti_join&lt;/code&gt; returns nothing - it’s a good sign ;).&lt;/p&gt;
&lt;p&gt;&lt;img src="join-anti.png" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;anti_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 a     one       1
2 c     three     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;anti_join(x, y, by = c(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 c     three     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;anti_join(x, y, by = c(&amp;quot;A&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 3
  A     B         C
  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1 c     three     3&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="conditioning"&gt;Conditioning&lt;/h4&gt;
&lt;p&gt;Having columns and rows where you want them to be it amazing, and if
you have a structure of your table, which is ready to “take off” to the
“machine learning wonderland” it’s even better. But in order to do some
statistics with the data, the perfect structure of the dataset is
sometimes not the most important thing. If we want to do something with
data, the data itself, meaning the values inside of the cell, is the
essence of a good statistical analysis and meaningful results. Thus, we
often need to manipulate the values inside our tables. Here I’d like to
present two most useful techniques, which I use in everyday professional
life.&lt;/p&gt;
&lt;h5 id="if-else"&gt;If … else …&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;ifelse&lt;/code&gt; command allows you to produce a new column
depending on the existing one (like in the first chunk of code below),
or simply change the values in the existing variable, if you need to
(like in the second).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  mutate(population_2 = ifelse(population &amp;lt; mean(population), &amp;quot;low&amp;quot;, &amp;quot;high&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
  country      year  cases population population_2
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       
1 Afghanistan  1999    745   19987071 low         
2 Afghanistan  2000   2666   20595360 low         
3 Brazil       1999  37737  172006362 low         
4 Brazil       2000  80488  174504898 low         
5 China        1999 212258 1272915272 high        
6 China        2000 213766 1280428583 high        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only problem with &lt;code&gt;ifelse&lt;/code&gt; is that, if you have to
many &lt;strong&gt;cases&lt;/strong&gt;, it will be painful to write multiple
&lt;code&gt;ifelse&lt;/code&gt;s, thus we can use &lt;code&gt;case_when&lt;/code&gt;:&lt;/p&gt;
&lt;h5 id="case-when"&gt;Case when …&lt;/h5&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  mutate(country = case_when(
    country == &amp;quot;Afghanistan&amp;quot; ~ &amp;quot;Afgh&amp;quot;,
    country == &amp;quot;Brazil&amp;quot;      ~ &amp;quot;Braz&amp;quot;,
    country == &amp;quot;China&amp;quot;       ~ &amp;quot;Chin&amp;quot;,
    TRUE                     ~ &amp;quot;Rest of the World&amp;quot;
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 4
  country  year  cases population
  &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afgh     1999    745   19987071
2 Afgh     2000   2666   20595360
3 Braz     1999  37737  172006362
4 Braz     2000  80488  174504898
5 Chin     1999 212258 1272915272
6 Chin     2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="bonus-peace-of-code"&gt;Bonus peace of code&lt;/h3&gt;
&lt;p&gt;Have a look at a messy dataset &lt;code&gt;who&lt;/code&gt;, think about what
would you do with it and then check out the code below which is mostly
borrowed from the referenced book.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;who&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 7,240 × 60
   country     iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534
   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
 1 Afghanistan AF    AFG    1980          NA           NA           NA
 2 Afghanistan AF    AFG    1981          NA           NA           NA
 3 Afghanistan AF    AFG    1982          NA           NA           NA
 4 Afghanistan AF    AFG    1983          NA           NA           NA
 5 Afghanistan AF    AFG    1984          NA           NA           NA
 6 Afghanistan AF    AFG    1985          NA           NA           NA
 7 Afghanistan AF    AFG    1986          NA           NA           NA
 8 Afghanistan AF    AFG    1987          NA           NA           NA
 9 Afghanistan AF    AFG    1988          NA           NA           NA
10 Afghanistan AF    AFG    1989          NA           NA           NA
# ℹ 7,230 more rows
# ℹ 53 more variables: new_sp_m3544 &amp;lt;dbl&amp;gt;, new_sp_m4554 &amp;lt;dbl&amp;gt;,
#   new_sp_m5564 &amp;lt;dbl&amp;gt;, new_sp_m65 &amp;lt;dbl&amp;gt;, new_sp_f014 &amp;lt;dbl&amp;gt;,
#   new_sp_f1524 &amp;lt;dbl&amp;gt;, new_sp_f2534 &amp;lt;dbl&amp;gt;, new_sp_f3544 &amp;lt;dbl&amp;gt;,
#   new_sp_f4554 &amp;lt;dbl&amp;gt;, new_sp_f5564 &amp;lt;dbl&amp;gt;, new_sp_f65 &amp;lt;dbl&amp;gt;,
#   new_sn_m014 &amp;lt;dbl&amp;gt;, new_sn_m1524 &amp;lt;dbl&amp;gt;, new_sn_m2534 &amp;lt;dbl&amp;gt;,
#   new_sn_m3544 &amp;lt;dbl&amp;gt;, new_sn_m4554 &amp;lt;dbl&amp;gt;, new_sn_m5564 &amp;lt;dbl&amp;gt;, …&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;who %&amp;gt;% 
  pivot_longer(cols = new_sp_m014:newrel_f65, values_drop_na = T) %&amp;gt;% 
  select(-iso2, -iso3) %&amp;gt;% 
  mutate(name = stringr::str_replace(name, &amp;quot;newrel&amp;quot;, &amp;quot;new_rel&amp;quot;)) %&amp;gt;% 
  separate(name, into = c(&amp;quot;new&amp;quot;, &amp;quot;type&amp;quot;, &amp;quot;sexage&amp;quot;)) %&amp;gt;% 
  separate(&amp;quot;sexage&amp;quot;, into = c(&amp;quot;sex&amp;quot;, &amp;quot;age&amp;quot;), sep = 1) %&amp;gt;% 
  mutate(age_2 = case_when(
    age == &amp;quot;014&amp;quot;  ~ &amp;quot;0 – 14 years old&amp;quot;,
    age == &amp;quot;1524&amp;quot; ~ &amp;quot;15 - 24 years old&amp;quot;,
    age == &amp;quot;2534&amp;quot; ~ &amp;quot;25 - 34 years old&amp;quot;,
    age == &amp;quot;3544&amp;quot; ~ &amp;quot;35 - 44 years old&amp;quot;,
    age == &amp;quot;4554&amp;quot; ~ &amp;quot;45 - 54 years old&amp;quot;,
    age == &amp;quot;5564&amp;quot; ~ &amp;quot;55 - 64 years old&amp;quot;,
    age == &amp;quot;65&amp;quot;   ~ &amp;quot;65 or older&amp;quot;,
    TRUE          ~ &amp;quot;bla&amp;quot;
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 76,046 × 8
   country      year new   type  sex   age   value age_2            
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            
 1 Afghanistan  1997 new   sp    m     014       0 0 – 14 years old 
 2 Afghanistan  1997 new   sp    m     1524     10 15 - 24 years old
 3 Afghanistan  1997 new   sp    m     2534      6 25 - 34 years old
 4 Afghanistan  1997 new   sp    m     3544      3 35 - 44 years old
 5 Afghanistan  1997 new   sp    m     4554      5 45 - 54 years old
 6 Afghanistan  1997 new   sp    m     5564      2 55 - 64 years old
 7 Afghanistan  1997 new   sp    m     65        0 65 or older      
 8 Afghanistan  1997 new   sp    f     014       5 0 – 14 years old 
 9 Afghanistan  1997 new   sp    f     1524     38 15 - 24 years old
10 Afghanistan  1997 new   sp    f     2534     36 25 - 34 years old
# ℹ 76,036 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In the current age of &lt;strong&gt;big data&lt;/strong&gt;, data manipulation is
one of the most important skills for any data scientist. It not only
allows you to make the best out of your own data in terms of
visualisation, statistics and machine learning, but may also help you to
reanimate unused or too-messy data and so make exiting discoveries.
Mastering my &lt;strong&gt;Data Wrangling Trilogy&lt;/strong&gt; ( &lt;a
href="https://yury-zablotski.netlify.com/post/data-wrangling-1/"&gt;Vol.
1&lt;/a&gt;, &lt;a
href="https://yury-zablotski.netlify.com/post/2019-09-22-data-wrangling-2/data-wrangling-2/"&gt;Vol.
2&lt;/a&gt; and this &lt;a href=""&gt;Vol. 3&lt;/a&gt;) will enable you to solve 95% of
common data problems in &lt;em&gt;R&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="whats-next"&gt;What’s next&lt;/h3&gt;
&lt;p&gt;After bringing the data to the form you need, it’s time to produce
some results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href="https://yury-zablotski.netlify.com/post/fancy-tables/"&gt;Fancy
tables: frequency, contingency and pivot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://yury-zablotski.netlify.com/post/fancy-descriptive-statistics/"&gt;Fancy
descriptive statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Thank you for reading!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="further-readings-and-references"&gt;Further readings and
references&lt;/h3&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Amazing and Free Book by Garrett Grolemund and Hadley
Wickham: &lt;a href="https://r4ds.had.co.nz/"&gt;“R for Data Science”&lt;/a&gt;&lt;a
href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>f88469e7cb10a4ffab2556ca7436d0a5</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>data wrangling</category>
      <category>R package reviews</category>
      <guid>https://yuzar-blog.netlify.app/posts/2023-05-09-datawrangling4</guid>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2023-05-09-datawrangling4/datawrangling4_files/figure-html5/unnamed-chunk-5-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Advanced {dplyr}: 50+ Data Wrangling Techniques!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2023-02-07-datawrangling2</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s ca. 17 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/n4kmHjKZh0E" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll start with loading the &lt;code&gt;tidyverse&lt;/code&gt; package. First,
because &lt;code&gt;dplyr&lt;/code&gt; package is part of it and secondly,
&lt;code&gt;tidyverse&lt;/code&gt; contains ready to use data-sets, such as
“table2”.&lt;/p&gt;
&lt;p&gt;We’ll use the ´The big 6´ English verbs (&lt;strong&gt;arrange, select,
mutate, filter, group by and summarise&lt;/strong&gt;), we learned from the &lt;a
href="https://youtu.be/XcK4chr2jws"&gt;first video&lt;/a&gt; of the series, but
we now will dive deep into their arguments.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="arrange"&gt;1. Arrange&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-02-07-datawrangling2/arrange.png" /&gt;&lt;/p&gt;
&lt;p&gt;Using the first verb &lt;strong&gt;arrange()&lt;/strong&gt;, we can sort our
table by one or more columns. We get the earliest year first, then
within every year we’ll display the lowest counts first.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# this %&amp;gt;% is pipe, explained in the first video
table2 %&amp;gt;%  
  arrange(year, count) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 12 × 4
   country      year type            count
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
 1 Afghanistan  1999 cases             745
 2 Brazil       1999 cases           37737
 3 China        1999 cases          212258
 4 Afghanistan  1999 population   19987071
 5 Brazil       1999 population  172006362
 6 China        1999 population 1272915272
 7 Afghanistan  2000 cases            2666
 8 Brazil       2000 cases           80488
 9 China        2000 cases          213766
10 Afghanistan  2000 population   20595360
11 Brazil       2000 population  174504898
12 China        2000 population 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only problem with that is, that &lt;code&gt;arrange&lt;/code&gt; orders rows
by values in the &lt;strong&gt;ascending&lt;/strong&gt; (or - low to high) order by
default. But we sometimes need the &lt;strong&gt;descending&lt;/strong&gt; order to
see the highest values first. For that we can use the &lt;code&gt;desc&lt;/code&gt;
function to sort a variable in the &lt;strong&gt;descending&lt;/strong&gt; (or -
high to low) order. While sorting several variables, only variables
where you explicitly mention &lt;code&gt;desc&lt;/code&gt; will be sorted in a
descending order, the others will remain sorted in a default - ascending
way. It is useful for the case when you’d want to see the earlier ears
first, but at the same time the highest counts every year.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2 %&amp;gt;% 
  arrange(year, desc(count)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 12 × 4
   country      year type            count
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
 1 China        1999 population 1272915272
 2 Brazil       1999 population  172006362
 3 Afghanistan  1999 population   19987071
 4 China        1999 cases          212258
 5 Brazil       1999 cases           37737
 6 Afghanistan  1999 cases             745
 7 China        2000 population 1280428583
 8 Brazil       2000 population  174504898
 9 Afghanistan  2000 population   20595360
10 China        2000 cases          213766
11 Brazil       2000 cases           80488
12 Afghanistan  2000 cases            2666&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you arrange your data, missing values will be neatly placed at the
bottom of your table, regardless of whether you choose to sort in
ascending or descending order.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- tibble(y = c(1,2,NA,3,4))
x %&amp;gt;% arrange(y) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 1
      y
  &amp;lt;dbl&amp;gt;
1     1
2     2
3     3
4     4
5    NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;x %&amp;gt;% arrange(desc(y))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 1
      y
  &amp;lt;dbl&amp;gt;
1     4
2     3
3     2
4     1
5    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After arranging data, the next most useful thing is to
&lt;strong&gt;select&lt;/strong&gt; the most useful columns via the… drumroll…
&lt;strong&gt;select&lt;/strong&gt; command.&lt;/p&gt;
&lt;h2 id="select"&gt;2. Select&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(mpg, hp) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 2
$ mpg &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19…
$ hp  &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Selecting columns by simply writing their names into brackets seems
like a great idea, but not when you’re dealing with a table of 300
columns. Writing out 100 column names in brackets &lt;strong&gt;is no
fun&lt;/strong&gt;, but don’t worry - there’s a solution. By using a
&lt;strong&gt;colon&lt;/strong&gt; between the variables you need, you can easily
select multiple columns in the middle of your table.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(hp:vs) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 5
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, right? But sometimes, the columns in your table won’t be nicely
grouped together, which means you can’t use the &lt;strong&gt;colon&lt;/strong&gt;
trick for selecting multiple columns. But there’s still an easy way to
eliminate unwanted columns &lt;em&gt;without typing out every single
name&lt;/em&gt;. Just add a &lt;strong&gt;minus sign&lt;/strong&gt; in front of the
columns you want to &lt;strong&gt;remove&lt;/strong&gt;. Some folks like to use an
&lt;strong&gt;exclamation mark&lt;/strong&gt; instead of the minus, but personally,
I find the minus sign more intuitive.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(-(mpg:disp), !wt, -(am:carb)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 8
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still a lot of typing? If you know the column numbers you need, you
can actually code even faster. This way, your code won’t be dependent on
specific column names, and you’ll make less typing mistakes. However,
let me give you a warning: unlike many other programming languages, in
R, the first column is denoted by 1, not 0. I don’t know about you, but
using &lt;em&gt;1 for the first column just makes more sense to me&lt;/em&gt;. So
keep this in mind the next time you’re selecting columns in R using
numbers.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(2:5, 7) 

mtcars %&amp;gt;% 
  select(-(2:5), -7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, with {dplyr}, you can make your life even easier if your column
names follow certain patterns, such as “mean_of_this” and
“mean_of_that”. Instead of tediously typing them all out, simply utilize
{dplyr}’s powerful starts_with(), ends_with(), or contains() functions
to quickly gather all the necessary columns. With this time-saving
technique, you’ll have more time to focus on the real work and get
things done efficiently.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;diamonds %&amp;gt;% 
  select(starts_with(&amp;quot;c&amp;quot;)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 53,940
Columns: 4
$ carat   &amp;lt;dbl&amp;gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22…
$ cut     &amp;lt;ord&amp;gt; Ideal, Premium, Good, Premium, Good, Very Good, Very…
$ color   &amp;lt;ord&amp;gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J…
$ clarity &amp;lt;ord&amp;gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, …&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(ends_with(&amp;quot;c&amp;quot;)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 1
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(contains(&amp;quot;c&amp;quot;)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 3
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Want to apply multiple selection options at once? No problem - just
use the “&amp;amp;” or “|” operators to define multiple conditions. You can
also use the “exclamation mark” to negate a condition. For example, if
you want your final table to exclude any columns with the letter “a”,
but still include columns starting with “c”, you can use the
“exclamation mark” before the first condition, “&amp;amp;” between
conditions, and no “exclamation mark” before the second.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;%
  select(!contains(&amp;quot;a&amp;quot;) &amp;amp; contains(&amp;quot;c&amp;quot;)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 2
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, if you only want to select variables starting with “c”
&lt;strong&gt;or&lt;/strong&gt; ending with any letter except “p” and “t”, you can
use the “|” operator and negate the endings with “p” and “t” letters
with the “exclamation mark”.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;%
  select(starts_with(&amp;quot;c&amp;quot;) | !ends_with(c(&amp;quot;p&amp;quot;, &amp;quot;t&amp;quot;))) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 7
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you forget how to spell a variable, {dplyr} offers the
&lt;strong&gt;one_of&lt;/strong&gt; function to choose the correct name(s). This is
helpful for managing ongoing flow of field data with common
misspellings, which can prevent your pipeline from breaking down.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(one_of(&amp;quot;weight&amp;quot;, &amp;quot;wt&amp;quot;, &amp;quot;wtf&amp;quot;, &amp;quot;whatever&amp;quot;)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 1
$ wt &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To move important columns to the beginning of the table, list them
first and add the &lt;strong&gt;everything()&lt;/strong&gt; argument to include the
rest.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(mpg, hp, everything()) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you prefer, you can use the function &lt;strong&gt;relocate&lt;/strong&gt;
instead, which does the same job as reordering columns manually.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  relocate(mpg, hp) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  relocate(contains(&amp;quot;c&amp;quot;), hp) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 11
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fetch the last or third last column, simply request it with the
&lt;code&gt;last_col()&lt;/code&gt; function and use the &lt;code&gt;offset&lt;/code&gt;
argument. You see, with dplyr, programming feels entirely natural and
instinctive.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(last_col()) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 1
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(last_col(offset = 3)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 1
$ vs &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To select specific columns that meet certain criteria, such as being
numeric or textual, use &lt;strong&gt;select_if&lt;/strong&gt;. This is particularly
useful for large datasets with numerous columns, as it allows for easy
selection of the desired variables without manual selection. For
instance, when working with the diamonds dataset, we can avoid three
ordered categorical columns by using
&lt;strong&gt;select_if(is.numeric)&lt;/strong&gt; in our pipeline.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;glimpse(diamonds)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 53,940
Columns: 10
$ carat   &amp;lt;dbl&amp;gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22…
$ cut     &amp;lt;ord&amp;gt; Ideal, Premium, Good, Premium, Good, Very Good, Very…
$ color   &amp;lt;ord&amp;gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J…
$ clarity &amp;lt;ord&amp;gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, …
$ depth   &amp;lt;dbl&amp;gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1…
$ table   &amp;lt;dbl&amp;gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, …
$ price   &amp;lt;int&amp;gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 33…
$ x       &amp;lt;dbl&amp;gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87…
$ y       &amp;lt;dbl&amp;gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78…
$ z       &amp;lt;dbl&amp;gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;diamonds %&amp;gt;% 
  select_if(is.numeric) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 53,940
Columns: 7
$ carat &amp;lt;dbl&amp;gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, …
$ depth &amp;lt;dbl&amp;gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, …
$ table &amp;lt;dbl&amp;gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54…
$ price &amp;lt;int&amp;gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339,…
$ x     &amp;lt;dbl&amp;gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, …
$ y     &amp;lt;dbl&amp;gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, …
$ z     &amp;lt;dbl&amp;gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, …&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also transform particular variable names for our convenience,
e.g. we could change the case of the column names to upper
(&lt;code&gt;toupper&lt;/code&gt;) or to lower (&lt;code&gt;tolower&lt;/code&gt;) cases by using
&lt;code&gt;select_at&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select_at(vars(mpg, hp), toupper) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 2
$ MPG &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19…
$ HP  &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every now and then we just want to have a look at the values of one
specific column. To do so, the &lt;code&gt;pull&lt;/code&gt; command comes in handy.
And if you need to select a specific row, it’s as straightforward as
specifying which one you want - whether it’s the &lt;code&gt;first&lt;/code&gt;,
&lt;code&gt;last&lt;/code&gt;, &lt;code&gt;ninth&lt;/code&gt;, or any other number.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% pull(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3
[14] 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3
[27] 26.0 30.4 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% first()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  mpg cyl disp  hp drat   wt  qsec vs am gear carb
1  21   6  160 110  3.9 2.62 16.46  0  1    4    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% last()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   mpg cyl disp  hp drat   wt qsec vs am gear carb
1 21.4   4  121 109 4.11 2.78 18.6  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% nth(9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   mpg cyl  disp hp drat   wt qsec vs am gear carb
1 22.8   4 140.8 95 3.92 3.15 22.9  1  0    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="mutate"&gt;3. Mutate&lt;/h2&gt;
&lt;p&gt;Now, it’s time to transition away from reducing our dataset using
‘select’ and ‘filter’ commands and instead utilize the ‘mutate’ function
to expand it. This command is intuitive because anything new in nature
arises through mutations.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-02-07-datawrangling2/mutation.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;But before proceeding to the ‘mutate()’ function, we can add a new
column using the ‘add_columns’ function. It’s useful for adding IDs to
each row. By default, the ‘mutate()’ command places new columns on the
right-hand side, which can be difficult to keep track of with many
columns. However, you can use the ‘.before’ argument to add new columns
on the left-hand side. In case you want to add a new column ‘before’ or
‘after’ a specific column, it’s preferable to use ‘mutate’ instead of
‘add_column’.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(1:3) %&amp;gt;% 
  add_column(new = 1:32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                     mpg cyl  disp new
Mazda RX4           21.0   6 160.0   1
Mazda RX4 Wag       21.0   6 160.0   2
Datsun 710          22.8   4 108.0   3
Hornet 4 Drive      21.4   6 258.0   4
Hornet Sportabout   18.7   8 360.0   5
Valiant             18.1   6 225.0   6
Duster 360          14.3   8 360.0   7
Merc 240D           24.4   4 146.7   8
Merc 230            22.8   4 140.8   9
Merc 280            19.2   6 167.6  10
Merc 280C           17.8   6 167.6  11
Merc 450SE          16.4   8 275.8  12
Merc 450SL          17.3   8 275.8  13
Merc 450SLC         15.2   8 275.8  14
Cadillac Fleetwood  10.4   8 472.0  15
Lincoln Continental 10.4   8 460.0  16
Chrysler Imperial   14.7   8 440.0  17
Fiat 128            32.4   4  78.7  18
Honda Civic         30.4   4  75.7  19
Toyota Corolla      33.9   4  71.1  20
Toyota Corona       21.5   4 120.1  21
Dodge Challenger    15.5   8 318.0  22
AMC Javelin         15.2   8 304.0  23
Camaro Z28          13.3   8 350.0  24
Pontiac Firebird    19.2   8 400.0  25
Fiat X1-9           27.3   4  79.0  26
Porsche 914-2       26.0   4 120.3  27
Lotus Europa        30.4   4  95.1  28
Ford Pantera L      15.8   8 351.0  29
Ferrari Dino        19.7   6 145.0  30
Maserati Bora       15.0   8 301.0  31
Volvo 142E          21.4   4 121.0  32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(1:3) %&amp;gt;% 
  add_column(ID = 1:32, .before = T) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 4
$ ID   &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(1:3) %&amp;gt;% 
  mutate(ID = 1:32, .after = cyl) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 4
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ ID   &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, you can either fill new columns with with whatever you
want (playing God) or use existing columns to calculate new ones. And
the best part is, right after you create a new column, you can use it
for further calculations in the same chunk of code.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  mutate(make_new_column  = &amp;quot;with whatever you want&amp;quot;) %&amp;gt;% 
  mutate(mpg_hp           = mpg / hp) %&amp;gt;% 
  mutate(use_new_column   = mpg_hp * 100) %&amp;gt;% 
  select(make_new_column, mpg_hp, use_new_column, everything()) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 14
$ make_new_column &amp;lt;chr&amp;gt; &amp;quot;with whatever you want&amp;quot;, &amp;quot;with whatever you…
$ mpg_hp          &amp;lt;dbl&amp;gt; 0.19090909, 0.19090909, 0.24516129, 0.194545…
$ use_new_column  &amp;lt;dbl&amp;gt; 19.090909, 19.090909, 24.516129, 19.454545, …
$ mpg             &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24…
$ cyl             &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8,…
$ disp            &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 36…
$ hp              &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 12…
$ drat            &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.…
$ wt              &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.…
$ qsec            &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15…
$ vs              &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,…
$ am              &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ gear            &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3,…
$ carb            &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although &lt;code&gt;mutate()&lt;/code&gt; keeps the old columns used to create
new ones, you can use the &lt;code&gt;transmute()&lt;/code&gt; command if you only
want to retain the new variables that you have created.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  transmute(mpg_hp = mpg / hp) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 1
$ mpg_hp &amp;lt;dbl&amp;gt; 0.19090909, 0.19090909, 0.24516129, 0.19454545, 0.106…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, you can &lt;code&gt;.keep&lt;/code&gt; only the “used” columns. This
retains only the columns involved or created via &lt;code&gt;mutate()&lt;/code&gt;.
It’s especially handy for large tables.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  mutate(mpg_hp = mpg / hp,
    .keep = &amp;quot;used&amp;quot;) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 3
$ mpg    &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8,…
$ hp     &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 1…
$ mpg_hp &amp;lt;dbl&amp;gt; 0.19090909, 0.19090909, 0.24516129, 0.19454545, 0.106…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even more convenient is the possibility to create multiple columns
with a &lt;strong&gt;comma instead of repeating the &lt;code&gt;mutate&lt;/code&gt;
command&lt;/strong&gt; for each new column. Near the usual arithmetic
operations, like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subtract or multiply, you can easily&lt;/li&gt;
&lt;li&gt;rank the values in any columns or get a&lt;/li&gt;
&lt;li&gt;cumulative mean, cumulative sum, or cumulative product and even&lt;/li&gt;
&lt;li&gt;get a column with lagged or leading values if you need to and many
more&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;d &amp;lt;- tibble(
  a = 1:5,
  b = 6:10)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 5 × 2
      a     b
  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
1     1     6
2     2     7
3     3     8
4     4     9
5     5    10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;d %&amp;gt;% 
  mutate(substr  = b - mean(a),
         divide  = b * sum(a),
         rank    = rank(a),
         cummean = cummean(a), # Cumulative mean
         cumsum  = cumsum(a),
         cumprod = cumprod(a),
         lag_a   = lag(a),  
         lead_a  = lead(a), 
         # or: &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, !=, and == 
         logical = a &amp;gt; 3) %&amp;gt;%
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 5
Columns: 11
$ a       &amp;lt;int&amp;gt; 1, 2, 3, 4, 5
$ b       &amp;lt;int&amp;gt; 6, 7, 8, 9, 10
$ substr  &amp;lt;dbl&amp;gt; 3, 4, 5, 6, 7
$ divide  &amp;lt;int&amp;gt; 90, 105, 120, 135, 150
$ rank    &amp;lt;dbl&amp;gt; 1, 2, 3, 4, 5
$ cummean &amp;lt;dbl&amp;gt; 1.0, 1.5, 2.0, 2.5, 3.0
$ cumsum  &amp;lt;int&amp;gt; 1, 3, 6, 10, 15
$ cumprod &amp;lt;dbl&amp;gt; 1, 2, 6, 24, 120
$ lag_a   &amp;lt;int&amp;gt; NA, 1, 2, 3, 4
$ lead_a  &amp;lt;int&amp;gt; 2, 3, 4, 5, NA
$ logical &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, TRUE, TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, before we go to the really cool stuff, I have to tell you
that sometimes it’s useful to be able to transfer the &lt;strong&gt;row names
to a real column&lt;/strong&gt;, or vice versa, any &lt;strong&gt;column to
row-names&lt;/strong&gt;. Well, with {dplyr} it could not be more intuitive,
because programming in {dplyr} is very close to normal English:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  select(-1:4) %&amp;gt;% 
  rownames_to_column() %&amp;gt;% 
  head()   # &amp;quot;head&amp;quot; shows only first 6 rows of a dataset, &amp;quot;tail&amp;quot; the last 6 row&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            rowname cyl disp  hp
1         Mazda RX4   6  160 110
2     Mazda RX4 Wag   6  160 110
3        Datsun 710   4  108  93
4    Hornet 4 Drive   6  258 110
5 Hornet Sportabout   8  360 175
6           Valiant   6  225 105&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;d %&amp;gt;% 
  column_to_rownames(&amp;quot;b&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   a
6  1
7  2
8  3
9  4
10 5&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="work-across-multiple-columns-simultaneously"&gt;Work across
multiple columns simultaneously&lt;/h3&gt;
&lt;p&gt;So, we have learned a few good techniques already. But &lt;strong&gt;you
can become even more effective, when you work with several columns at
the same time&lt;/strong&gt;! For example, you can select particular
&lt;em&gt;numeric&lt;/em&gt; variables in your table with &lt;code&gt;mutate_at()&lt;/code&gt;
function and make them &lt;em&gt;categorical&lt;/em&gt; using &lt;code&gt;factor&lt;/code&gt;
argument. In order to get averages for ALL variables, use
&lt;code&gt;summarise_all()&lt;/code&gt;. Or, when you want to transform all numeric
columns with a logarithm,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;mutate_if&lt;/code&gt; function,&lt;/li&gt;
&lt;li&gt;then provide an argument &lt;code&gt;is.numeric&lt;/code&gt; and finally&lt;/li&gt;
&lt;li&gt;give a command of your choice, for example &lt;code&gt;log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;%
  mutate_at(vars(cyl, am, gear), factor) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 1…
$ cyl  &amp;lt;fct&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190,…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;fct&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;fct&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;%
  summarise_all(mean) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       mpg    cyl     disp       hp     drat      wt     qsec     vs
1 20.09062 6.1875 230.7219 146.6875 3.596563 3.21725 17.84875 0.4375
       am   gear   carb
1 0.40625 3.6875 2.8125&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;iris %&amp;gt;%
  mutate_if(is.numeric, log) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 150
Columns: 5
$ Sepal.Length &amp;lt;dbl&amp;gt; 1.629241, 1.589235, 1.547563, 1.526056, 1.60943…
$ Sepal.Width  &amp;lt;dbl&amp;gt; 1.252763, 1.098612, 1.163151, 1.131402, 1.28093…
$ Petal.Length &amp;lt;dbl&amp;gt; 0.33647224, 0.33647224, 0.26236426, 0.40546511,…
$ Petal.Width  &amp;lt;dbl&amp;gt; -1.6094379, -1.6094379, -1.6094379, -1.6094379,…
$ Species      &amp;lt;fct&amp;gt; setosa, setosa, setosa, setosa, setosa, setosa,…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since R is a very intuitive programming language and since
&lt;code&gt;_at, _if and _all&lt;/code&gt; allow you to make any calculation
&lt;strong&gt;across&lt;/strong&gt; multiple columns, it didn’t take long until a
function named - &lt;code&gt;across&lt;/code&gt; was created, which unites the
capabilities of &lt;code&gt;_at, _if and _all&lt;/code&gt;. For instance we can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easily round particular columns or&lt;/li&gt;
&lt;li&gt;calculate any statistics, like mean or standard deviation, for all
groups of any categorical variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;%
  mutate(across(c(mpg, wt), round)) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 32
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 21, 21, 23, 21, 19, 18, 14, 24, 23, 19, 18, 16, 17, 15,…
$ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4…
$ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7,…
$ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180…
$ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3…
$ wt   &amp;lt;dbl&amp;gt; 3, 3, 2, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 2, 2…
$ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00,…
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…
$ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1…
$ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4…
$ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;iris %&amp;gt;%
  group_by(Species) %&amp;gt;%
  summarise(
    across(
      starts_with(&amp;quot;Sepal&amp;quot;), 
      list(mean = mean, sd = sd) ) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 5
  Species    Sepal.Length_mean Sepal.Length_sd Sepal.Width_mean
  &amp;lt;fct&amp;gt;                  &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
1 setosa                  5.01           0.352             3.43
2 versicolor              5.94           0.516             2.77
3 virginica               6.59           0.636             2.97
# ℹ 1 more variable: Sepal.Width_sd &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="work-across-multiple-rows-simultaneously"&gt;Work across multiple
rows simultaneously&lt;/h3&gt;
&lt;p&gt;So, summarizing values within columns is cool, but what if we want to
summarize values of rows across multiple columns? Well, we can easily do
that by using the &lt;code&gt;rowwise()&lt;/code&gt;and &lt;code&gt;c_across()&lt;/code&gt;
functions to perform row-wise aggregations.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df &amp;lt;- tibble(a = 1:4, b = 4:1, c = c(5:8))

df %&amp;gt;%
  rowwise() %&amp;gt;%
  mutate(
    sum = sum(c_across(a:c)),
    sd  = sd(c_across(a:c))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 5
# Rowwise: 
      a     b     c   sum    sd
  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
1     1     4     5    10  2.08
2     2     3     6    11  2.08
3     3     2     7    12  2.65
4     4     1     8    13  3.51&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="filter"&gt;4. Filter&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-02-07-datawrangling2/filter.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Speaking of rows: sometimes we need only a few particular rows. Using
the &lt;code&gt;filter&lt;/code&gt; function and logical operators such as
&lt;code&gt;&amp;lt;&lt;/code&gt; (less than), &lt;code&gt;&amp;lt;=&lt;/code&gt; (less than or equal
to), &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than), &lt;code&gt;&amp;gt;=&lt;/code&gt; (greater than
or equal to), &lt;code&gt;!=&lt;/code&gt; (not equal), &lt;code&gt;==&lt;/code&gt; (equal),
&lt;code&gt;&amp;amp;&lt;/code&gt; (and), &lt;code&gt;|&lt;/code&gt; (or), we can tell
&lt;strong&gt;R&lt;/strong&gt; exactly what data we want. We may even employ
multiple operators simultaneously, should the need arise, by using the
“&amp;amp;” operator to verify several conditions, or by using the vertical
line “|” to determine either condition:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-02-07-datawrangling2/transform-logical.png" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(cyl == 6, vs == 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Ferrari Dino  19.7   6  145 175 3.62 2.770 15.50  0  1    5    6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(cyl == 6 &amp;amp; vs == 0 &amp;amp; gear == 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;              mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(cyl == 4 &amp;amp; gear != 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa  30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(mpg &amp;lt; 30, hp &amp;gt; 200, am == 0) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 5
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 14.3, 10.4, 10.4, 14.7, 13.3
$ cyl  &amp;lt;dbl&amp;gt; 8, 8, 8, 8, 8
$ disp &amp;lt;dbl&amp;gt; 360, 472, 460, 440, 350
$ hp   &amp;lt;dbl&amp;gt; 245, 205, 215, 230, 245
$ drat &amp;lt;dbl&amp;gt; 3.21, 2.93, 3.00, 3.23, 3.73
$ wt   &amp;lt;dbl&amp;gt; 3.570, 5.250, 5.424, 5.345, 3.840
$ qsec &amp;lt;dbl&amp;gt; 15.84, 17.98, 17.82, 17.42, 15.41
$ vs   &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0
$ am   &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0
$ gear &amp;lt;dbl&amp;gt; 3, 3, 3, 3, 3
$ carb &amp;lt;dbl&amp;gt; 4, 4, 4, 4, 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(cyl == 8 | am == 0) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 21
Columns: 11
$ mpg  &amp;lt;dbl&amp;gt; 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 1…
$ cyl  &amp;lt;dbl&amp;gt; 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 8…
$ disp &amp;lt;dbl&amp;gt; 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6,…
$ hp   &amp;lt;dbl&amp;gt; 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 20…
$ drat &amp;lt;dbl&amp;gt; 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3…
$ wt   &amp;lt;dbl&amp;gt; 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440,…
$ qsec &amp;lt;dbl&amp;gt; 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90,…
$ vs   &amp;lt;dbl&amp;gt; 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…
$ am   &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ gear &amp;lt;dbl&amp;gt; 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…
$ carb &amp;lt;dbl&amp;gt; 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 2, 4, 2…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(mpg &amp;gt; 30 | hp &amp;lt; 90)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if we need to filter out several values or categories? Well,
in this case we’ll utilize the &lt;code&gt;%in%&lt;/code&gt; argument with the
concatinate argument &lt;code&gt;c()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  filter(cyl %in% c(4,6) &amp;amp; gear %in% c(3,5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, you can &lt;code&gt;slice&lt;/code&gt; the dataset to retrieve
specific rows, such as rows 1 to 3. Additionally, you can easily select
random rows using the &lt;code&gt;slice_sample()&lt;/code&gt; function. With the
&lt;code&gt;n&lt;/code&gt; argument, you can specify the number of random rows to
retrieve, or with the &lt;code&gt;prop&lt;/code&gt; argument, you can specify the
proportion of the data to retrieve. Furthermore, you can use
&lt;code&gt;slice_head()&lt;/code&gt; to extract the top two rows and
&lt;code&gt;slice_tail()&lt;/code&gt; to retrieve the last three values. To obtain
the two smallest or three largest values from any column, you can use
the &lt;code&gt;slice_min()&lt;/code&gt; and &lt;code&gt;slice_max()&lt;/code&gt; commands,
which are even more intuitive.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  slice(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  slice_sample(n = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                    mpg cyl  disp  hp drat    wt  qsec vs am gear
Merc 450SE         16.4   8 275.8 180 3.07 4.070 17.40  0  0    3
Toyota Corolla     33.9   4  71.1  65 4.22 1.835 19.90  1  1    4
Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3
Porsche 914-2      26.0   4 120.3  91 4.43 2.140 16.70  0  1    5
                   carb
Merc 450SE            3
Toyota Corolla        1
Cadillac Fleetwood    4
Porsche 914-2         2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  slice_sample(prop = .1) # since we have 32 rows, 10% of it would be 3 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  slice_head(n = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;              mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  slice_tail(n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               mpg cyl disp  hp drat   wt qsec vs am gear carb
Ferrari Dino  19.7   6  145 175 3.62 2.77 15.5  0  1    5    6
Maserati Bora 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8
Volvo 142E    21.4   4  121 109 4.11 2.78 18.6  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(am) %&amp;gt;% 
  slice_min(mpg, n = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 11
# Groups:   am [2]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1  10.4     8   472   205  2.93  5.25  18.0     0     0     3     4
2  10.4     8   460   215  3     5.42  17.8     0     0     3     4
3  15       8   301   335  3.54  3.57  14.6     0     1     5     8
4  15.8     8   351   264  4.22  3.17  14.5     0     1     5     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(am) %&amp;gt;% 
  slice_max(hp, n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 11
# Groups:   am [2]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1  14.3     8   360   245  3.21  3.57  15.8     0     0     3     4
2  13.3     8   350   245  3.73  3.84  15.4     0     0     3     4
3  14.7     8   440   230  3.23  5.34  17.4     0     0     3     4
4  15       8   301   335  3.54  3.57  14.6     0     1     5     8
5  15.8     8   351   264  4.22  3.17  14.5     0     1     5     4
6  19.7     6   145   175  3.62  2.77  15.5     0     1     5     6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And final thing for slicing is that, using &lt;code&gt;prop&lt;/code&gt; argument
you can easily obtain the top 10% or the lowest 10% of specific values
in each group:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  slice_max(mpg, prop = 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 11
# Groups:   cyl [2]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
2  19.2     8 400     175  3.08  3.84  17.0     0     0     3     2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful way to filter is when you want to determine how many
&lt;code&gt;distinct&lt;/code&gt; categories or values a particular column has. This
also works for multiple columns. Additionally, if you want to retain
other columns when filtering for unique rows, you can use the
&lt;code&gt;.keep_all = TRUE&lt;/code&gt; option. Alternatively, if you want to know
the frequency of unique values in your table, use the
&lt;code&gt;count()&lt;/code&gt; function instead of &lt;code&gt;distinct()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  distinct(cyl) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                  cyl
Mazda RX4           6
Datsun 710          4
Hornet Sportabout   8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  distinct(cyl, am) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                  cyl am
Mazda RX4           6  1
Datsun 710          4  1
Hornet 4 Drive      6  0
Hornet Sportabout   8  0
Merc 240D           4  0
Ford Pantera L      8  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  distinct(cyl, am, .keep_all = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Ford Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  count(cyl, am) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cyl am  n
1   4  0  3
2   4  1  8
3   6  0  4
4   6  1  3
5   8  0 12
6   8  1  2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we sometime need to remove duplicate rows from our dataset,
right? We can easily do that by either using &lt;code&gt;distinct_all()&lt;/code&gt;
command, or, by using even more intuitive &lt;code&gt;unique()&lt;/code&gt;
command:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;bla &amp;lt;- tibble(y = c(2,2,NA,3,4,4),
       y2 = c(2,2,2,NA,4,4))

distinct_all(bla)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 2
      y    y2
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     2     2
2    NA     2
3     3    NA
4     4     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;unique(bla)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 2
      y    y2
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     2     2
2    NA     2
3     3    NA
4     4     4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, similarly to &lt;code&gt;add_column&lt;/code&gt; command, you can
&lt;code&gt;add_row&lt;/code&gt;s to your dataset:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;bla %&amp;gt;% 
  add_row(y = 100, y2 = 999)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 7 × 2
      y    y2
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     2     2
2     2     2
3    NA     2
4     3    NA
5     4     4
6     4     4
7   100   999&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="bonus-chapter-common-mistakes"&gt;Bonus chapter: Common
Mistakes&lt;/h2&gt;
&lt;p&gt;By the way, here are three common mistakes I used to make often,
which caused me a lot of frustration, and which I want to save you
from.&lt;/p&gt;
&lt;h3 id="vs"&gt;1. “=” vs “==”&lt;/h3&gt;
&lt;p&gt;The first mistake is using the &lt;strong&gt;assignment operator&lt;/strong&gt;
(single equal sign) “=” instead of the &lt;strong&gt;comparison
operator&lt;/strong&gt; (double equal sign) “==” while testing for equality.
Fortunately, &lt;code&gt;filter()&lt;/code&gt; command will let you know about this
mistake with an informative error message:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars |&amp;gt;        # |&amp;gt; is similar to %&amp;gt;% 
  filter(am = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Error in `filter()`:
! We detected a named input.
ℹ This usually means that you&amp;#39;ve used `=` instead
  of `==`.
ℹ Did you mean `am == 1`?
Run `rlang::last_error()` to see where the error occurred.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="specify-all-conditions"&gt;2. Specify all conditions&lt;/h3&gt;
&lt;p&gt;The second mistake is to specify the first condition and then use
“or” without explicitly specifying the second condition. Although it
“works” without throwing an error, it does not achieve the intended
purpose because “|” first checks the more important condition “mpg ==
14.7” before checking the less important second condition.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# wrong
mtcars |&amp;gt; 
  filter(mpg == 14.7 | 16.4)

# correct
mtcars |&amp;gt; 
  filter(mpg == 14.7 | cyl == 16.4)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="dont-ignore-nas"&gt;3. Don’t ignore NAs!&lt;/h3&gt;
&lt;p&gt;“Now listen to me very carefully” (Arnold Schwarzenegger from
Terminator 2), because what I am about to tell you could save a lot of
frustration. “NAs”, which is the abbreviation for &lt;strong&gt;Not
Available&lt;/strong&gt; or simply for &lt;strong&gt;missing values&lt;/strong&gt;, are
highly contagious. Any operation involving an unknown value will also
become unknown. To safeguard your data analysis, remove these “NAs” with
the &lt;code&gt;na.rm&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;x &amp;lt;- tibble(
  y  = c(2,2,NA,3,4,4),
  y2 = c(2,2,2,NA,4,4)) 

x %&amp;gt;% summarise(mean(y), mean(y2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 2
  `mean(y)` `mean(y2)`
      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1        NA         NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;x %&amp;gt;% summarise(mean(y, na.rm = TRUE), mean(y2, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 2
  `mean(y, na.rm = TRUE)` `mean(y2, na.rm = TRUE)`
                    &amp;lt;dbl&amp;gt;                    &amp;lt;dbl&amp;gt;
1                       3                      2.8&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="group-by"&gt;5. Group by&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2023-02-07-datawrangling2/connected-groups-of-people.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;group_by()&lt;/code&gt; divides your dataset into groups
meaningful for your analysis. The &lt;code&gt;top_n&lt;/code&gt; is the older
version of &lt;code&gt;slice_max()&lt;/code&gt; we just learned in the previous
section, and it also gives you top values for every group. For instance,
let’s pick the two most effective cars (highest &lt;code&gt;mpg&lt;/code&gt;) for
every transmission type (&lt;code&gt;am&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(am) %&amp;gt;% 
  top_n(2, mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 11
# Groups:   am [2]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
2  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
3  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
4  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;group_by_all&lt;/code&gt; is particularly useful for identifying
duplicates in your dataset, because after grouping, a simple
&lt;code&gt;count()&lt;/code&gt; will reveal the frequencies, which can be sorted in
descending order using &lt;code&gt;desc&lt;/code&gt; option to bring the duplicates
to the top of the resulting table. Than, you could &lt;code&gt;filter&lt;/code&gt;
out all values with n &amp;gt; 1 to keep only unique rows.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;blup &amp;lt;- tibble(y = c(2,2,NA,3,4,4),
       y2 = c(2,2,2,NA,4,4)) %&amp;gt;% 
  group_by_all() %&amp;gt;% 
  count() %&amp;gt;% 
  arrange(desc(n))

blup&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 3
# Groups:   y, y2 [4]
      y    y2     n
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
1     2     2     2
2     4     4     2
3     3    NA     1
4    NA     2     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Groups are excellent for summarizing data, but at times, they might
hinder calculations. Therefore, if needed, you can always ungroup any
dataset before complaining about R being stupid. That’s what I used to
do before I learned about ungrouping ;)&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;blup %&amp;gt;% 
  summarise(mean(n)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 4 × 3
# Groups:   y [4]
      y    y2 `mean(n)`
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
1     2     2         2
2     3    NA         1
3     4     4         2
4    NA     2         1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;blup %&amp;gt;% 
  ungroup() %&amp;gt;% 
  summarise(mean(n)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 1
  `mean(n)`
      &amp;lt;dbl&amp;gt;
1       1.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar, to &lt;strong&gt;select&lt;/strong&gt; and &lt;strong&gt;mutate&lt;/strong&gt; you
can &lt;strong&gt;group&lt;/strong&gt; variables conditionally using
&lt;code&gt;group_by_if&lt;/code&gt;, &lt;code&gt;group_by_at&lt;/code&gt; and
&lt;code&gt;group_by_all&lt;/code&gt;. For instance, let’s change three variables to
factors (categories) and group by only categorical (factor) variables
after it. The &lt;strong&gt;dplyr&lt;/strong&gt; package will find all factors by
itself, which is particularly useful for big datasets. Once grouped,
computing group-wise averages becomes a very simple task.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  mutate_at(vars(cyl, gear, am), factor) %&amp;gt;% 
  group_by_if(is.factor) %&amp;gt;% 
  summarise(avg = mean(mpg))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 10 × 4
# Groups:   cyl, am [6]
   cyl   am    gear    avg
   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;
 1 4     0     3      21.5
 2 4     0     4      23.6
 3 4     1     4      28.0
 4 4     1     5      28.2
 5 6     0     3      19.8
 6 6     0     4      18.5
 7 6     1     4      21  
 8 6     1     5      19.7
 9 8     0     3      15.0
10 8     1     5      15.4&lt;/code&gt;&lt;/pre&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/XcK4chr2jws" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned in the previous video (see above if you want),
&lt;code&gt;group_by()&lt;/code&gt; is the most effective if used with
&lt;code&gt;summarise()&lt;/code&gt; function, because they allow you to aggregate
data and calculate any summary statistics you want.&lt;/p&gt;
&lt;h2 id="summarise"&gt;6. Summarise&lt;/h2&gt;
&lt;p&gt;Here’s an example: let’s say you have a dataset about flowers in a
field with three different species. You could use the “summarise”
function to calculate the total lengths and widths of flowers for each
species separately.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  summarise(total_length = sum(Sepal.Length))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 2
  Species    total_length
  &amp;lt;fct&amp;gt;             &amp;lt;dbl&amp;gt;
1 setosa             250.
2 versicolor         297.
3 virginica          329.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, “group_by” specifies the column by which the data
should be grouped, namely “Species” and “summarise” calculates the total
lengths of flowers for each Species.&lt;/p&gt;
&lt;p&gt;You can also do conditional &lt;strong&gt;summarizing&lt;/strong&gt;
&lt;code&gt;across&lt;/code&gt; multiple columns at once using
&lt;code&gt;summarise_at&lt;/code&gt;, &lt;code&gt;summarise_if&lt;/code&gt;, and
&lt;code&gt;summarise_all&lt;/code&gt;. This can save you a lot of time if you have
a table with lots of columns.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(am) %&amp;gt;% 
  summarise_at(vars(mpg, hp, wt), mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 4
     am   mpg    hp    wt
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     0  17.1  160.  3.77
2     1  24.4  127.  2.41&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  summarise_if(is.numeric, mean, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 11
    cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1     4  26.7  105.  82.6  4.07  2.29  19.1 0.909 0.727  4.09  1.55
2     6  19.7  183. 122.   3.59  3.12  18.0 0.571 0.429  3.86  3.43
3     8  15.1  353. 209.   3.23  4.00  16.8 0     0.143  3.29  3.5 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(vs) %&amp;gt;% 
  summarise_all(list(med = median))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 11
     vs mpg_med cyl_med disp_med hp_med drat_med wt_med qsec_med
  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
1     0    15.6       8     311     180     3.18   3.57     17.0
2     1    22.8       4     121.     96     3.92   2.62     19.2
# ℹ 3 more variables: am_med &amp;lt;dbl&amp;gt;, gear_med &amp;lt;dbl&amp;gt;, carb_med &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But “summarize” is &lt;strong&gt;even more useful when you need to
calculate multiple summary statistics for multiple variables at
once&lt;/strong&gt;. For instance, consider a dataset about cars. By using
“summarise,” you can count the number of cars with different cylinders,
obtain the mean and standard deviation for each cylinder separately to
compare mileage, and find any quantile of horsepower. The median, which
might be more useful than the average, is taken at the 0.5 quantile.
Additionally, you can define what makes a car “strong” and count how
many strong cars each category contains. It’s amazing how just a few
lines of code can help you quickly explore your dataset. However, if you
want to explore your dataset in just one line of code and get even more
valuable insights, check out &lt;a href="https://youtu.be/sKrWYE63Vk4"&gt;this
video&lt;/a&gt; on the &lt;strong&gt;automated exploratory analysis&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  summarise(count     = n(), 
            aver_mpg  = mean(mpg),
            sd_mpg    = sd(mpg),
            Q_0.25    = quantile(hp, 0.5), 
            n_of_strong_cars = sum(hp &amp;gt; 100))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 6
    cyl count aver_mpg sd_mpg Q_0.25 n_of_strong_cars
  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;            &amp;lt;int&amp;gt;
1     4    11     26.7   4.51    91                 2
2     6     7     19.7   1.45   110                 7
3     8    14     15.1   2.56   192.               14&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="further-readings-and-references"&gt;Further readings and
references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazing and Free Book by Garrett Grolemund and Hadley Wickham: &lt;a
href="https://r4ds.had.co.nz/"&gt;“R for Data Science”&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for more info on &lt;code&gt;dplyr&lt;/code&gt; package go &lt;a
href="https://dplyr.tidyverse.org/"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to download a &lt;em&gt;Cheat Sheet&lt;/em&gt; (they both are really good) go
&lt;a
href="https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf"&gt;here&lt;/a&gt;
or &lt;a
href="https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf"&gt;there&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>173f3cb216a385c271ef37d6dd15809b</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>data wrangling</category>
      <guid>https://yuzar-blog.netlify.app/posts/2023-02-07-datawrangling2</guid>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2023-02-07-datawrangling2/dplyr_2_thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Top 10 Must-Know {dplyr} Commands for Data Wrangling in R!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2023-01-31-datawrangling1</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s only 8 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/XcK4chr2jws" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="why-do-we-need-it-its-effective"&gt;Why do we need it? It’s
effective!&lt;/h1&gt;
&lt;p&gt;With just 10 commands at your fingertips, you can
&lt;strong&gt;select&lt;/strong&gt;, &lt;strong&gt;rename&lt;/strong&gt; and create new columns
(&lt;strong&gt;mutate&lt;/strong&gt;), &lt;strong&gt;arrange&lt;/strong&gt; or
&lt;strong&gt;filter&lt;/strong&gt; out rows, &lt;strong&gt;group&lt;/strong&gt; rows together
and then &lt;strong&gt;summarize&lt;/strong&gt; those groups and be able to combine
all these data wrangling techniques in a single
&lt;strong&gt;pipe&lt;/strong&gt;line like never before. And the best part? These
commands are very easy to master, as most of them are common English
verbs like “select” or “summarise”. These verbs will allow you to solve
the vast majority of your data manipulation challenges. So, let’s get
into it.&lt;/p&gt;
&lt;p&gt;We’ll start with loading the &lt;code&gt;tidyverse&lt;/code&gt; package. First,
because &lt;code&gt;dplyr&lt;/code&gt; package is part of it and secondly,
&lt;code&gt;tidyverse&lt;/code&gt; contains ready to use datasets. So, let’s
discover the art of data manipulation with a quick
&lt;strong&gt;glimpse&lt;/strong&gt; on the first command, which name is in fact
“glimpse”.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# install.packages(&amp;quot;tidyverse&amp;quot;)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="glimpse"&gt;1. &lt;code&gt;glimpse&lt;/code&gt;&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;glimpse(table2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 12
Columns: 4
$ country &amp;lt;chr&amp;gt; &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afghan…
$ year    &amp;lt;dbl&amp;gt; 1999, 1999, 2000, 2000, 1999, 1999, 2000, 2000, 1999…
$ type    &amp;lt;chr&amp;gt; &amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;, &amp;quot;cases&amp;quot;, &amp;quot;population&amp;quot;, &amp;quot;cases…
$ count   &amp;lt;dbl&amp;gt; 745, 19987071, 2666, 20595360, 37737, 172006362, 804…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;glimpse&lt;/code&gt; gives you a quick look at your data. It shows
all variables, their first values, and their types, whether integer or
ordered categorical. It also reveals the number of observations (rows)
and variables (columns). The beauty of &lt;code&gt;glimpse&lt;/code&gt; is that it
doesn’t overload your screen if your data is large. It presents only the
crucial information. To &lt;strong&gt;view&lt;/strong&gt; the whole dataset, you can
actually use the &lt;code&gt;view&lt;/code&gt; command.&lt;/p&gt;
&lt;h2 id="viewtable2"&gt;2. &lt;code&gt;view(table2)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One useful feature of such table view is the ability to
&lt;strong&gt;arrange&lt;/strong&gt; values by clicking on the header’s variable
name.&lt;/p&gt;
&lt;h2 id="arrange"&gt;3. &lt;code&gt;arrange&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;By the way, you can also arrange values while working with it. For
example, “table2” is arranged alphabetically by countries. However, the
whole table can be easily rearranged using one or several columns.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 12 × 4
   country      year type            count
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
 1 Afghanistan  1999 cases             745
 2 Afghanistan  1999 population   19987071
 3 Afghanistan  2000 cases            2666
 4 Afghanistan  2000 population   20595360
 5 Brazil       1999 cases           37737
 6 Brazil       1999 population  172006362
 7 Brazil       2000 cases           80488
 8 Brazil       2000 population  174504898
 9 China        1999 cases          212258
10 China        1999 population 1272915272
11 China        2000 cases          213766
12 China        2000 population 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2 %&amp;gt;% 
  arrange(year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 12 × 4
   country      year type            count
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
 1 Afghanistan  1999 cases             745
 2 Afghanistan  1999 population   19987071
 3 Brazil       1999 cases           37737
 4 Brazil       1999 population  172006362
 5 China        1999 cases          212258
 6 China        1999 population 1272915272
 7 Afghanistan  2000 cases            2666
 8 Afghanistan  2000 population   20595360
 9 Brazil       2000 cases           80488
10 Brazil       2000 population  174504898
11 China        2000 cases          213766
12 China        2000 population 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;table2 %&amp;gt;% 
  arrange(year, type)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 12 × 4
   country      year type            count
   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;
 1 Afghanistan  1999 cases             745
 2 Brazil       1999 cases           37737
 3 China        1999 cases          212258
 4 Afghanistan  1999 population   19987071
 5 Brazil       1999 population  172006362
 6 China        1999 population 1272915272
 7 Afghanistan  2000 cases            2666
 8 Brazil       2000 cases           80488
 9 China        2000 cases          213766
10 Afghanistan  2000 population   20595360
11 Brazil       2000 population  174504898
12 China        2000 population 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“Oh God, what is this strange &lt;code&gt;%&amp;gt;%&lt;/code&gt; symbol?!,” you
might ask. Well, it’s a highly useful one! But I’d prefer to demonstrate
its use before explaining it. Until then, let’s &lt;strong&gt;select&lt;/strong&gt;
the most useful columns using the… drumroll… &lt;strong&gt;select&lt;/strong&gt;
command.&lt;/p&gt;
&lt;h2 id="select"&gt;4. &lt;code&gt;select&lt;/code&gt;&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  select(country, population)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 2
  country     population
  &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
1 Afghanistan   19987071
2 Afghanistan   20595360
3 Brazil       172006362
4 Brazil       174504898
5 China       1272915272
6 China       1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Useless columns will be automatically discarded. But what if you’ve
got 300 (picture of the movie 300 ;) useful columns and just want to
eliminate a couple? Rather than typing out all 300 names in the
&lt;strong&gt;select&lt;/strong&gt; command, which can be cumbersome, prone to
typing mistakes, and hard on your fingertips ;) , you can simply add a
minus sign in front of the unwanted column names to
&lt;strong&gt;deselect&lt;/strong&gt; them.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  select(-cases, -year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 2
  country     population
  &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;
1 Afghanistan   19987071
2 Afghanistan   20595360
3 Brazil       172006362
4 Brazil       174504898
5 China       1272915272
6 China       1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Selecting columns is great. But what if we need only specific rows,
such as only those from the year 2000?&lt;/p&gt;
&lt;h2 id="filter"&gt;5. &lt;code&gt;filter&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To achieve this, we can use the &lt;strong&gt;filter&lt;/strong&gt; command with
a double equal sign. Keep in mind that the double equal sign means
“equal to”, while the single equal sign assigns a value to a name and
won’t allow for filtering. The arguments here determine the conditions
that must be true to keep the row, for example we want to see only rows
with the year 2000.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  filter(year == 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan  2000   2666   20595360
2 Brazil       2000  80488  174504898
3 China        2000 213766 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if you want to eliminate any undesired observations, for
example to see everything except the year 2000, the &lt;code&gt;!=&lt;/code&gt;
(exclamation mark equals) operator is your friend. It stands for “not
equal to.” Cool, write?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  filter(year != 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  country      year  cases population
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1 Afghanistan  1999    745   19987071
2 Brazil       1999  37737  172006362
3 China        1999 212258 1272915272&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you know what’s even cooler? We can do both
&lt;strong&gt;select&lt;/strong&gt; and &lt;strong&gt;filter&lt;/strong&gt; at the same time by
using this funky symbol &lt;code&gt;%&amp;gt;%&lt;/code&gt;, called the &lt;strong&gt;pipe
operator&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% select(year, population) %&amp;gt;% filter(year == 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 2
   year population
  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
1  2000   20595360
2  2000  174504898
3  2000 1280428583&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="pipe-operator"&gt;6. &lt;code&gt;%&amp;gt;%&lt;/code&gt; - &lt;strong&gt;pipe
operator&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The pipe operator, for me, is just another way of saying
&lt;strong&gt;then&lt;/strong&gt;. It allows you to transform your data in a
step-by-step manner, by doing one thing first, &lt;strong&gt;then&lt;/strong&gt;
another, and so on. For example, this code takes the table1 dataset,
&lt;strong&gt;then&lt;/strong&gt; selects two columns, &lt;strong&gt;then&lt;/strong&gt; filters
only the year 2000. The operator is called the &lt;strong&gt;pipe
operator&lt;/strong&gt; because it &lt;strong&gt;pipes&lt;/strong&gt; the values on the
left side into the transformed values on the right side. This replaces
the less intuitive &lt;code&gt;f(x)&lt;/code&gt; with the much more readable
&lt;code&gt;x %&amp;gt;% f&lt;/code&gt;. The left-to-right nature of
&lt;code&gt;x %&amp;gt;% f&lt;/code&gt; is easier to write and understand, as it follows
the natural way we read, while &lt;code&gt;f(x)&lt;/code&gt; reads in a
counterintuitive inside-out manner, making it harder for people to
grasp, except for programmers (funny picture of a programming nerd).
Thus, improving the readability and understanding of code is a great
advantage of this operator. Additionally, you can chain multiple simple
steps to achieve a complex result easily and making the process faster
(we’ll see it in a moment). I have to admit, it didn’t like the pipe in
the beginning, but now I absolutely love it! 🥰&lt;/p&gt;
&lt;p&gt;The good thing is, the &lt;strong&gt;pipe&lt;/strong&gt; will quickly become
invisible, and your fingers will type it without your brain having to
think about it. And the best part? There’s even a keyboard shortcut for
it - &lt;code&gt;Shift-Cmd/Ctrl-M&lt;/code&gt;! Give it a try.&lt;/p&gt;
&lt;p&gt;So far, so good. Removing some useless columns or rows is useful. But
what if we want to create new columns? Well, we do it in a similar way
evolution does, through &lt;strong&gt;mutations&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="mutate"&gt;7. &lt;code&gt;mutate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;mutate&lt;/strong&gt; command literally means -
&lt;strong&gt;creating a new column&lt;/strong&gt;. We can either fill the new
column with whatever we want or use existing (parent) columns to
calculate new (offspring) ones.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  mutate(fill_it = &amp;quot;with a smile ;)&amp;quot;) %&amp;gt;% 
  mutate(popul_per_case   = population / cases)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 6
  country      year  cases population fill_it         popul_per_case
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                    &amp;lt;dbl&amp;gt;
1 Afghanistan  1999    745   19987071 with a smile ;)         26828.
2 Afghanistan  2000   2666   20595360 with a smile ;)          7725.
3 Brazil       1999  37737  172006362 with a smile ;)          4558.
4 Brazil       2000  80488  174504898 with a smile ;)          2168.
5 China        1999 212258 1272915272 with a smile ;)          5997.
6 China        2000 213766 1280428583 with a smile ;)          5990.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not only can you give your column any name you desire while creating
it, but you can also change its name whenever you want using the
‘rename’ command.&lt;/p&gt;
&lt;h2 id="rename"&gt;8. &lt;code&gt;rename&lt;/code&gt;&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  mutate(fill_it = &amp;quot;with a smile ;)&amp;quot;) %&amp;gt;%
  rename(much_better_name = fill_it)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
  country      year  cases population much_better_name
  &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           
1 Afghanistan  1999    745   19987071 with a smile ;) 
2 Afghanistan  2000   2666   20595360 with a smile ;) 
3 Brazil       1999  37737  172006362 with a smile ;) 
4 Brazil       2000  80488  174504898 with a smile ;) 
5 China        1999 212258 1272915272 with a smile ;) 
6 China        2000 213766 1280428583 with a smile ;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the eight commands we just learned, you’ll have your “perfectly”
transformed dataset. But having data alone isn’t much use, especially if
there’s a lot of it. So, it’s common to want to
&lt;strong&gt;summarize&lt;/strong&gt; the data in some way - like counting, finding
the sum or average.&lt;/p&gt;
&lt;h2 id="summarise"&gt;9. &lt;code&gt;summarise&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To do this, you simply choose a column to &lt;strong&gt;summarize&lt;/strong&gt;
and a function to apply to it, like ‘mean’.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  summarise(average = mean(population))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 1
     average
       &amp;lt;dbl&amp;gt;
1 490072924.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;dplyr&lt;/code&gt; package, you can take things a step further
and summarize different columns in different ways. For example, use
&lt;code&gt;sum()&lt;/code&gt; to get an overall summary of all values in the column
and &lt;code&gt;n()&lt;/code&gt; to count the number of rows.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  summarise(avr_popul = mean(population),
            all_cases = sum(cases),
            how_many  = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 3
   avr_popul all_cases how_many
       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
1 490072924.    547660        6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’s getting exciting, because you can generate new numbers
(making descriptive statistics) and get a comprehensive view of your
dataset using plain English as computer code. However, a single-row
overview of our data is not very useful since we have data from two
different years and three countries. It would be much more helpful to
know the averages (or any other summary statistics) for each year or
each country. And that’s where the final, and perhaps the most useful,
&lt;code&gt;group_by&lt;/code&gt; command comes into play… Hallelujah!&lt;/p&gt;
&lt;h2 id="group_by"&gt;10. &lt;code&gt;group_by&lt;/code&gt;&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  group_by(year) %&amp;gt;% 
  summarise(avr_popul = mean(population),
            all_cases = sum(cases),
            how_many  = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 2 × 4
   year  avr_popul all_cases how_many
  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
1  1999 488302902.    250740        3
2  2000 491842947     296920        3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;table1 %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  summarise(avr_popul = mean(population),
            all_cases = sum(cases),
            how_many  = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 3 × 4
  country       avr_popul all_cases how_many
  &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
1 Afghanistan   20291216.      3411        2
2 Brazil       173255630     118225        2
3 China       1276671928.    426024        2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it gets even better - you can &lt;strong&gt;group_by&lt;/strong&gt; multiple
variables at once! Let’s take the mtcars dataset as an example and find
out how many cars with 4, 6, or 8 cylinders (cyl) and different
gearboxes (am) are in the dataset. And let’s get the average fuel
efficiency (mpg) and average horsepower (hp) for each combination of
cylinders and gearboxes. It’s like hitting two birds with one stone!&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl, am) %&amp;gt;% 
  summarise(avr_mpg = mean(mpg),
            avr_hp  = mean(hp),
            count   = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 6 × 5
# Groups:   cyl [3]
    cyl    am avr_mpg avr_hp count
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
1     4     0    22.9   84.7     3
2     4     1    28.1   81.9     8
3     6     0    19.1  115.      4
4     6     1    20.6  132.      3
5     8     0    15.0  194.     12
6     8     1    15.4  300.      2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, using &lt;strong&gt;group_by&lt;/strong&gt; and &lt;strong&gt;summarize&lt;/strong&gt;
together is much more powerful than using them separately. And this goes
for any function we’ve learned today. The more functions you string
together using the pipe-operator %&amp;gt;%, the more advanced your data
manipulation becomes. For example, don’t look at this chunk of code as a
massive block, but rather read one line at a time and you’ll have no
trouble understanding it. Once you grasp this piece of code, you’ll be
able to easily create your own code in no time.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;fancy_table = diamonds %&amp;gt;% 
  select(-x, -y, -z, -table) %&amp;gt;%
  # &amp;quot;c&amp;quot; means concatenate == use several categories
  filter(color == c(&amp;quot;E&amp;quot;, &amp;quot;I&amp;quot;), clarity == &amp;quot;SI2&amp;quot;) %&amp;gt;%  
  mutate(price_carat = price / carat) %&amp;gt;% 
  rename(new_name = depth) %&amp;gt;% 
  group_by(cut, color, clarity) %&amp;gt;% 
  # remove NAs, otherwise you&amp;#39;ll get NAs
  summarise(avg_price = mean(price, na.rm = TRUE),
            count     = n()) 

fancy_table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 10 × 5
# Groups:   cut, color [10]
   cut       color clarity avg_price count
   &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
 1 Fair      E     SI2         4507.    41
 2 Fair      I     SI2         6874.    26
 3 Good      E     SI2         3761.    91
 4 Good      I     SI2         6449.    41
 5 Very Good E     SI2         4150.   222
 6 Very Good I     SI2         6480.   113
 7 Premium   E     SI2         4622.   286
 8 Premium   I     SI2         6652.   156
 9 Ideal     E     SI2         4010.   228
10 Ideal     I     SI2         6301.   136&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also name the resulting table and save it as an object for
future use, by using the assignment operator, &lt;code&gt;=&lt;/code&gt; or
&lt;code&gt;&amp;lt;-&lt;/code&gt;. It’s cool, right? But what if you need even more
descriptive stats, like standard error, median, IQR, skewness, and so
on, for ALL numeric variables in your dataset, and for ALL of your
groups simultaneously? Sounds like a lot of work, right? But hold on!
You can actually do it with a single intuitive word,
&lt;strong&gt;describe&lt;/strong&gt;, which delivers &lt;strong&gt;ALL the descriptive
stats you can think of for ANY combination of groups and for EVERY
variable in your dataset&lt;/strong&gt;. And that’s just the tip of the
iceberg of what the &lt;code&gt;dplyr&lt;/code&gt; package can do. Want to know even
more powerful functions? Check out my review of the &lt;code&gt;dlookr&lt;/code&gt;
package.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars %&amp;gt;% 
  group_by(cyl, am) %&amp;gt;% 
  dlookr::describe(-cyl, -am)&lt;/code&gt;&lt;/pre&gt;
&lt;div class="tabwid"&gt;&lt;style&gt;.cl-7e1c1dfa{}.cl-7e02e8e4{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-7e0cba72{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7e0cba7c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-7e0cec0e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7e0cec18{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7e0cec22{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7e0cec23{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7e0cec2c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-7e0cec2d{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}&lt;/style&gt;&lt;table data-quarto-disable-processing='true' class='cl-7e1c1dfa'&gt;&lt;thead&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;th class="cl-7e0cec0e"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;described_variables&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;cyl&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;am&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;n&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;na&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;mean&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;sd&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;se_mean&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;IQR&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;skewness&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;kurtosis&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p00&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p01&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p05&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p10&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p20&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p25&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p30&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p40&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p50&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p60&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p70&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p75&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p80&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p90&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p95&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p99&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-7e0cec18"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;p100&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.57735027&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.33333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.02000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.10000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.500000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.53452248&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.18898224&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-2.7999999999999998223643&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.500000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.73205081&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.86602540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-6.0000000000000000000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.15470054&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.66666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.80000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.96000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.083333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.90033664&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.25990480&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.1847699&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.8654554982967941345606&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.3000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;carb&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.82842712&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.04000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.20000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.4000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.80000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.96000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;135.866667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;13.96937126&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8.06522026&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;13.30000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.3909912&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.51400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;122.17000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;124.2400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;128.380&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;130.45000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;132.5200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;136.660&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;140.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;141.980&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;143.1600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;143.7500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;144.340&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;145.5200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;146.11000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;146.58200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;146.700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;93.612500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.47677692&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.23963391&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;33.12500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.4201412&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.8429854562378342741624&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;71.100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;71.42200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;72.71000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;74.3200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;76.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;77.95000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;78.7300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;78.940&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;87.0500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;97.680&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;106.7100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;111.0750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;115.380&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.5100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.75500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.95100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;121.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;204.550000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;44.74263440&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.37131720&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;65.65000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.4492392&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-3.4650364202691479320606&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.60000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.60000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.60000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;167.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;179.080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;196.3000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;213.520&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;228.3000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;233.2500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;238.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;248.1000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;253.05000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;257.01000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;258.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;155.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8.66025404&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;7.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;145.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;145.30000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;146.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;148.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;151.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;152.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;154.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;157.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;160.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;357.616667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;71.82349367&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.73365670&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;113.05000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.3960937&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.2176693975842989292602&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;275.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;275.80000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;275.80000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;275.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;281.440&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;296.95000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;308.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;330.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;355.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;360.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;388.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;410.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;432.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;458.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;465.40000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;470.68000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;472.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;disp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;326.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;35.35533906&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;25.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;25.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;301.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;301.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;303.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;306.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;311.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;313.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;316.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;321.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;326.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;331.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;336.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;338.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;341.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;346.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;348.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;350.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;351.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.770000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.13000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.07505553&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.11500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.7205280&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.690&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.69020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.69100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.694&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.69500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6960&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.698&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.7000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.744&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.7880&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.832&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.89800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.91560&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.183750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.36417961&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.12875693&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.25000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.2616323&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0347491733638984889865&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.770&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.77560&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.79800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8260&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.942&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.02250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0950&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.132&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.2090&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.2725&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.346&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.5800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.75500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.89500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.930&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.420000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.59194594&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.29597297&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.92000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.2468447&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-4.5921894872917565777470&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.76960&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.80800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.8560&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.952&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0480&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.248&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.752&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.92000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.92000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.806667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.16165808&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.09333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.14000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.620&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.62560&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.64800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.732&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.76000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.7880&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.844&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.90000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.90000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.120833&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.23027487&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.06647463&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.11250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.5362544&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.7327973800502292078818&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.77870&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.85350&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.9370&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.014&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.05250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.070&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.122&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1650&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.198&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.2280&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.45500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.67500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.730&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;drat&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.880000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.48083261&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.34000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.34000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.54680&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.57400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.676&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.71000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.7440&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.812&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.948&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0160&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.084&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.1520&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.18600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.21320&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.57735027&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.33333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.02000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.10000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.250000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.46291005&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.16366342&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.25000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.4401646&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000000000000004144833&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.2500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.500000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.57735027&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.28867513&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-6.0000000000000000000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.57735027&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.33333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.4000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.90000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.98000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;gear&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;84.666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.65536398&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;11.34802969&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7118977&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;62.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;62.66000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;65.30000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;68.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;75.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;78.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;81.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;88.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;95.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;95.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;95.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;96.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;96.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;96.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;96.80000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;96.96000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;97.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;81.875000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.65541563&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8.00989901&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;31.25000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.2092817&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.6375324815543095269277&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;52.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;52.91000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;56.55000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;61.1000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;65.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;65.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;66.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;66.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;78.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;91.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;92.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;97.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;102.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;111.60000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;112.72000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;113.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;115.250000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;9.17877988&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.58938994&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.25000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.2505456&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-4.5713530981165630961982&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;105.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;105.15000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;105.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;106.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;108.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;108.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;109.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;112.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;116.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;120.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;131.666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;37.52776750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.66666667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;32.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;110.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;123.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;136.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;142.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;149.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;162.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;168.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;173.70000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;175.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;194.166667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;33.35983795&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;9.63015571&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;43.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.3646930&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.0807496521021451307831&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;150.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;150.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;150.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;152.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;175.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;175.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;176.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;180.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;180.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;195.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;212.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;218.7500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;227.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;243.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;245.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;245.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;245.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;hp&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;299.500000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;50.20458146&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;35.50000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;35.50000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;264.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;264.71000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;267.55000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;271.1000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;278.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;281.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;285.3000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;292.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;299.5000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;306.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;313.7000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;317.2500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;320.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;327.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;331.45000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;334.29000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;335.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.900000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.45258390&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.83864971&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.45000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.3083246&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.52600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.63000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.7600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.15000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.2800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.8000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;23.120&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;23.4400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;23.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;23.760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;24.0800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;24.24000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;24.36800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;24.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;28.075000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.48385994&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.58528389&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.70000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.3167379&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.2204530329883283013004&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.49800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.89000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.3800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;24.080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;25.20000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;26.1300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;27.040&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;28.8500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;30.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;30.4000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;30.9000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;31.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;32.8500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;33.37500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;33.79500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;33.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.125000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.63171689&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.81585844&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.72500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.2846862&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0641451211179453473221&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.80900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.84500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.8900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.980&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.02500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.0700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.320&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.6500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.980&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.4200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.7500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.7400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.07000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.33400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.566667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.75055535&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.43333333&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.65000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7320508&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.72600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.83000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.9600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.35000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.4800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.740&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.050000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.77439592&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.80089912&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.57500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.3722170&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.1825808288041959881465&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;10.400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;10.40000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;10.40000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;10.6900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;13.500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.05000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.4200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.2000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.380&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.1300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.6250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.120&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.5600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.92500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.14500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;mpg&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.400000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.56568542&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.40000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.40000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.00800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.04000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.0800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.160&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.20000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.2400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.320&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.4000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.480&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.5600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.6000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.640&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.7200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.76000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.79200&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.970000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.67143651&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.96500432&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.45000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.7319811&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.00020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.00100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.0020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.004&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.00500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.0060&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.008&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.0100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.588&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.1660&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.4550&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;21.744&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.3220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.61100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.84220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;22.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.450000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.12525553&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.39783791&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.92750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.6516514&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.4741580922958555377456&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.71400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.77000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.8400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.548&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.11500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.5280&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.584&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.6050&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.668&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.8710&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.0425&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.242&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.5990&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.74950&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.86990&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.215000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.81590441&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.40795220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.88500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.2812606&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.4609289147497510619189&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.31800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.39000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.4800&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.660&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.75000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.8400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.008&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.1700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.332&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.5180&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.6350&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.752&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;19.9860&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.10300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.19660&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;20.220&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.326667&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.76872188&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.44382179&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.76000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.7570351&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.51920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.59600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.6920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.884&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.98000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.0760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.268&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.4600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.572&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.6840&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.7400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.796&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.9080&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.96400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.00880&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.142500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.80164745&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.23141569&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.67250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.2209337&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.9998832947556106631737&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.410&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.45730&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.64650&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;15.9430&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;16.98250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.0290&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.150&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.3500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.412&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.5460&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.6550&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.776&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.9640&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.98900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;17.99780&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;18.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;qsec&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.550000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.07071068&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.05000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.05000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.50100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.50500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.520&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.52500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.560&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.580&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.5900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.59500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.59900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;14.600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.875000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.35355339&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.12500000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-2.8284271&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8.0000000000000017763568&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.07000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.35000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.7000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;vs&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.0000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.00000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.935000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.40752301&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.23528352&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.36250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.7132969&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.465&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.47870&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.53350&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.6020&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.739&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.80750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.8760&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.013&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.158&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1660&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.174&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.1820&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.18600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.18920&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.190&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.042250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.40934852&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.14472656&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.45000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.5316464&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.1876510422987665849259&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.513&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.52014&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.54870&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.5844&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.703&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.78000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.8450&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.915&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.0375&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.152&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.1940&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.2300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.272&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.4580&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.61900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.74780&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.780&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.388750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.11621639&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.05810820&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.06125&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-1.9598546&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8766574423849973207723&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.215&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.22175&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.24875&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.2825&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.350&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.38375&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4175&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.440&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.440&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4420&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4450&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.448&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.45700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.45940&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.460&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;6&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.755000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.12816006&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.07399324&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.12750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.5194703&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.620&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.62300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.63500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.6500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.680&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.69500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.7100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.740&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.7700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.791&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.8120&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.8225&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.833&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.8540&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.86450&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.87290&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2.875&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec22"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;12&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.104083&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.76830693&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.22179111&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.80750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1.1182347&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;-0.5225934960447161659047&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.435&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.43555&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.43775&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4480&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.530&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.55750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.6180&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.750&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.8100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.843&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.0025&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;4.3650&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.014&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.3355&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.38055&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.41531&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec23"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;5.424&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-7e0cec2c"&gt;&lt;p class="cl-7e0cba72"&gt;&lt;span class="cl-7e02e8e4"&gt;wt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;8&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.370000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.28284271&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.20000000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;0.20000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.170&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.17400&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.19000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.2100&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.250&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.27000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.2900&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.330&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.3700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.410&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4500&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.4700&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.490&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.5300&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.55000&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.56600&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-7e0cec2d"&gt;&lt;p class="cl-7e0cba7c"&gt;&lt;span class="cl-7e02e8e4"&gt;3.570&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;80% of working with data is pre-processing, such as cleaning,
transforming, and wrangling. Although this work is rarely seen in the
final result, like a model or a scientific paper, it is often the most
important part. The phrase “Garbage in, garbage out” emphasizes the
importance of having clean and accurate data. Making pre-processing
intuitive and enjoyable can prevent wrong conclusions, boredom, and
pain, and make the world a better place.&lt;/p&gt;
&lt;p&gt;These 10 verbs will cover most of your daily data manipulation needs,
and make your code easy to read and understand for your colleagues and
even for your future self. This simple, powerful, and clear data
pre-processing will allow for the use of statistical and machine
learning models, resulting in valuable inferences and predictions. In
the era of big data, there are too many unused or chaotic data that goes
to waste. Data is the most valuable resource in the 21st century, and
it’s important to handle it sustainably. Let’s make it useful.&lt;/p&gt;
&lt;h1 id="whats-next"&gt;What’s next?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href="https://yury-zablotski.netlify.com/post/2019-09-22-data-wrangling-2/data-wrangling-2/"&gt;Data
Wrangling Vol. 2: ´The big 6´ and their babies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>cc97ce8b74213f48f77b1945d1b713fc</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>data wrangling</category>
      <guid>https://yuzar-blog.netlify.app/posts/2023-01-31-datawrangling1</guid>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2023-01-31-datawrangling1/dplyr_1_thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>{emmeans} Game-Changing R-package Squeezes Hidden Knowledge out of Models!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-11-29-emmeans</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s ca. 14 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/_okuMw4JFfU" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-2-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="why-do-we-need-emmeans"&gt;Why do we need {emmeans}?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have you ever wondered, why a “summary” function of an omnibus
test like ANOVA, tells you that “the number of cylinders” significantly
affects “car mileage” &lt;strong&gt;without explaining how?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or have you ever been puzzled why a model compares all categories
of a categorical predictor to &lt;strong&gt;only the reference category,
without comparing categories to each other?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And what about those mysterious slopes with standard errors we
get as model coefficients instead of the averages per category with 95%
CIs that we actually want?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moreover, “summary” function doesn’t adjust p-values for multiple
comparisons, which increases the probability of discovering nonsense by
making too many type-I errors.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-11-29-emmeans/type_1_errors.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Summary function doesn’t plot the results of a model and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;makes it almost impossible to interpret interactions!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if you’ve ever been frustrated due to similar issues, you’re
definitely not alone! The &lt;strong&gt;“summary” function doesn’t actually
provide a very useful summary&lt;/strong&gt;, and that’s why we need {emmeans}
package, which solves all those problems.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)       # for everything good in R
theme_set(theme_test())  # beautifies plots 
library(emmeans)         # unleash power of your results!

d &amp;lt;- mtcars %&amp;gt;% 
  mutate(cyl  = factor(cyl),
         am   = factor(am),
         gear = factor(gear))

# omnibus test
aov(mpg ~ cyl, d) %&amp;gt;% summary()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            Df Sum Sq Mean Sq F value   Pr(&amp;gt;F)    
cyl          2  824.8   412.4    39.7 4.98e-09 ***
Residuals   29  301.3    10.4                     
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# linear model
lm(mpg ~ cyl, d) %&amp;gt;% summary()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lm(formula = mpg ~ cyl, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-5.2636 -1.8357  0.0286  1.3893  7.2364 

Coefficients:
            Estimate Std. Error t value Pr(&amp;gt;|t|)    
(Intercept)  26.6636     0.9718  27.437  &amp;lt; 2e-16 ***
cyl6         -6.9208     1.5583  -4.441 0.000119 ***
cyl8        -11.5636     1.2986  -8.905 8.57e-10 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Residual standard error: 3.223 on 29 degrees of freedom
Multiple R-squared:  0.7325,    Adjusted R-squared:  0.714 
F-statistic:  39.7 on 2 and 29 DF,  p-value: 4.979e-09&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# lm(mpg ~ cyl, d) %&amp;gt;% summary() %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even the simplest “emmeans” application provides averages with CIs,
compares all categories to each other pair-wisely, adjusts p-values for
multiple comparisons and can be easily plotted. And that’s just a
beginning, because {emmeans} can do soo much more! But before we unleash
the full power of {emmeans} package, we need to …&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# emmeans helps ;)
lm(mpg ~ cyl, d) %&amp;gt;% emmeans(pairwise ~ cyl) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 cyl emmean    SE df lower.CL upper.CL
 4     26.7 0.972 29     24.7     28.7
 6     19.7 1.218 29     17.3     22.2
 8     15.1 0.861 29     13.3     16.9

Confidence level used: 0.95 

$contrasts
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29   4.441  0.0003
 cyl4 - cyl8    11.56 1.30 29   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29   3.112  0.0112

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;lm(mpg ~ cyl, d) %&amp;gt;% emmeans(pairwise ~ cyl) %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-4-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="understand-what-emmeans-actually-stands-for"&gt;Understand what
“emmeans” actually stands for&lt;/h1&gt;
&lt;p&gt;The “emmeans” is an abbreviation for &lt;strong&gt;Estimated Marginal
MEANS&lt;/strong&gt; (EMMs).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“estimated” is part of the name, since results are estimated (or
predicted) only from models, not from data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the “means” is part of of the name, because the averages
themselves are often estimated. However, the term “means” is just a
generalization, because for a median-based regression {emmeans} would
estimate the marginal medians, while for a logistic regression {emmeans}
calculates marginal probabilities. Cool, right?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(quantreg)
rq(mpg ~ cyl, d, tau = .5) %&amp;gt;% emmeans(~ cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; cyl emmean    SE df lower.CL upper.CL
 4     26.0 1.872 29     22.2     29.8
 6     19.7 0.895 29     17.9     21.5
 8     15.2 0.873 29     13.4     17.0

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;glm(am ~ cyl, d, family = binomial) %&amp;gt;% 
  emmeans(~ cyl, type = &amp;quot;response&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; cyl  prob     SE  df asymp.LCL asymp.UCL
 4   0.727 0.1343 Inf     0.414     0.910
 6   0.429 0.1870 Inf     0.144     0.770
 8   0.143 0.0935 Inf     0.036     0.427

Confidence level used: 0.95 
Intervals are back-transformed from the logit scale &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;so, the last part of the name is called “marginal”, which describes
a &lt;strong&gt;group of values that we want to compute an average
for&lt;/strong&gt;. For a categorical predictor, each category is a “margin”.
And for a numeric predictor, an average of that predictor is the
“margin”. For example, a marginal mean of “miles per gallon” for 4
cylinders is 26.7, and for 8 cylinders only 15.1, while the average
“mpg” will be estimated for an average horsepower of 147.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ gear + am + hp, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    gear = 3, 4, 5
    am = 0, 1
    hp = 146.69&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;mean(d$hp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 146.6875&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;All margins of a model are combined in a REFERENCE GRID,
which is the FOUNDATION for EMMs,&lt;/strong&gt; because we can estimate the
mean at each point in the reference grid, or even define new points of
the reference grid we want to estimate the means for. But let’s take it
one step at the time, starting with a …&lt;/p&gt;
&lt;h1 id="single-categorical-predictor"&gt;Single categorical predictor&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ cyl, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    cyl = 4, 6, 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 cyl emmean    SE df lower.CL upper.CL
 4     26.7 0.972 29     24.7     28.7
 6     19.7 1.218 29     17.3     22.2
 8     15.1 0.861 29     13.3     16.9

Confidence level used: 0.95 

$contrasts
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29   4.441  0.0003
 cyl4 - cyl8    11.56 1.30 29   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29   3.112  0.0112

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reference grid of this model shows 3 points we can estimate mean
“mpg” for, namely cylinders 4, 6 and 8. The “emmeans” function displays
those means with their 95% CIs, compares the mileage of cylinders among
each other pair-wisely and adjusts p-values for multiple comparison with
a &lt;em&gt;Tukey&lt;/em&gt; method by default.&lt;/p&gt;
&lt;p&gt;The default method of adjustment can easily be changed thought, which
is very useful for several cases. First of all, people might want to use
a famous &lt;em&gt;Bonferroni&lt;/em&gt; method. However, &lt;em&gt;Bonferroni&lt;/em&gt;
correction is quite conservative and produces higher p-values as
compared to &lt;em&gt;Tukey&lt;/em&gt;, which is dangerous, because it increases
chances to make a type II error - namely missing a discovery.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-11-29-emmeans/type_2_errors.png" /&gt;&lt;/p&gt;
&lt;p&gt;Thus, &lt;em&gt;Bonferroni&lt;/em&gt; correction is more useful when you have a
lot of data. But if you only have a few observations or conduct an
exploratory pilot study, you can even stop correcting for multiple
comparisons by using, adjust = “none”, argument. I personally prefer
Benjamini &amp;amp; Hochberg (1995) method (“BH” or its alias “fdr”) to
control the false discovery rate.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl, adjust = &amp;quot;bonferroni&amp;quot;)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29   4.441  0.0004
 cyl4 - cyl8    11.56 1.30 29   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29   3.112  0.0125

P value adjustment: bonferroni method for 3 tests &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl, adjust = &amp;quot;none&amp;quot;)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29   4.441  0.0001
 cyl4 - cyl8    11.56 1.30 29   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29   3.112  0.0042&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl, adjust = &amp;quot;BH&amp;quot;) # = “fdr”&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 cyl emmean    SE df lower.CL upper.CL
 4     26.7 0.972 29     24.7     28.7
 6     19.7 1.218 29     17.3     22.2
 8     15.1 0.861 29     13.3     16.9

Confidence level used: 0.95 

$contrasts
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29   4.441  0.0002
 cyl4 - cyl8    11.56 1.30 29   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29   3.112  0.0042

P value adjustment: BH method for 3 tests &lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="summary-of-summaries"&gt;Summary of … summaries ;)&lt;/h1&gt;
&lt;p&gt;Interestingly, the “emmeans” function shows us 95% CIs of the means,
but not of the estimates of contrasts, which are differences between
cylinders. On the other hand, the contrasts have p-values which test the
null hypothesis that the difference is literally zero, while the
“emmeans” section does not test any hypothesis and therefore has no
p-values.&lt;/p&gt;
&lt;p&gt;We could greatly enhance the output of “emmeans” by using the “infer
= TRUE” argument. This produces 95% CIs for the differences among
cylinders, which is more useful than the standard error (SE). It also
tests the null hypothesis that the means are actually zero. However,
testing “emmeans” against zero is not particularly useful – which is why
p-values are not usually shown. But it makes a lot more sense to test
them against some target mileage, let’s say 14. For that, we can use the
“null” argument to set the null hypothesis to 14. This makes cylinder 8,
with a mean mileage of 15.1, no longer significantly different from our
new null hypothesis. The “pairwise” argument is removed, because
otherwise the contrasts would also have been tested against 14.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl, infer = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 cyl emmean    SE df lower.CL upper.CL t.ratio p.value
 4     26.7 0.972 29     24.7     28.7  27.437  &amp;lt;.0001
 6     19.7 1.218 29     17.3     22.2  16.206  &amp;lt;.0001
 8     15.1 0.861 29     13.3     16.9  17.529  &amp;lt;.0001

Confidence level used: 0.95 

$contrasts
 contrast    estimate   SE df lower.CL upper.CL t.ratio p.value
 cyl4 - cyl6     6.92 1.56 29    3.072    10.77   4.441  0.0003
 cyl4 - cyl8    11.56 1.30 29    8.356    14.77   8.905  &amp;lt;.0001
 cyl6 - cyl8     4.64 1.49 29    0.958     8.33   3.112  0.0112

Confidence level used: 0.95 
Conf-level adjustment: tukey method for comparing a family of 3 estimates 
P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ cyl, infer = T, null = 14, adjust = &amp;quot;mvt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; cyl emmean    SE df lower.CL upper.CL null t.ratio p.value
 4     26.7 0.972 29     24.2     29.1   14  13.031  &amp;lt;.0001
 6     19.7 1.218 29     16.7     22.8   14   4.714  0.0002
 8     15.1 0.861 29     12.9     17.3   14   1.277  0.5018

Confidence level used: 0.95 
Conf-level adjustment: mvt method for 3 estimates 
P value adjustment: mvt method for 3 tests &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the “emmeans” function does a great job of
summarizing all the important results, while the “summary” function
misses most of them. We can even go in the opposite direction and
summarize the “emmeans” results themselves to include &lt;strong&gt;only the
most essential information&lt;/strong&gt;. For that we’ll use the Pairwise
P-value matrix (“pwpm”) function, which presents results from “emmeans”
and pairwise comparisons thereof in a most compact way, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the upper triangle displays the “Tukey” adjusted P values,&lt;/li&gt;
&lt;li&gt;the diagonal shows the Estimates (EMMs), and&lt;/li&gt;
&lt;li&gt;the lower triangle compares the estimates between levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this way, rarely used information such as “df” or “t.ratios” is
left out.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ cyl) %&amp;gt;% pwpm()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       4      6      8
4 [26.7] 0.0003 &amp;lt;.0001
6   6.92 [19.7] 0.0112
8  11.56   4.64 [15.1]

Row and column labels: cyl
Upper triangle: P values   adjust = &amp;quot;tukey&amp;quot;
Diagonal: [Estimates] (emmean) 
Lower triangle: Comparisons (estimate)   earlier vs. later&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another advantage of “emmeans” over “summary” function is that we can
easily plot our estimates with their 95% confidence intervals by using a
“plot” command. (The 95% confidence intervals are the default, but you
can change them with “level” argument, if you want to.) But the
advantages of using “emmeans” over “summary” doesn’t stop there. The
benefits are even more pronounced if we analyze numeric predictors or
covariates.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl)$emmeans %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-11-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl, level = 0.5)$emmeans %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-11-2.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="single-numeric-predictor-altering-the-reference-grid"&gt;Single
numeric predictor + altering the reference grid&lt;/h1&gt;
&lt;p&gt;Namely, instead of just looking at the average 20 miles per gallon
for a boring average car (as represented by the mean “horsepower” of
147), we can estimate “mileages per gallon” for weak (imagine a baby
car) and muscle cars (imagine a muscle car and a engine noise)? To do
this, we’ll &lt;em&gt;reduce our covariate&lt;/em&gt; to only the &lt;em&gt;range&lt;/em&gt; of
“horsepower”, from 52 to 335, which gives us a &lt;strong&gt;much more
informative&lt;/strong&gt; and less boring look at fuel efficiency.
Particularly, weak cars drive further and strong cars drive &lt;strong&gt;much
less&lt;/strong&gt; than the average 20 miles per gallon.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ hp, d)
emmeans(m, ~ hp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  hp emmean    SE df lower.CL upper.CL
 147   20.1 0.683 30     18.7     21.5

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ hp, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  hp emmean   SE df lower.CL upper.CL
  52  26.55 1.18 30    24.15     29.0
 335   7.24 2.02 30     3.11     11.4

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, we can specify any particular values of a numeric
predictor, which might be useful when we have a non-linear relationship,
but still need to figure out the efficiency of cars at different values
of horsepower.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m1 &amp;lt;- lm(mpg ~ poly(hp, 2), d) 

library(sjPlot) # I made a video on this 📦
plot_model(m1, type = &amp;quot;pred&amp;quot;, show.data = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$hp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-13-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;Let’s use 100, 200, and 300 “horsepowers” and not only plot the
estimates, but also compare them statistically by using the “comparisons
= TRUE” argument. The blue bars represent the 95% confidence intervals
for the EMMs, and the red arrows show statistical comparisons among
them. If an arrow from one mean overlaps with an arrow from another
mean, the difference is not significant.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m1, ~ hp, at = list(hp = c(100, 200, 300))) %&amp;gt;% 
  plot(comparisons = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-14-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;Speaking of significance: if we want to see the exact p-values for
pairwise comparisons among the different “horsepowers,” we again can add
the “pairwise” argument in front of the tilde (~) and see that after
crossing the 200 horsepower threshold, the mileage doesn’t significant
change anymore, but stays at around 14.5 miles.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m1, pairwise ~ hp, at = list(hp = c(100, 200, 300)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
  hp emmean    SE df lower.CL upper.CL
 100   23.3 0.662 29     21.9     24.6
 200   14.6 0.820 29     12.9     16.3
 300   14.3 1.735 29     10.7     17.8

Confidence level used: 0.95 

$contrasts
 contrast      estimate    SE df t.ratio p.value
 hp100 - hp200     8.71 0.919 29   9.477  &amp;lt;.0001
 hp100 - hp300     9.00 1.945 29   4.626  0.0002
 hp200 - hp300     0.29 1.728 29   0.168  0.9846

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, having learned what “emmeans” does with one categorical and one
numeric predictors, let’s figure out what happens if we have both in a
multiple model.&lt;/p&gt;
&lt;h1 id="one-categorical-one-numeric-predictors"&gt;One categorical + One
numeric predictors&lt;/h1&gt;
&lt;p&gt;In models that include covariates, EMMs are often referred to as
&lt;em&gt;adjusted means&lt;/em&gt;. For example, consider a scenario where we want
to understand the effect of profession on &lt;em&gt;salary.&lt;/em&gt; We might
include &lt;em&gt;age&lt;/em&gt; as a covariate in our model because &lt;em&gt;salary&lt;/em&gt;
certainly changes over the lifetime. By holding &lt;em&gt;age&lt;/em&gt; constant at
its average, we are controlling for the influence of &lt;em&gt;age&lt;/em&gt; and
are able to better understand the unique effect of profession on
&lt;em&gt;salary&lt;/em&gt; and make more accurate predictions.&lt;/p&gt;
&lt;p&gt;If you wonder whether we really need any covariate at all, you can
compare the Akaike’s Information Criterion (AIC) of a model with, to the
model without this covariate. The lower AIC of the model with age
indicates that the covariate improves the model and thus makes
predictions of salary by profession indeed more realistic.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ISLR)

set.seed(10)  # for reproducibility
salary &amp;lt;- Wage %&amp;gt;% 
    group_by(jobclass) %&amp;gt;% 
    sample_n(50)

m_no_age &amp;lt;- lm(wage ~ jobclass, salary)
m &amp;lt;- lm(wage ~ jobclass + age, salary)
AIC(m, m_no_age)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         df      AIC
m         4 1014.413
m_no_age  3 1020.342&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The average age of 41.39 years shows that industrial workers earn
slightly below 100K, while the IT crowd earns over 116K, which is
already a first insight into our question. However, we can go one step
further and ask “emmeans” to provide salary estimates for different ages
in order to see how strongly salary increases over a lifetime for
different professions.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    jobclass = 1. Industrial, 2. Information
    age = 41.39&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ jobclass)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; jobclass       emmean   SE df lower.CL upper.CL
 1. Industrial    99.9 5.33 97     89.4      111
 2. Information  116.4 5.33 97    105.8      127

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For instance, if people start working at 25 and finish working at 65
years old, we will see that IT professionals receive a salary of over
100K already at the beginning of their career at the age of 25, while
factory workers only reach that 100K mark by the age of 42.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ age | jobclass, at = list(age = c(25, 42, 65)))$emmeans&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 age emmean   SE df lower.CL upper.CL
  25     85 7.33 97     70.4     99.5
  42    100 5.34 97     89.9    111.1
  65    121 9.49 97    102.6    140.3

jobclass = 2. Information:
 age emmean   SE df lower.CL upper.CL
  25    101 7.67 97     86.2    116.6
  42    117 5.32 97    106.3    127.5
  65    138 9.09 97    119.8    155.9

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="two-categorical-predictors"&gt;Two categorical predictors&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ am + cyl, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    am = 0, 1
    cyl = 4, 6, 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 cyl emmean    SE df lower.CL upper.CL
 4     26.1 0.972 28     24.1     28.1
 6     19.9 1.165 28     17.5     22.3
 8     16.0 0.943 28     14.1     17.9

Results are averaged over the levels of: am 
Confidence level used: 0.95 

$contrasts
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6     6.16 1.54 28   4.009  0.0012
 cyl4 - cyl8    10.07 1.45 28   6.933  &amp;lt;.0001
 cyl6 - cyl8     3.91 1.47 28   2.660  0.0331

Results are averaged over the levels of: am 
P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model with two categorical predictors works a little differently.
If we examine the estimated marginal means (EMMs) of &lt;em&gt;cylinders&lt;/em&gt;
while adjusting for &lt;em&gt;automatic transmission&lt;/em&gt;, the “emmeans”
command indicates that the results are somehow averaged over the levels
of the variable &lt;em&gt;“am”&lt;/em&gt;. I was initially unsure of what this
meant, so I calculated the means of cylinders separately for
transmission 0 and 1 using “by” argument and averaged them to get the
same EMMs we obtained initially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(24.8 + 27.4) / 2 = 26.1&lt;/li&gt;
&lt;li&gt;(18.6 + 21.2) / 2 = 19.9&lt;/li&gt;
&lt;li&gt;(14.7 + 17.3) / 2 = 16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, by the way, if you want to display the sample size of every
level, use &lt;code&gt;calc = c(n = ".wgt.")&lt;/code&gt; argument ;)&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ cyl, by = &amp;quot;am&amp;quot;, calc = c(n = &amp;quot;.wgt.&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;am = 0:
 cyl emmean    SE df  n lower.CL upper.CL
 4     24.8 1.323 28  3     22.1     27.5
 6     18.6 1.288 28  4     16.0     21.3
 8     14.7 0.842 28 12     13.0     16.5

am = 1:
 cyl emmean    SE df  n lower.CL upper.CL
 4     27.4 0.992 28  8     25.3     29.4
 6     21.2 1.378 28  3     18.4     24.0
 8     17.3 1.383 28  2     14.5     20.1

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in the case of a numeric covariate, “emmeans” are estimated for
the mean of the covariate. However, for a categorical covariate,
“emmeans” calculates the averages for each category and then takes the
average of the estimated marginal means over the categories.&lt;/p&gt;
&lt;p&gt;But what happens if we have two numeric predictors?&lt;/p&gt;
&lt;h1 id="two-numeric-predictors"&gt;Two numeric predictors&lt;/h1&gt;
&lt;p&gt;To answer this question, let’s consider the horsepower and weight of
cars in the same model. The reference grid tells us that the mileage
will be calculated only for the averages of predictors, which is
somewhat boring. However, using the “cov.reduce” argument we learned
about today, we can tell a more interesting story that is already part
of the model but would have gone untold if we had only used the
“summary” function. In particular, weak (52 horsepower) and light (1.52
weight) cars are the most efficient, as they can drive the most distance
(nearly 30 miles per gallon of fuel). If a weak car is heavy (5.42
weight), it can only manage to drive 14.5 miles, which is less than a
light but sporty muscle car (335 horsepower) with a mileage of 20 miles
per gallon. The most inefficient cars, however, are strong and heavy,
which can only manage 5.5 miles per gallon, so you’ll never pass a gas
station.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ hp + wt, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    hp = 146.69
    wt = 3.2172&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ wt | hp, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hp =  52:
   wt emmean    SE df lower.CL upper.CL
 1.51  29.71 0.943 29    27.78    31.64
 5.42  14.54 2.113 29    10.22    18.86

hp = 335:
   wt emmean    SE df lower.CL upper.CL
 1.51  20.72 2.585 29    15.43    26.00
 5.42   5.55 1.387 29     2.71     8.39

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plotting the results supports our conclusion that increasing the
&lt;em&gt;strength&lt;/em&gt; and &lt;em&gt;weight&lt;/em&gt; of cars decreases their
efficiency. The only thing we would need to be absolutely sure of our
finding is the p-values. However, if we use the “pairwise” argument in
front of the tilde (~) to get contrasts between values, we oddly get
identical results for different horsepower levels. This happens because
in a multiple model &lt;strong&gt;without interactions&lt;/strong&gt; we can only
adjust the effect of one predictor, such as &lt;em&gt;weight&lt;/em&gt;, while the
other predictors are held constant and do not change or vary.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot_model(m, type = &amp;quot;pred&amp;quot;, terms = c(&amp;quot;wt&amp;quot;, &amp;quot;hp [52, 335]&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-22-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;lm(mpg ~ hp + wt, d) %&amp;gt;% 
  emmeans(pairwise ~ wt | hp, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
hp =  52:
   wt emmean    SE df lower.CL upper.CL
 1.51  29.71 0.943 29    27.78    31.64
 5.42  14.54 2.113 29    10.22    18.86

hp = 335:
   wt emmean    SE df lower.CL upper.CL
 1.51  20.72 2.585 29    15.43    26.00
 5.42   5.55 1.387 29     2.71     8.39

Confidence level used: 0.95 

$contrasts
hp =  52:
 contrast          estimate   SE df t.ratio p.value
 wt1.513 - wt5.424     15.2 2.47 29   6.129  &amp;lt;.0001

hp = 335:
 contrast          estimate   SE df t.ratio p.value
 wt1.513 - wt5.424     15.2 2.47 29   6.129  &amp;lt;.0001&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when we introduce interactions, things dramatically improve,
because we can calculate EMMs for every level of one predictor within
every level of the other predictor, and we can easily obtain contrasts
between levels with unique p-values. This, however, is a completely
different story, because analyzing interactions can be very challenging,
but at the same time, it is extremely rewarding because it allows us to
extract even more valuable knowledge from models. Thus, if you want to
step up your data science game and unleash the real power of {emmeans},
you should definitely &lt;a href="https://youtu.be/cqmMNR6x73g"&gt;watch this
video!&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;lm(mpg ~ hp * wt, d) %&amp;gt;% 
  emmeans(pairwise ~ wt | hp, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
hp =  52:
   wt emmean   SE df lower.CL upper.CL
 1.51  33.32 1.24 28    30.78     35.9
 5.42   6.85 2.70 28     1.33     12.4

hp = 335:
   wt emmean   SE df lower.CL upper.CL
 1.51  11.26 3.31 28     4.48     18.0
 5.42  15.61 2.92 28     9.63     21.6

Confidence level used: 0.95 

$contrasts
hp =  52:
 contrast          estimate   SE df t.ratio p.value
 wt1.513 - wt5.424    26.47 3.65 28   7.261  &amp;lt;.0001

hp = 335:
 contrast          estimate   SE df t.ratio p.value
 wt1.513 - wt5.424    -4.35 5.59 28  -0.778  0.4430&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="whats-next-interactions"&gt;What’s next? … Interactions!&lt;/h1&gt;
&lt;p&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-24-1.png" width="672" /&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-24-2.png" width="672" /&gt;&lt;img src="file3ddfb071b45_files/figure-html/unnamed-chunk-24-3.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="some-bonus-content"&gt;Some bonus content&lt;/h1&gt;
&lt;h2 id="cohens-d-effect-sizes"&gt;“Cohen’s d” Effect sizes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;you must specify the “emmGrid” object with the means to be compared,
the estimated population SD sigma of the model, and its degrees of
freedom “edf”:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;eff_size(emmeans(m, ~ cyl), sigma = sigma(m), edf = 29)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; contrast    effect.size    SE df lower.CL upper.CL
 cyl4 - cyl6        1.86 0.566 26    0.698     3.02
 cyl4 - cyl8        3.38 0.677 26    1.993     4.78
 cyl6 - cyl8        1.52 0.576 26    0.340     2.71

Results are averaged over the levels of: am 
sigma used for effect sizes: 3.032 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>c83950e7eef34060a220213921b4dd8d</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-11-29-emmeans</guid>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-11-29-emmeans/thumbnail_emmeans_1.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Don't Ignore Interactions - Unleash the Full Power of Models with {emmeans} R-package</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-12-29-emmeans2interactions</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s ca. 12 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/cqmMNR6x73g" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ISLR)            # for Wage data
library(emmeans)         # unleash the power of your results!
library(tidyverse)       # for everything good in R
theme_set(theme_test())  # beautifies plots 

set.seed(1)              # for reproducibility
salary &amp;lt;- Wage %&amp;gt;% 
  mutate(age_cat = case_when(
    age &amp;lt; 40 ~ &amp;quot;1. young&amp;quot;,
    TRUE     ~ &amp;quot;2. old&amp;quot;
  )) %&amp;gt;% 
  group_by(education) %&amp;gt;% 
  sample_n(40)&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="why-do-we-need-interactions"&gt;Why do we need interactions?&lt;/h1&gt;
&lt;p&gt;Interactions in a statistical model allow for a much deeper
understanding of the relationships between variables. Interaction
effects can be viewed as an “it depends” effect.&lt;/p&gt;
&lt;p&gt;For instance, if someone asks you, “Do you prefer to wear a raincoat
or a sweater on a cold day?” Your response would probably be, “It
depends on whether it’s raining or not!” In this case, the
&lt;em&gt;cloths&lt;/em&gt; is one variable, while the &lt;em&gt;precipitation&lt;/em&gt; is the
other variable in the interaction term, and it affects your preference
for wearing a &lt;em&gt;raincoat or a sweater&lt;/em&gt;. This shows the “it
depends” nature of an interaction effect, where you can’t answer the
question without considering the other variable in the interaction
term.&lt;/p&gt;
&lt;h1 id="interaction-between-two-categorical-predictors"&gt;Interaction
between two categorical predictors&lt;/h1&gt;
&lt;p&gt;Let’s compare a model with, to a model without interaction to better
understand the advantages of using interactions. Both models explore,
whether we’ll earn more money as we age and see how a profession choice
affects our salary.&lt;/p&gt;
&lt;p&gt;And the model without interaction clearly states, that as we age, our
income increases by the average of 15K, and when we choose the IT job
over the Industrial job, we’ll earn 21 thousand dollars more. So far so
good.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m  &amp;lt;- lm(wage ~ age_cat * jobclass, salary)
m1 &amp;lt;- lm(wage ~ age_cat + jobclass, salary)

library(gtsummary) # I made a video on this 📦
tbl_regression(m1)&lt;/code&gt;&lt;/pre&gt;
&lt;div id="ehxgtdqjdy" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;"&gt;
&lt;style&gt;#ehxgtdqjdy table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#ehxgtdqjdy thead, #ehxgtdqjdy tbody, #ehxgtdqjdy tfoot, #ehxgtdqjdy tr, #ehxgtdqjdy td, #ehxgtdqjdy th {
  border-style: none;
}

#ehxgtdqjdy p {
  margin: 0;
  padding: 0;
}

#ehxgtdqjdy .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#ehxgtdqjdy .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#ehxgtdqjdy .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#ehxgtdqjdy .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#ehxgtdqjdy .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ehxgtdqjdy .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ehxgtdqjdy .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ehxgtdqjdy .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#ehxgtdqjdy .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#ehxgtdqjdy .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#ehxgtdqjdy .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#ehxgtdqjdy .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#ehxgtdqjdy .gt_spanner_row {
  border-bottom-style: hidden;
}

#ehxgtdqjdy .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#ehxgtdqjdy .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#ehxgtdqjdy .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#ehxgtdqjdy .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#ehxgtdqjdy .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#ehxgtdqjdy .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#ehxgtdqjdy .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#ehxgtdqjdy .gt_row_group_first td {
  border-top-width: 2px;
}

#ehxgtdqjdy .gt_row_group_first th {
  border-top-width: 2px;
}

#ehxgtdqjdy .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ehxgtdqjdy .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#ehxgtdqjdy .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#ehxgtdqjdy .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ehxgtdqjdy .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ehxgtdqjdy .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#ehxgtdqjdy .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#ehxgtdqjdy .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#ehxgtdqjdy .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ehxgtdqjdy .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ehxgtdqjdy .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ehxgtdqjdy .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ehxgtdqjdy .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ehxgtdqjdy .gt_left {
  text-align: left;
}

#ehxgtdqjdy .gt_center {
  text-align: center;
}

#ehxgtdqjdy .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#ehxgtdqjdy .gt_font_normal {
  font-weight: normal;
}

#ehxgtdqjdy .gt_font_bold {
  font-weight: bold;
}

#ehxgtdqjdy .gt_font_italic {
  font-style: italic;
}

#ehxgtdqjdy .gt_super {
  font-size: 65%;
}

#ehxgtdqjdy .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#ehxgtdqjdy .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#ehxgtdqjdy .gt_indent_1 {
  text-indent: 5px;
}

#ehxgtdqjdy .gt_indent_2 {
  text-indent: 10px;
}

#ehxgtdqjdy .gt_indent_3 {
  text-indent: 15px;
}

#ehxgtdqjdy .gt_indent_4 {
  text-indent: 20px;
}

#ehxgtdqjdy .gt_indent_5 {
  text-indent: 25px;
}
&lt;/style&gt;
&lt;table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false"&gt;
  &lt;thead&gt;
    
    &lt;tr class="gt_col_headings"&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Characteristic&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Characteristic&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Beta&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Beta&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;95% CI&amp;lt;/strong&amp;gt;&amp;lt;span class=&amp;quot;gt_footnote_marks&amp;quot; style=&amp;quot;white-space:nowrap;font-style:italic;font-weight:normal;&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;"&gt;&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;p-value&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;p-value&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class="gt_table_body"&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;age_cat&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;    1. young&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;—&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;—&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;    2. old&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;15&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;1.8, 27&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;0.025&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;jobclass&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;    1. Industrial&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;—&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;—&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;    2. Information&lt;/td&gt;
&lt;td headers="estimate" class="gt_row gt_center"&gt;21&lt;/td&gt;
&lt;td headers="ci" class="gt_row gt_center"&gt;8.9, 34&lt;/td&gt;
&lt;td headers="p.value" class="gt_row gt_center"&gt;&lt;0.001&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
  
  &lt;tfoot class="gt_footnotes"&gt;
    &lt;tr&gt;
      &lt;td class="gt_footnote" colspan="4"&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt; CI = Confidence Interval&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;However, the model has a problem: salary increases with age
regardless of profession, resulting in identical differences of 15k
between young and old in both job classes. Similarly, IT professionals
earn 21.3K more than factory workers at any age, young or old. This
seems unrealistic! Right?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m1, pairwise ~ age_cat | jobclass)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 contrast          estimate   SE  df t.ratio p.value
 1. young - 2. old    -14.6 6.47 197  -2.255  0.0252

jobclass = 2. Information:
 contrast          estimate   SE  df t.ratio p.value
 1. young - 2. old    -14.6 6.47 197  -2.255  0.0252&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m1, pairwise ~ jobclass| age_cat)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;age_cat = 1. young:
 contrast                       estimate  SE  df t.ratio p.value
 1. Industrial - 2. Information    -21.3 6.3 197  -3.381  0.0009

age_cat = 2. old:
 contrast                       estimate  SE  df t.ratio p.value
 1. Industrial - 2. Information    -21.3 6.3 197  -3.381  0.0009&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This occurs because models without interactions examine the influence
of each predictor while holding all other predictors constant. While
&lt;strong&gt;this IS fine&lt;/strong&gt;, it does not offer a deep understanding of
how our income &lt;strong&gt;depends&lt;/strong&gt; on both (1) job type and (2) age
at the same time. In contrast, a model with interaction looks at the
&lt;strong&gt;effect of one predictor at each level of the other
predictor&lt;/strong&gt;, which provides many more insights.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;a &amp;lt;- emmip(m1, age_cat ~ jobclass, CIs = TRUE)+
  theme(legend.position = &amp;quot;top&amp;quot;)+
  ggtitle(&amp;quot;NO INTERACTION&amp;quot;)+
  ylab(&amp;quot;SALARY [1000$]&amp;quot;)+ 
  labs(color = &amp;quot;AGE&amp;quot;)+
  scale_color_manual(values=c(&amp;#39;blue&amp;#39;,&amp;#39;black&amp;#39;))

b &amp;lt;- emmip(m, age_cat ~ jobclass, CIs = TRUE)+
  theme(legend.position = &amp;quot;top&amp;quot;)+
  ggtitle(&amp;quot;INTERACTION&amp;quot;)+
  ylab(&amp;quot;SALARY [1000$]&amp;quot;)+ 
  labs(color = &amp;quot;AGE&amp;quot;)+
  scale_color_manual(values=c(&amp;#39;blue&amp;#39;,&amp;#39;black&amp;#39;))

library(patchwork)
a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-5-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# save your fancy image ;)
ggsave(&amp;quot;interaction.png&amp;quot;, plot = last_plot(), width = 5, height = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For instance, for the young, a choice of profession is of great
importance, as they can earn more in IT than in an industrial job. While
as people age, the difference in income between the two types of jobs
becomes less significant. Similarly, an Industrial jobs tend to have a
noticeable increase in salary with age, while IT jobs do not. This may
seem disappointing for IT crowd, but we must remember that IT folks earn
a lot from the very beginning of their careers.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ jobclass | age_cat)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;age_cat = 1. young:
 contrast                       estimate    SE  df t.ratio p.value
 1. Industrial - 2. Information    -37.9 10.06 196  -3.771  0.0002

age_cat = 2. old:
 contrast                       estimate    SE  df t.ratio p.value
 1. Industrial - 2. Information    -10.9  7.97 196  -1.363  0.1745&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ age_cat | jobclass)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 contrast          estimate   SE  df t.ratio p.value
 1. young - 2. old  -28.047 9.05 196  -3.099  0.0022

jobclass = 2. Information:
 contrast          estimate   SE  df t.ratio p.value
 1. young - 2. old   -0.994 9.10 196  -0.109  0.9131&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are still uncertain about the usefulness of interactions in
models, consider this: which model would you trust to design your
professional life? The one with interactions, or the one without? The
choice is yours. The consequences, lasting. … No pressure ;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; Buy the way, if you stumbled upon
this video and some words or code are unclear, I highly recommend
watching the &lt;a href="https://youtu.be/_okuMw4JFfU"&gt;introductory video
on {emmeans} first&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For now, let’s return to our model (very quick picture of a female
model, like in fight club) and point out 3 important nuances.&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;First, if we ask for EMMs in only one of predictors, let’s say
&lt;em&gt;age&lt;/em&gt;, we’ll get a red warning that our &lt;strong&gt;results may be
misleading due to involvement in interactions&lt;/strong&gt; … which seems
like a problem (disappointing sound), but it is actually not! The effect
of &lt;em&gt;age&lt;/em&gt; is now studied for different &lt;em&gt;jobclasses&lt;/em&gt;, and
the warning helps us to remember that. (supportive sound) Therefore,
when interaction is involved, do not interpret the main effects
separately.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ age_cat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 age_cat  emmean   SE  df lower.CL upper.CL
 1. young    110 5.03 196     99.9      120
 2. old      124 3.99 196    116.4      132

Results are averaged over the levels of: jobclass 
Confidence level used: 0.95 

$contrasts
 contrast          estimate   SE  df t.ratio p.value
 1. young - 2. old    -14.5 6.42 196  -2.263  0.0247

Results are averaged over the levels of: jobclass &lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2" style="list-style-type: decimal"&gt;
&lt;li&gt;Secondly, the difference between the young and old is negative
because the income of older workers was subtracted from that of younger
workers. If this seems counterintuitive, we can simply reverse the order
within the pairs to obtain a positive number.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, ~ age_cat | jobclass) %&amp;gt;%
          pairs(reverse = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 contrast          estimate   SE  df t.ratio p.value
 2. old - 1. young   28.047 9.05 196   3.099  0.0022

jobclass = 2. Information:
 contrast          estimate   SE  df t.ratio p.value
 2. old - 1. young    0.994 9.10 196   0.109  0.9131&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3" style="list-style-type: decimal"&gt;
&lt;li&gt;And finally, did you realize that &lt;em&gt;emmeans&lt;/em&gt; have 95%
confidence intervals (CIs), while &lt;em&gt;contrasts&lt;/em&gt; do not? Don’t
worry, I have you covered ;) We can display them using the
&lt;code&gt;infer = TRUE&lt;/code&gt; argument.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ age_cat | jobclass, infer = TRUE)$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 contrast          estimate   SE  df lower.CL upper.CL t.ratio
 1. young - 2. old  -28.047 9.05 196    -45.9    -10.2  -3.099
 p.value
  0.0022

jobclass = 2. Information:
 contrast          estimate   SE  df lower.CL upper.CL t.ratio
 1. young - 2. old   -0.994 9.10 196    -18.9     16.9  -0.109
 p.value
  0.9131

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="interactions-with-covariates"&gt;Interactions with covariates&lt;/h1&gt;
&lt;h2 id="linear-relationship"&gt;Linear relationship&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;set.seed(1)              # for reproducibility
salary &amp;lt;- Wage %&amp;gt;% 
  group_by(education) %&amp;gt;% 
  sample_n(100)

m &amp;lt;- lm(wage ~ health * age, salary)

library(sjPlot) # I made a video on this 📦
plot_model(m, type = &amp;quot;pred&amp;quot;, terms = c(&amp;quot;age&amp;quot;, &amp;quot;health&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-10-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;An interaction between a categorical predictor and a numeric
predictor (covariate) is even more intriguing, as it produces even more
results. Specifically, we can estimate and compare the slopes for
&lt;em&gt;salary&lt;/em&gt; changes over a &lt;em&gt;lifetime&lt;/em&gt; for individuals with
varying levels of &lt;em&gt;health&lt;/em&gt; using the &lt;code&gt;emtrends()&lt;/code&gt;
function.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emtrends(m, pairwise ~ health, var = &amp;quot;age&amp;quot;, infer = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emtrends
 health         age.trend    SE  df lower.CL upper.CL t.ratio p.value
 1. &amp;lt;=Good          0.448 0.332 496   -0.204     1.10   1.350  0.1775
 2. &amp;gt;=Very Good     1.253 0.202 496    0.856     1.65   6.191  &amp;lt;.0001

Confidence level used: 0.95 

$contrasts
 contrast                   estimate    SE  df lower.CL upper.CL
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -0.805 0.389 496    -1.57  -0.0415
 t.ratio p.value
  -2.071  0.0388

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the salary of individuals with merely good health hardly
changes over a lifetime, as indicated by the non-significant slope. On
the other hand, the salary increase for those with excellent health is
significant. The contrast between the two slopes also reveals a
significant difference. To put it in statistical terms: good health has
a significant marginal disadvantage in terms of income, amounting to 0.8
relative to the income of those with excellent health.&lt;/p&gt;
&lt;p&gt;However, the problem with this difference in slopes of 0.8 is that we
still don’t know, how much more people on the blue line would earn.
Moreover, the plot shows that this difference changes with &lt;em&gt;age&lt;/em&gt;
and can not be expressed as a single number. The
&lt;code&gt;cov.reduce = range&lt;/code&gt; argument solves this problem, by
measuring the difference between blue and red lines at minimum and
maximum ages. This reveals, that young people earn roughly the same
amount regardless of their health, while older healthier individuals
will earn over 53K per year more at the end of their career, which IS
significant.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ health|age, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
age = 18:
 health         emmean    SE  df lower.CL upper.CL
 1. &amp;lt;=Good        87.8  9.50 496     69.2      106
 2. &amp;gt;=Very Good   91.3  5.25 496     81.0      102

age = 80:
 health         emmean    SE  df lower.CL upper.CL
 1. &amp;lt;=Good       115.6 12.29 496     91.4      140
 2. &amp;gt;=Very Good  169.0  8.13 496    153.0      185

Confidence level used: 0.95 

$contrasts
age = 18:
 contrast                   estimate   SE  df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good    -3.49 10.9 496  -0.322  0.7477

age = 80:
 contrast                   estimate   SE  df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -53.41 14.7 496  -3.625  0.0003&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="non-linear-relationship"&gt;Non-Linear relationship&lt;/h2&gt;
&lt;p&gt;Well, being healthy and rich at 80 might sound like a dream come
true, but let’s face it, it’s probably not gonna happen. Most older
folks are retired and can’t make that kind of money. So, to spice things
up a bit, let’s make the numeric variable non-linear, since that’s often
how it goes in the real world. But the problem with this more realistic
approach is that non-linear relationships can’t be summed up as slopes.
Fortunately, we can use specific values of age using the “emmip”
function.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(wage ~ health * poly(age, 2), salary)

emmip(m, health ~ age, CIs = TRUE, 
      cov.reduce = FALSE, ylab = &amp;quot;Salary  [1000 $]&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-13-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;Check this out! If we use the “cov.reduce = FALSE” argument with
“emmip” function, we will be able to see all possible values of age.
This gives us a complete overview of our data and enables us to choose
fewer, more meaningful values of age to compare. The “at = list()”
argument allows us to specify exact ages. Let’s for example take 25, 45,
and 65 years, representing the beginning, middle, and the end of a
career.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmip(m, health ~ age, CIs = TRUE, 
      at = list(age = c(25, 45, 65)), 
      dodge = 5, ylab = &amp;quot;Salary  [1000 $]&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-14-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;And all of a sudden, it looks like we’re comparing two categorical
variables, with &lt;em&gt;age&lt;/em&gt; having 3 categories and &lt;em&gt;health&lt;/em&gt;
having 2. As a result, we can again create two different types of
contrasts. The first is between specific values of the &lt;em&gt;age&lt;/em&gt;
covariate, at the beginning, middle, and end of a career, within each
level of &lt;em&gt;health&lt;/em&gt;. And the second type of contrast can be
examined between &lt;em&gt;health&lt;/em&gt; levels at any particular value of
&lt;em&gt;age&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# get contrasts
emmeans(m, pairwise ~ age|health,  at = list(age = c(25, 45, 65)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
health = 1. &amp;lt;=Good:
 age emmean    SE  df lower.CL upper.CL
  25   78.5  9.92 494     59.0     98.0
  45  105.1  4.47 494     96.3    113.8
  65   95.8 10.34 494     75.5    116.1

health = 2. &amp;gt;=Very Good:
 age emmean    SE  df lower.CL upper.CL
  25   85.6  4.84 494     76.0     95.1
  45  133.6  2.84 494    128.0    139.1
  65  128.4  6.69 494    115.3    141.6

Confidence level used: 0.95 

$contrasts
health = 1. &amp;lt;=Good:
 contrast      estimate    SE  df t.ratio p.value
 age25 - age45   -26.54 11.61 494  -2.287  0.0585
 age25 - age65   -17.31 12.93 494  -1.339  0.3743
 age45 - age65     9.24 11.89 494   0.777  0.7173

health = 2. &amp;gt;=Very Good:
 contrast      estimate    SE  df t.ratio p.value
 age25 - age45   -48.02  5.99 494  -8.013  &amp;lt;.0001
 age25 - age65   -42.87  8.01 494  -5.351  &amp;lt;.0001
 age45 - age65     5.15  7.13 494   0.722  0.7507

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ health|age,  at = list(age = c(25, 45, 65)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
age = 25:
 health         emmean    SE  df lower.CL upper.CL
 1. &amp;lt;=Good        78.5  9.92 494     59.0     98.0
 2. &amp;gt;=Very Good   85.6  4.84 494     76.0     95.1

age = 45:
 health         emmean    SE  df lower.CL upper.CL
 1. &amp;lt;=Good       105.1  4.47 494     96.3    113.8
 2. &amp;gt;=Very Good  133.6  2.84 494    128.0    139.1

age = 65:
 health         emmean    SE  df lower.CL upper.CL
 1. &amp;lt;=Good        95.8 10.34 494     75.5    116.1
 2. &amp;gt;=Very Good  128.4  6.69 494    115.3    141.6

Confidence level used: 0.95 

$contrasts
age = 25:
 contrast                   estimate    SE  df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good    -7.04 11.04 494  -0.638  0.5237

age = 45:
 contrast                   estimate    SE  df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -28.51  5.29 494  -5.385  &amp;lt;.0001

age = 65:
 contrast                   estimate    SE  df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -32.60 12.31 494  -2.648  0.0084&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, if someone asks you who earns more, very healthy or less
healthy people, you would have to respond, “It depends on their age.
Young people earn the same regardless of their health, while older
individuals with very good health definitely earn more, probably because
they are more capable of delivering. You can’t certainly answer the
question about salaries in different health levels without knowing the
age, because”IT DEPENDS” on age … and probably some other important
things. So, since the relationships between things in real life always
depend on something, models with interactions tend to be more realistic.
Then how does an interaction between &lt;em&gt;two numeric predictors&lt;/em&gt;
work?&lt;/p&gt;
&lt;h1 id="two-numeric-predictors"&gt;Two numeric predictors&lt;/h1&gt;
&lt;p&gt;Pretty easy actually! Having the option to select specific values of
numeric predictors gives us a valuable tool for easily modeling and
interpreting interactions between two numeric predictors. It’s crucial
to choose only a few key values, as plotting all the numeric values of
both covariates could be overwhelming and chaotic, although it does also
provide a complete overview and reveals the story within our data.&lt;/p&gt;
&lt;p&gt;Take for instance, slow and weak cars - they may not be flashy but
they can go the farthest on a single gallon of fuel, making them the
most sustainable. On the other hand, slow and strong cars would go the
least distance on a gallon of fuel, likely because of their weight.
Similarly, quick and strong cars have lower mileage compared to quick
and weak cars, as the latter type is not able to burn as much fuel and
therefore can go further.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ poly(hp, 2) * poly(qsec, 2), mtcars)

emmip(m, hp ~ qsec, cov.reduce = FALSE, 
      ylab = &amp;quot;Miles per gallon&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-16-1.png" width="672" /&gt;
Having the full picture gives us an advantage as it allows us to
&lt;strong&gt;choose the most meaningful values for both numeric
variables&lt;/strong&gt;. From there, we can &lt;strong&gt;treat those specific
values as categories&lt;/strong&gt; and easily obtain EMMs and the pairwise
contrasts between them. I think it’s quite remarkable that we can
interpret a model with two interacting numeric predictors that have a
non-linear relationship with the response and with each other in such an
understandable way. Let me know in the comments below what you think,
and whether you know a better way to interpret similar models.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmip(m, hp ~ qsec, CIs = TRUE, dodge = 1,
      at = list(hp   = c(50, 150, 250), 
                qsec = c(14, 17, 20)),
      ylab = &amp;quot;Miles per gallon&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-17-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ qsec | hp,  
        at = list(hp   = c(50, 150, 250), 
                  qsec = c(14, 17, 20)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
hp =  50:
 qsec emmean    SE df lower.CL upper.CL
   14  38.53 10.16 23    17.51     59.6
   17  30.87  3.47 23    23.69     38.0
   20  33.69  2.84 23    27.81     39.6

hp = 150:
 qsec emmean    SE df lower.CL upper.CL
   14  22.62  4.40 23    13.52     31.7
   17  19.11  1.03 23    16.98     21.2
   20  11.77  3.35 23     4.84     18.7

hp = 250:
 qsec emmean    SE df lower.CL upper.CL
   14  15.30  5.21 23     4.53     26.1
   17  12.46  2.51 23     7.27     17.7
   20   2.08 17.66 23   -34.46     38.6

Confidence level used: 0.95 

$contrasts
hp =  50:
 contrast        estimate    SE df t.ratio p.value
 qsec14 - qsec17     7.67  8.69 23   0.882  0.6566
 qsec14 - qsec20     4.85 10.49 23   0.462  0.8894
 qsec17 - qsec20    -2.82  5.10 23  -0.553  0.8460

hp = 150:
 contrast        estimate    SE df t.ratio p.value
 qsec14 - qsec17     3.50  4.61 23   0.760  0.7307
 qsec14 - qsec20    10.85  4.41 23   2.461  0.0548
 qsec17 - qsec20     7.34  3.85 23   1.905  0.1599

hp = 250:
 contrast        estimate    SE df t.ratio p.value
 qsec14 - qsec17     2.84  6.77 23   0.419  0.9082
 qsec14 - qsec20    13.22 14.46 23   0.914  0.6370
 qsec17 - qsec20    10.38 18.22 23   0.570  0.8373

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="higher-order-interactions"&gt;Higher order interactions&lt;/h1&gt;
&lt;p&gt;Treating interactions as “it depends” effects enables us to model
higher-order interactions, like a three-way interaction which involves
three variables in the term, for example
&lt;code&gt;age * jobclass * health&lt;/code&gt;, where the relationship between
wage and any of the predictors is entirely dependent on the other two
predictors&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m  &amp;lt;- lm(wage ~ poly(age, 2) * jobclass * health, Wage)

emmip(m, health ~ age|jobclass, CIs = TRUE, 
      at = list(age = c(25, 45, 65)), 
      dodge = 5, ylab = &amp;quot;Salary  [1000 $]&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-18-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;For example, the relationship between &lt;em&gt;money&lt;/em&gt; and
&lt;em&gt;health&lt;/em&gt; depends on &lt;em&gt;jobclass&lt;/em&gt; and &lt;em&gt;age&lt;/em&gt;. As we can
see from the &lt;em&gt;reference grid&lt;/em&gt; of our model, there are many
combinations you can get &lt;em&gt;contrasts&lt;/em&gt; for. You can essentially
compare every error-bar on the plot to any other error-bar. Here are
just a couple of &lt;em&gt;contrast&lt;/em&gt; examples, but feel free to explore
any of them.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ref_grid(m, at = list(age = c(25, 45, 65))) @grid &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   age       jobclass         health .wgt.
1   25  1. Industrial      1. &amp;lt;=Good   487
2   45  1. Industrial      1. &amp;lt;=Good   487
3   65  1. Industrial      1. &amp;lt;=Good   487
4   25 2. Information      1. &amp;lt;=Good   371
5   45 2. Information      1. &amp;lt;=Good   371
6   65 2. Information      1. &amp;lt;=Good   371
7   25  1. Industrial 2. &amp;gt;=Very Good  1057
8   45  1. Industrial 2. &amp;gt;=Very Good  1057
9   65  1. Industrial 2. &amp;gt;=Very Good  1057
10  25 2. Information 2. &amp;gt;=Very Good  1085
11  45 2. Information 2. &amp;gt;=Very Good  1085
12  65 2. Information 2. &amp;gt;=Very Good  1085&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ health|jobclass,  by = &amp;quot;age&amp;quot;,
        at = list(age = c(25, 45, 65)))$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial, age = 25:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good    -6.34 4.34 2988  -1.461  0.1440

jobclass = 2. Information, age = 25:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good    -5.37 6.44 2988  -0.835  0.4041

jobclass = 1. Industrial, age = 45:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -13.97 2.76 2988  -5.061  &amp;lt;.0001

jobclass = 2. Information, age = 45:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -21.52 2.99 2988  -7.198  &amp;lt;.0001

jobclass = 1. Industrial, age = 65:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -12.34 6.32 2988  -1.951  0.0512

jobclass = 2. Information, age = 65:
 contrast                   estimate   SE   df t.ratio p.value
 1. &amp;lt;=Good - 2. &amp;gt;=Very Good   -12.26 5.80 2988  -2.116  0.0345&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ age|jobclass,  by = &amp;quot;health&amp;quot;,
        at = list(age = c(25, 45, 65)))$contrasts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial, health = 1. &amp;lt;=Good:
 contrast      estimate   SE   df t.ratio p.value
 age25 - age45   -24.32 4.35 2988  -5.587  &amp;lt;.0001
 age25 - age65   -16.37 5.76 2988  -2.842  0.0126
 age45 - age65     7.95 5.12 2988   1.553  0.2665

jobclass = 2. Information, health = 1. &amp;lt;=Good:
 contrast      estimate   SE   df t.ratio p.value
 age25 - age45   -19.92 6.49 2988  -3.068  0.0062
 age25 - age65   -18.12 7.05 2988  -2.571  0.0275
 age45 - age65     1.80 5.12 2988   0.352  0.9340

jobclass = 1. Industrial, health = 2. &amp;gt;=Very Good:
 contrast      estimate   SE   df t.ratio p.value
 age25 - age45   -31.96 2.92 2988 -10.940  &amp;lt;.0001
 age25 - age65   -22.37 4.80 2988  -4.656  &amp;lt;.0001
 age45 - age65     9.58 4.77 2988   2.011  0.1097

jobclass = 2. Information, health = 2. &amp;gt;=Very Good:
 contrast      estimate   SE   df t.ratio p.value
 age25 - age45   -36.07 3.41 2988 -10.586  &amp;lt;.0001
 age25 - age65   -25.01 4.45 2988  -5.626  &amp;lt;.0001
 age45 - age65    11.06 4.25 2988   2.600  0.0254

P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But weight! You may suddenly realize that you now have a different
problem. While models without interactions have limited results, models
with interactions provide too many results, even with only two or three
categories per predictor. Imagine the results if one of the predictors
had five categories. Fortunately, there is a solution that allows for
presenting these results in a more compact manner.&lt;/p&gt;
&lt;h1 id="matrix-results"&gt;Matrix results&lt;/h1&gt;
&lt;p&gt;For that, and in order to be more realistic, let’s actually consider
the &lt;em&gt;education&lt;/em&gt; predictor with &lt;strong&gt;five&lt;/strong&gt; categories
and have it interact with &lt;em&gt;jobclass&lt;/em&gt;. Even with only two
predictors, we’ll get so many EMMs and contrasts that they won’t fit on
a single computer page. So, as the number of results increases, it
&lt;strong&gt;becomes necessary to have a more compact way of
presenting&lt;/strong&gt; them.&lt;/p&gt;
&lt;p&gt;One of the most effective ways way I have found is to put all the
results into a matrix. This matrix displays the EMMs along the diagonal,
P values in the upper triangle, and differences in the lower triangle.
For example, the EMMs for individuals who did not finish high school are
85 for Industrial jobs and 88 for IT jobs, which is exactly what we see
in the first square brackets. The salary difference between them and
their peers who did finish high school is 16K per year and is not
significant for the Industrial job class because the p-value is 0.16.
You get the idea.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;m  &amp;lt;- lm(wage ~ education * jobclass, salary)

m_emmeans &amp;lt;- emmeans(m, pairwise ~ education | jobclass, adjust = &amp;quot;bonferroni&amp;quot;)
m_emmeans&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
jobclass = 1. Industrial:
 education          emmean   SE  df lower.CL upper.CL
 1. &amp;lt; HS Grad         85.0 4.72 490     75.8     94.3
 2. HS Grad          101.5 4.98 490     91.7    111.3
 3. Some College     108.4 5.24 490     98.1    118.7
 4. College Grad     122.7 6.07 490    110.8    134.6
 5. Advanced Degree  148.6 8.70 490    131.5    165.7

jobclass = 2. Information:
 education          emmean   SE  df lower.CL upper.CL
 1. &amp;lt; HS Grad         88.6 6.87 490     75.1    102.1
 2. HS Grad           99.3 6.23 490     87.0    111.5
 3. Some College     105.3 5.80 490     93.9    116.7
 4. College Grad     127.6 5.06 490    117.6    137.5
 5. Advanced Degree  155.3 4.35 490    146.7    163.8

Confidence level used: 0.95 

$contrasts
jobclass = 1. Industrial:
 contrast                             estimate    SE  df t.ratio
 1. &amp;lt; HS Grad - 2. HS Grad              -16.48  6.86 490  -2.403
 1. &amp;lt; HS Grad - 3. Some College         -23.40  7.05 490  -3.319
 1. &amp;lt; HS Grad - 4. College Grad         -37.68  7.69 490  -4.900
 1. &amp;lt; HS Grad - 5. Advanced Degree      -63.58  9.89 490  -6.427
 2. HS Grad - 3. Some College            -6.93  7.23 490  -0.958
 2. HS Grad - 4. College Grad           -21.20  7.85 490  -2.700
 2. HS Grad - 5. Advanced Degree        -47.10 10.02 490  -4.701
 3. Some College - 4. College Grad      -14.28  8.02 490  -1.779
 3. Some College - 5. Advanced Degree   -40.18 10.15 490  -3.957
 4. College Grad - 5. Advanced Degree   -25.90 10.61 490  -2.442
 p.value
  0.1664
  0.0097
  &amp;lt;.0001
  &amp;lt;.0001
  1.0000
  0.0718
  &amp;lt;.0001
  0.7582
  0.0009
  0.1496

jobclass = 2. Information:
 contrast                             estimate    SE  df t.ratio
 1. &amp;lt; HS Grad - 2. HS Grad              -10.62  9.28 490  -1.145
 1. &amp;lt; HS Grad - 3. Some College         -16.70  8.99 490  -1.857
 1. &amp;lt; HS Grad - 4. College Grad         -38.94  8.54 490  -4.561
 1. &amp;lt; HS Grad - 5. Advanced Degree      -66.62  8.13 490  -8.190
 2. HS Grad - 3. Some College            -6.08  8.51 490  -0.714
 2. HS Grad - 4. College Grad           -28.32  8.03 490  -3.528
 2. HS Grad - 5. Advanced Degree        -56.00  7.59 490  -7.373
 3. Some College - 4. College Grad      -22.24  7.70 490  -2.889
 3. Some College - 5. Advanced Degree   -49.92  7.25 490  -6.889
 4. College Grad - 5. Advanced Degree   -27.68  6.67 490  -4.148
 p.value
  1.0000
  0.6392
  0.0001
  &amp;lt;.0001
  1.0000
  0.0046
  &amp;lt;.0001
  0.0403
  &amp;lt;.0001
  0.0004

P value adjustment: bonferroni method for 10 tests &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;pwpm(m_emmeans[[1]], adjust = &amp;quot;bonferroni&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
jobclass = 1. Industrial
                   1. &amp;lt; HS Grad 2. HS Grad 3. Some College
1. &amp;lt; HS Grad              [ 85]     0.1664          0.0097
2. HS Grad               -16.48      [102]          1.0000
3. Some College          -23.40      -6.93           [108]
4. College Grad          -37.68     -21.20          -14.28
5. Advanced Degree       -63.58     -47.10          -40.18
                   4. College Grad 5. Advanced Degree
1. &amp;lt; HS Grad                &amp;lt;.0001             &amp;lt;.0001
2. HS Grad                  0.0718             &amp;lt;.0001
3. Some College             0.7582             0.0009
4. College Grad              [123]             0.1496
5. Advanced Degree          -25.90              [149]

jobclass = 2. Information
                   1. &amp;lt; HS Grad 2. HS Grad 3. Some College
1. &amp;lt; HS Grad            [ 88.6]     1.0000          0.6392
2. HS Grad               -10.62    [ 99.3]          1.0000
3. Some College          -16.70      -6.08         [105.3]
4. College Grad          -38.94     -28.32          -22.24
5. Advanced Degree       -66.62     -56.00          -49.92
                   4. College Grad 5. Advanced Degree
1. &amp;lt; HS Grad                &amp;lt;.0001             &amp;lt;.0001
2. HS Grad                  0.0046             &amp;lt;.0001
3. Some College             0.0403             &amp;lt;.0001
4. College Grad            [127.6]             0.0004
5. Advanced Degree          -27.68            [155.3]

Row and column labels: education
Upper triangle: P values   adjust = &amp;quot;bonferroni&amp;quot;
Diagonal: [Estimates] (emmean) 
Lower triangle: Comparisons (estimate)   earlier vs. later&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="graphical-comparisons-and-plot-p-values"&gt;Graphical comparisons
and plot p-values&lt;/h1&gt;
&lt;p&gt;And since one picture is worth a thousands words, the second
effective way to present a lot of results is to actually visualize them,
where we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;first visualize the estimates with contrasts using a simple
&lt;code&gt;plot&lt;/code&gt; command and the argument
&lt;code&gt;comparisons = TRUE&lt;/code&gt; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then plot all the p-values using the &lt;strong&gt;Pairwise P-value
plot&lt;/strong&gt; (via &lt;code&gt;pwpp&lt;/code&gt; command)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(m_emmeans, comparisons = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-21-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pwpp(m_emmeans[[1]])+     # by = &amp;quot;health&amp;quot;
  geom_vline(xintercept = 0.05, linetype = 2) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-22-1.png" width="1344" /&gt;&lt;/p&gt;
&lt;p&gt;Now, that we know how useful and informative interactions can be, the
ONLY thing left to learn is how to find the best model, which includes
only meaningful interactions. Fortunately, {glmulti} package allows you
to do this with a few lines of code and if you wanna find out how, check
out &lt;a href="https://youtu.be/Im293ClFen4"&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Including and interpreting interactions make things more complicated,
but also more rewarding. However, interpreting three-way type of effect
can be difficult and is prone to mistakes. That is why they are rarely
used in inferential statistics, despite the fact that they can improve
predictive power of models. Further difficult to interpret cases would
be including one interaction and several non-interacting predictors, or
including several interactions into the same model. Thus, I’d only use
two predictors and two-way interactions.&lt;/p&gt;
&lt;h1 id="bonus-questionable-content"&gt;Bonus (questionable ;) content&lt;/h1&gt;
&lt;h2
id="effect-size-cohen-effect-sizes-are-close-cousins-of-pairwise-differences"&gt;Effect
size: Cohen effect sizes are close cousins of pairwise differences&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;eff_size(
  m_emmeans, 
  sigma = sqrt(mean(sigma(m)^2)), 
  edf   = df.residual(m) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;jobclass = 1. Industrial:
 contrast                               effect.size    SE  df
 (1. &amp;lt; HS Grad - 2. HS Grad)                 -0.424 0.177 490
 (1. &amp;lt; HS Grad - 3. Some College)            -0.602 0.182 490
 (1. &amp;lt; HS Grad - 4. College Grad)            -0.969 0.200 490
 (1. &amp;lt; HS Grad - 5. Advanced Degree)         -1.635 0.260 490
 (2. HS Grad - 3. Some College)              -0.178 0.186 490
 (2. HS Grad - 4. College Grad)              -0.545 0.203 490
 (2. HS Grad - 5. Advanced Degree)           -1.211 0.261 490
 (3. Some College - 4. College Grad)         -0.367 0.207 490
 (3. Some College - 5. Advanced Degree)      -1.033 0.263 490
 (4. College Grad - 5. Advanced Degree)      -0.666 0.274 490
 lower.CL upper.CL
   -0.771  -0.0762
   -0.960  -0.2435
   -1.362  -0.5757
   -2.145  -1.1247
   -0.544   0.1874
   -0.943  -0.1469
   -1.723  -0.6993
   -0.773   0.0389
   -1.550  -0.5160
   -1.204  -0.1285

jobclass = 2. Information:
 contrast                               effect.size    SE  df
 (1. &amp;lt; HS Grad - 2. HS Grad)                 -0.273 0.239 490
 (1. &amp;lt; HS Grad - 3. Some College)            -0.429 0.232 490
 (1. &amp;lt; HS Grad - 4. College Grad)            -1.001 0.222 490
 (1. &amp;lt; HS Grad - 5. Advanced Degree)         -1.713 0.216 490
 (2. HS Grad - 3. Some College)              -0.156 0.219 490
 (2. HS Grad - 4. College Grad)              -0.728 0.208 490
 (2. HS Grad - 5. Advanced Degree)           -1.440 0.201 490
 (3. Some College - 4. College Grad)         -0.572 0.199 490
 (3. Some College - 5. Advanced Degree)      -1.284 0.191 490
 (4. College Grad - 5. Advanced Degree)      -0.712 0.173 490
 lower.CL upper.CL
   -0.742   0.1958
   -0.885   0.0257
   -1.437  -0.5653
   -2.138  -1.2883
   -0.586   0.2737
   -1.136  -0.3201
   -1.834  -1.0457
   -0.962  -0.1813
   -1.659  -0.9088
   -1.052  -0.3717

sigma used for effect sizes: 38.89 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;h2
id="one-interaction-more-predictors-think-twice-before-you-do-that"&gt;One
interaction + more predictors (think twice before you do that)&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;d &amp;lt;- mtcars %&amp;gt;% 
  mutate(cyl = factor(cyl),
         am  = factor(am),
         gear= factor(gear))

m &amp;lt;- lm(mpg ~ am * cyl + hp + gear + disp, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    am = 0, 1
    cyl = 4, 6, 8
    hp = 146.69
    gear = 3, 4, 5
    disp = 230.72&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# cooler determine different values then reg_grid using &amp;quot;at&amp;quot;
emmeans(m, pairwise ~ cyl | am, 
        at = list(am = &amp;quot;0&amp;quot;, hp = 146.6875, disp = 230.7219)
)$emmeans&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;am = 0:
 cyl emmean   SE df lower.CL upper.CL
 4     19.1 2.10 22     14.8     23.5
 6     17.8 1.61 22     14.4     21.1
 8     19.5 2.29 22     14.7     24.2

Results are averaged over the levels of: gear 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl | am, 
        at = list(am = &amp;quot;1&amp;quot;, hp = 146.6875, disp = 230.7219)
)$emmeans&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;am = 1:
 cyl emmean   SE df lower.CL upper.CL
 4     23.2 2.02 22     19.1     27.4
 6     18.9 1.88 22     14.9     22.8
 8     23.0 3.52 22     15.7     30.3

Results are averaged over the levels of: gear 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# contrasts here stay the same because of the linear numeric predictors

# determine different values then reg_grid using &amp;quot;at&amp;quot;

emmeans(m, pairwise ~ cyl | am, 
        at = list(am = &amp;quot;1&amp;quot;, hp = 300, disp = c(100, 200, 300), gear = &amp;quot;5&amp;quot;)
)$emmeans %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-24-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;mtcars.rg &amp;lt;- ref_grid(m,
                      at = list(hp = 300, 
                                disp = c(100, 200, 300)))
mtcars.rg&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    am = 0, 1
    cyl = 4, 6, 8
    hp = 300
    gear = 3, 4, 5
    disp = 100, 200, 300&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# plotting 
plot(mtcars.rg, by = &amp;quot;gear&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-24-2.png" width="672" /&gt;&lt;/p&gt;
&lt;h2
id="interactions-with-covariates-other-predictors-think-twice-before-doing-this"&gt;Interactions
with covariates + other predictors (think twice before doing this)&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ISLR)
m &amp;lt;- lm(wage ~ age*education + jobclass, data = Wage)

ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    age = 42.415
    education = 1. &amp;lt; HS Grad, 2. HS Grad, 3. Some College, 4. College Grad, 5. Advanced Degree
    jobclass = 1. Industrial, 2. Information&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emtrends(m, pairwise ~ education, var = &amp;quot;age&amp;quot;)$emtrends&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; education          age.trend    SE   df lower.CL upper.CL
 1. &amp;lt; HS Grad           0.359 0.174 2989   0.0173    0.700
 2. HS Grad             0.460 0.096 2989   0.2722    0.649
 3. Some College        0.931 0.122 2989   0.6912    1.170
 4. College Grad        0.464 0.126 2989   0.2172    0.710
 5. Advanced Degree     0.485 0.169 2989   0.1526    0.817

Results are averaged over the levels of: jobclass 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmip(m, education ~ age, CIs = T, 
      cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-25-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emtrends(m, pairwise ~ education, var = &amp;quot;age&amp;quot;, 
        at = list(jobclass = &amp;quot;1. Industrial&amp;quot;)
)$emtrends&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; education          age.trend    SE   df lower.CL upper.CL
 1. &amp;lt; HS Grad           0.359 0.174 2989   0.0173    0.700
 2. HS Grad             0.460 0.096 2989   0.2722    0.649
 3. Some College        0.931 0.122 2989   0.6912    1.170
 4. College Grad        0.464 0.126 2989   0.2172    0.710
 5. Advanced Degree     0.485 0.169 2989   0.1526    0.817

Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;h2
id="several-interactions-thing-three-times-before-doing-this-and-then-run-away-without-doing-this-or-try-to-consult-a-very-professional-statistitian"&gt;Several
interactions (thing three times before doing this and then run away
without doing this! or try to consult a VERY professional
statistitian!)&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;m &amp;lt;- lm(mpg ~ am * cyl + hp * gear, d)
ref_grid(m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;emmGrid&amp;#39; object with variables:
    am = 0, 1
    cyl = 4, 6, 8
    hp = 146.69
    gear = 3, 4, 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmeans(m, pairwise ~ cyl | am)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
am = 0:
 cyl emmean   SE df lower.CL upper.CL
 4     18.3 2.03 21    14.10     22.6
 6     18.5 1.53 21    15.28     21.6
 8     16.9 2.48 21    11.78     22.1

am = 1:
 cyl emmean   SE df lower.CL upper.CL
 4     22.1 2.05 21    17.85     26.4
 6     18.8 1.76 21    15.13     22.5
 8     17.4 6.51 21     3.88     31.0

Results are averaged over the levels of: gear 
Confidence level used: 0.95 

$contrasts
am = 0:
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6   -0.128 2.32 21  -0.055  0.9983
 cyl4 - cyl8    1.388 3.18 21   0.436  0.9009
 cyl6 - cyl8    1.516 2.79 21   0.543  0.8509

am = 1:
 contrast    estimate   SE df t.ratio p.value
 cyl4 - cyl6    3.305 2.30 21   1.435  0.3418
 cyl4 - cyl8    4.685 7.27 21   0.644  0.7977
 cyl6 - cyl8    1.379 6.37 21   0.217  0.9745

Results are averaged over the levels of: gear 
P value adjustment: tukey method for comparing a family of 3 estimates &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmip(m, am ~ cyl, CIs = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-26-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;emtrends(m, ~ gear, var = &amp;quot;hp&amp;quot;, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; gear hp.trend     SE df lower.CL upper.CL
 3     -0.0423 0.0236 21  -0.0913  0.00679
 4     -0.1390 0.0419 21  -0.2260 -0.05191
 5     -0.0369 0.0374 21  -0.1146  0.04088

Results are averaged over the levels of: am, cyl, hp 
Confidence level used: 0.95 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;emmip(m, gear ~ hp, CIs = T, cov.reduce = range)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf2d04f8be_files/figure-html/unnamed-chunk-26-2.png" width="672" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>ecdd89b672403817aff389e14986646a</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-12-29-emmeans2interactions</guid>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-12-29-emmeans2interactions/thumbnail_emmeans_2.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Quantile Regression as an useful Alternative for Ordinary Linear Regression</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-12-01-quantileregression</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s only 14 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/Gtz8ca_4hVg" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="why-do-we-need-quantile-regression-qr"&gt;Why do we need Quantile
Regression (QR)?&lt;/h1&gt;
&lt;p&gt;Particularly, QR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is robust to outliers and influential points&lt;/li&gt;
&lt;li&gt;does not assume a constant variance (known as homoskedasticity) for
the response variable or the residuals&lt;/li&gt;
&lt;li&gt;does not assume normality&lt;/li&gt;
&lt;li&gt;but the main advantage of QR over linear regression (LR) is that QR
explores different values of the response variable, instead of only the
average, and delivers therefore a more complete picture of the
relationships between variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take problematic data,&lt;/li&gt;
&lt;li&gt;build both, linear and quantile models, and see&lt;/li&gt;
&lt;li&gt;whether QR can solve problems and be a truly &lt;strong&gt;Useful
Alternative for Ordinary Linear Regression&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1
id="solve-outliers-problem-median-regression-only-5th-quantile-or-2nd-quartile"&gt;1.
Solve outliers problem: Median Regression (only 5th quaNtile, or 2nd
quaRtile)&lt;/h1&gt;
&lt;p&gt;We’ll first see how both models deal with outliers. For that we’ll
create a small data set with ONE obvious outlier and use
&lt;code&gt;geom_smooth()&lt;/code&gt; function to create a linear model and
&lt;code&gt;geom_quantile()&lt;/code&gt; function for a quick quantile regression,
with only 5th quantile, which makes it a &lt;strong&gt;median-based
regression&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# create data
library(tidyverse)
d &amp;lt;- tibble(
  predictor = c(  1,   2,   3,  4,   5,   6,   7),
  outcome   = c(1.5, 2.3, 2.8,  4.1, 5.3, 0, 6.8)
)

# plot ordinary and median regressions
ggplot(d, aes(predictor, outcome))+
  geom_point()+
  geom_smooth(method = lm, se = F,color = &amp;quot;red&amp;quot;, )+
  geom_quantile(quantiles = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-2-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;This plot shows, that linear model tries to please all points and
misses most of them, which results in a bad fit. In contrast, the Median
Regression ignores the outlier and visually fits the rest of the data
much better. But how do we know that Median Regression is indeed
better?&lt;/p&gt;
&lt;p&gt;Well, if we create an ordinary and quantile regressions, we can
compare the amount of information they loose. The Akaike’s Information
Criterion (AIC) measures such loss of information. Namely, the lower the
AIC, the better the model. Thus, a lower AIC of QR indicates a smaller
loss of information from the data, as compared to LR, making QR a better
model. Moreover, since the slope of LR is not significant, while the
slope of QR is, using a wrong model could cost you an important
discovery. So, no Nobel Price for you!&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# model median (2nd quantile) regression
lr &amp;lt;- lm(outcome ~ predictor, data = d)
library(quantreg)
mr &amp;lt;- rq(outcome ~ predictor, data = d, tau = .5)

# compare models
AIC(lr, mr) # =&amp;gt; the lower AIC the better&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   df      AIC
lr  3 34.90235
mr  2 27.09082&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(sjPlot) # I made a video on this 📦
theme_set(theme_bw())
plot_models(lr, mr, show.values = TRUE, 
            m.labels = c(&amp;quot;Linear model&amp;quot;, &amp;quot;Median model&amp;quot;), 
            legend.title = &amp;quot;Model type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-3-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;By the way, we can use &lt;code&gt;ols_plot_resid_lev()&lt;/code&gt; function
from {olsrr} package and see that we indeed have an outlier.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(olsrr)
ols_plot_resid_lev(lr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-4-1.png" width="672" /&gt;
# 2. Solve heteroscedasticity&lt;/p&gt;
&lt;p&gt;Now let’s take a real world heteroscedastic data and see whether
median regression handles it better. Engel dataset from {quantreg}
package explores the relationship between household food expenditure and
household income. Similarly to previous example, the median and mean
fits are quite different, which can be explained by the strong effect of
the two unusual points with high income and low food expenditure.
Probably just greedy people.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# get heteroscedastic data
data(engel)
ggplot(engel, aes(income, foodexp))+
  geom_point()+
  geom_smooth(method = lm, se = F, color = &amp;quot;red&amp;quot;)+
  geom_quantile(color = &amp;quot;blue&amp;quot;, quantiles = 0.5)+
  geom_quantile(color = &amp;quot;gray&amp;quot;, alpha = 0.3, 
                  quantiles = seq(.05, .95, by = 0.05))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-5-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;In order to better justify the use of QR, we can check
heteroskedasticity via Breusch-Pagan test. Our test detects
heteroscedasticity, so that we again need an alternative to linear
regression. And, a lower AIC of median-based regression again shows a
better fit, as compared to the mean-based regression.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# compare models
lr   &amp;lt;- lm(foodexp ~ income, data = engel)

library(performance) # I made a video on this 📦
check_heteroscedasticity(lr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Warning: Heteroscedasticity (non-constant error variance) detected (p &amp;lt; .001).&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;qm50 &amp;lt;- rq(foodexp ~ income, data = engel, tau = 0.5)

AIC(lr, qm50)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     df      AIC
lr    3 2897.351
qm50  2 2827.260&lt;/code&gt;&lt;/pre&gt;
&lt;h1
id="solve-not-normal-skewed-distribution-not-homogen-variances-across-groups-categorical-predictor"&gt;3.
Solve not-normal (skewed) distribution &amp;amp; not-homogen variances
across groups + categorical predictor&lt;/h1&gt;
&lt;p&gt;Now let’s see how both models handle not-normally distributed or
skewed data, and, at the same time, see how they handle categorical
predictors.&lt;/p&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-7-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;For that we’ll use a Wage dataset from {ISLR} package and model the
salary of 30 industrial and IT workers. And when we check the
assumptions of linear model, we’ll see, that our data has no outliers,
but is not-normality distributed and variances between groups differ, so
our data is again - heteroscedastic. And that’s a big problem, because
if SEVERAL assumption of a model fail, we CAN NOT trust the results of
such model.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# get not-normal data
library(ISLR)
set.seed(1) # for reproducibility
salary &amp;lt;- Wage %&amp;gt;% 
  group_by(jobclass) %&amp;gt;% 
  sample_n(30)

lr &amp;lt;- lm(wage ~ jobclass, data = salary)

check_outliers(lr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;OK: No outliers detected.
- Based on the following method and threshold: cook (0.5).
- For variable: (Whole model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;check_normality(lr) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Warning: Non-normality of residuals detected (p &amp;lt; .001).&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;check_homogeneity(lr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Warning: Variances differ between groups (Bartlett Test, p = 0.005).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(By the way, if we don’t specify any quantiles in quanlile
regression, the default 5th quantile or - median regression (tau = 0.5)
will be modeled.)&lt;/p&gt;
&lt;p&gt;And what are those results? Well, linear model reveals, that average
annual salary of IT workers is almost 37.000$ higher as compared to
industrial workers, and such big &lt;strong&gt;difference in means&lt;/strong&gt; is
significant. While median regression shows, that IT crowd earns only
19.6 thousand dollars more and this &lt;strong&gt;difference in
medians&lt;/strong&gt; is not significant.&lt;/p&gt;
&lt;p&gt;The lower AIC of the median regression again shows that QR performs
better then LR. So that, while in the case with outliers &lt;strong&gt;LR
missed an important discovery&lt;/strong&gt;, here &lt;strong&gt;LR discovered
nonsense&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# tau = .5 - or median regression is a default
mr &amp;lt;- rq(wage ~ jobclass, data = salary, tau = 0.5) 

plot_models(lr, mr, show.values = T, 
            m.labels = c(&amp;quot;Linear model&amp;quot;, &amp;quot;Median model&amp;quot;), 
            legend.title = &amp;quot;Model type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-9-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;AIC(lr, mr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   df      AIC
lr  3 630.4943
mr  2 614.7647&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such nonsense is often caused by small samples, and indeed, if we
take all 3000 workers from Wage dataset, we’ll see that both models show
significantly higher salary of IT crowd as compared with factory
workers. However, the median regression still shows a smaller difference
and a smaller AIC tells us that QR is still a better model, which makes
sense for not-normally distributed and heteroscedastic data. Now, let’s
finally get to the main advantage of QR. (halliluja)&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;lr &amp;lt;- lm(wage ~ jobclass, data = Wage)
mr &amp;lt;- rq(wage ~ jobclass, data = Wage)

plot_models(lr, mr, show.values = T, 
            m.labels = c(&amp;quot;Linear model&amp;quot;, &amp;quot;Median model&amp;quot;), 
            legend.title = &amp;quot;Model type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-10-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;AIC(lr, mr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   df      AIC
lr  3 30774.50
mr  2 30248.76&lt;/code&gt;&lt;/pre&gt;
&lt;h1
id="model-more-then-just-mean-or-just-median---model-several-quantiles"&gt;4.
Model more then just mean or just median - model several quantiles&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;# model several quantiles
library(ggridges)
ggplot(Wage, aes(x = wage, y = jobclass, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = &amp;quot;density_ridges_gradient&amp;quot;, calc_ecdf = TRUE,
    quantile_lines = TRUE, quantiles = c(.1, .5, .9)
  ) +
  scale_fill_viridis_d(name = &amp;quot;Quantiles&amp;quot;)+
  xlab(&amp;quot;salary&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-11-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;While median regression delivers better results, the median is still
a single central location, similar to the mean. But since median
regression is a special case of QR, which uses only a 5th quantile, and
since QR can easily model other quantiles too, a QR allows you to easily
model low and high salaries! In other words, QR can be extended to
noncentral locations. Namely, if we take a low quantile, for example 0.1
instead of 0.5, we’ll model the difference between low income factory
and low income IT workers. Similarly, if we take a high quantile, for
example 0.9 instead of 0.5, we’ll be able to check the difference
between top salaries of industrial vs. top salaries of IT workers.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;lr   &amp;lt;- lm(wage ~ jobclass, data = Wage)
qm10 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.10)
qm50 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.50)
qm90 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.90)

plot_models(lr, qm10, qm50, qm90,
            show.values = TRUE,
            m.labels = c(&amp;quot;LR&amp;quot;, &amp;quot;QR 10%&amp;quot;, &amp;quot;QR 50%&amp;quot;, &amp;quot;QR 90%&amp;quot;), 
            legend.title = &amp;quot;Model type&amp;quot;)+
  ylab(&amp;quot;Increase in wage after switch to IT&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-12-1.png" width="672" /&gt;
The results show, that for low salaries the difference between
industrial and IT jobs is smaller, then for median or high salaries. The
reason for that could be education, so that when your education level is
low, switching jobs from factory to IT would only increase your salary
by ca. 8.000 bucks, while when you have a college degree, changing to IT
will increase your salary by over 25.000 bucks. However, the reason
itself is not important. What is important here, is that, while ordinary
linear regression describes only an average change in salaries when we
switch from industrial to IT job, quantile regression uncovers what
happen after you switch jobs having low, median or high salary. In other
words, &lt;strong&gt;a new salary after switching jobs depends on the salary
before switching&lt;/strong&gt;, which makes sense. But what doesn’t make any
sense is that, an ordinary linear regression over-promises increase in
salary for low earners and under-promises increase in salary for high
earners. Thus, QR reveals a &lt;strong&gt;more complete picture of
reality&lt;/strong&gt;, and allows you to make a more informed decision.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ggridges)
ggplot(Wage, aes(x = wage, y = jobclass, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = &amp;quot;density_ridges_gradient&amp;quot;, calc_ecdf = TRUE,
    quantile_lines = TRUE, quantiles = seq(.1, .9, by = 0.1)
  ) +
  scale_fill_viridis_d(name = &amp;quot;Quantiles&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-13-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;qm20 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.20)
qm30 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.30)
qm70 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.70)
qm80 &amp;lt;- rq(wage ~ jobclass, data = Wage, tau = 0.80)

plot_models(lr, qm10, qm20, qm30, qm50, qm70, qm80, qm90, show.values = TRUE)+
  theme(legend.position = &amp;quot;none&amp;quot;)+
  ylab(&amp;quot;Increase in wage after switch to IT&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-14-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;But that is just a beginning! Because, similarly to low (tau = 0.1)
or high (tau = 0.9) quantiles, we can model more quantile to get
&lt;strong&gt;more useful inference&lt;/strong&gt;. And we can even …&lt;/p&gt;
&lt;h1
id="model-the-entire-conditional-distribution-of-salaries-via-all-possible-quantiles"&gt;5.
Model &lt;strong&gt;the entire conditional distribution&lt;/strong&gt; of salaries
via all possible quantiles&lt;/h1&gt;
&lt;p&gt;… by defining the sequence of quantiles, from let’s say 0.1 to 0.9,
and defining the step, in order to control how many quantiles we model.
For example using “by = 0.1” will model 9 quantiles from 0.1 to 0.9.&lt;/p&gt;
&lt;p&gt;Plotting the summary of our model (a quantile process plot) uncovers
how switching to IT affects &lt;strong&gt;the entire conditional
distribution&lt;/strong&gt; of salaries. The red lines show the mean effect
with confidence intervals estimated by linear regression. While shaded
gray area shows confidence intervals for the quantile regression
estimates. The non-overlapping confidence intervals between quantile and
linear regression can be seen as significant difference between models.
So that, linear regression significantly over-promises the increase in
salaries when you switch to IT for low and medium earners (if we ignore
the very small overlap from 0.3 to 0.6 quantiles), significantly
underestimates the increase in salary for top 10% earners, while
correctly describes the increase in salary for only a small part of
workers with already relatively high salaries.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;seq(0.1, 0.9, by = 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;q &amp;lt;- rq(wage ~ jobclass, data = Wage, 
        tau = seq(0.1, 0.9, by = 0.1))

summary(q) %&amp;gt;% 
  plot(parm = &amp;quot;jobclass2. Information&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-15-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="multivariable-regression"&gt;6. Multivariable regression&lt;/h1&gt;
&lt;p&gt;So, I think a univariable QR is already much more useful then LR. But
that’s not all, multivariable QR is even more useful, because it can
uncover which variables are important for low or for high values of the
response variable.&lt;/p&gt;
&lt;p&gt;Let’s have a look at two multivariable examples.&lt;/p&gt;
&lt;h2 id="american-salaries"&gt;1) American salaries&lt;/h2&gt;
&lt;p&gt;In the first example we’ll continue to model salaries, but instead of
only a “jobclass” predictor, we’ll add “age” and “race” predictors.&lt;/p&gt;
&lt;p&gt;Let’s interpret the influence of “age” on salary first. The young low
earners would significantly increase their salaries as they age, because
y-axis, which shows the slope of this increase, is positive and does not
include zero. However, this realistic increase over lifetime is
significantly smaller then average, promised by the linear regression,
because red and gray confidence intervals don’t overlap. The young high
earners have much higher slope, meaning much stronger increase in salary
over lifetime, which was significantly underestimated by the linear
regression. Here again, high educational degree could cause young people
to earn a lot of money already in the beginning of their lives, and
opens better chances to increase the salary over lifetime.&lt;/p&gt;
&lt;p&gt;The interpretation of the categorical predictor “race” is even more
interesting. Since “White” people are the intercept, “Black”- and
“Asian-Americans” can be compared to “White” Americans. Here, linear
regression shows that on average for low income folks, Black people earn
significantly less then White people, because the coefficient is
negative and does not cross the zero, which is wrong. Because, in
reality, since gray confidence intervals cross the zero, there is no
significant difference between White and Black folks with low income. In
contrast, when salaries are high, Black workers earn significantly less
then White workers, even when they earn millions.&lt;/p&gt;
&lt;p&gt;The wages of Asian Americans show the opposite. Namely, while linear
regression mistakenly predicts that Asian folks get significantly more
then White folks, independently of their salary, QR shows that low
income Asian people earn significantly less or similar to White
people.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# multivariable regression
q &amp;lt;- rq(wage ~ jobclass + age + race, data = Wage, 
        tau = seq(.05, .95, by = 0.05))

summary(q) %&amp;gt;% 
  plot(c(&amp;quot;jobclass2. Information&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;race2. Black&amp;quot;, &amp;quot;race3. Asian&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-16-1.png" width="672" /&gt;
Since, in all of the panels of the plot, the quantile regression
estimates lie at some point outside the confidence intervals for the
ordinary least squares regression, we can conclude that the effects of
“jobclass”, “age” and “race” are not constant across salaries, but
depends on a height of the salary.&lt;/p&gt;
&lt;p&gt;And if that’s not enough, you can go one step further and conduct a
…&lt;/p&gt;
&lt;h3 id="nonparametric-non-linear-quantile-regression"&gt;Nonparametric
non-linear quantile regression&lt;/h3&gt;
&lt;p&gt;… for numeric predictors using {quantregGrowth} package. But before
you do that, have a look at the last example where we check the
influence of 5 predictors on the efficiency of cars.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# non-linear quantile regression
library(quantregGrowth)
set.seed(1)
o &amp;lt;-gcrq(wage ~ ps(age), 
         data = Wage %&amp;gt;% sample_n(100), tau=seq(.10,.90,l=3))

# par(mfrow=c(1,2)) # for several plots
plot(o, legend=TRUE, conf.level = .95, shade=TRUE, lty = 1, lwd = 3, col = -1, res=TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-17-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h2 id="efficiency-of-cars"&gt;2) Efficiency of cars&lt;/h2&gt;
&lt;p&gt;Here, a linear regression will answer the question - which variables
affect the average car mileage? A low quantile of 0.1 will tell us which
predictors are important for not efficient cars, which drive only a few
miles per gallon of gas. A high quantile of 0.9 will tell us which
predictors are important for highly efficient cars, which drive a lot of
miles per gallon of gas. We’ll also conduct a median regression in order
to compare it to LR and for a &lt;strong&gt;more complete presentation of the
results&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s start with that. The negative coefficient of “horsepower”
indicates significant decrease in efficiency of cars with increasing
horsepower. Both, mean-based and median-based models agree on that.
However, while linear regression reports “Engine displacement” to be
not-important for efficiency, median regression shows that it is
important. Moreover, quantile regression reports that increasing
acceleration significantly reduces mileage of not-efficient cars and has
no effect on highly efficient cars, while linear regression can’s say
anything about low or highly efficient cars.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cars &amp;lt;- Auto %&amp;gt;% 
  select(mpg, cylinders, displacement, horsepower, acceleration, origin)

l   &amp;lt;- lm(mpg ~ ., data = cars)
q10 &amp;lt;- rq(mpg ~ ., data = cars, tau = .1)
q50 &amp;lt;- rq(mpg ~ ., data = cars, tau = .5)
q90 &amp;lt;- rq(mpg ~ ., data = cars, tau = .9)

library(gtsummary) # I made a video on this 📦
tbl_merge(
    tbls = list(
      tbl_regression(l) %&amp;gt;% bold_p(),
      tbl_regression(q10, se = &amp;quot;nid&amp;quot;) %&amp;gt;% bold_p(), 
      tbl_regression(q50, se = &amp;quot;nid&amp;quot;) %&amp;gt;% bold_p(),
      tbl_regression(q90, se = &amp;quot;nid&amp;quot;) %&amp;gt;% bold_p()
),
    tab_spanner = c(&amp;quot;OLS&amp;quot;, &amp;quot;QR 10%&amp;quot;, &amp;quot;QR 50%&amp;quot;, &amp;quot;QR 90%&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div id="iluhdqiuau" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;"&gt;
&lt;style&gt;#iluhdqiuau table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#iluhdqiuau thead, #iluhdqiuau tbody, #iluhdqiuau tfoot, #iluhdqiuau tr, #iluhdqiuau td, #iluhdqiuau th {
  border-style: none;
}

#iluhdqiuau p {
  margin: 0;
  padding: 0;
}

#iluhdqiuau .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#iluhdqiuau .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#iluhdqiuau .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#iluhdqiuau .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#iluhdqiuau .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#iluhdqiuau .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#iluhdqiuau .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#iluhdqiuau .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#iluhdqiuau .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#iluhdqiuau .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#iluhdqiuau .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#iluhdqiuau .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#iluhdqiuau .gt_spanner_row {
  border-bottom-style: hidden;
}

#iluhdqiuau .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#iluhdqiuau .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#iluhdqiuau .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#iluhdqiuau .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#iluhdqiuau .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#iluhdqiuau .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#iluhdqiuau .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#iluhdqiuau .gt_row_group_first td {
  border-top-width: 2px;
}

#iluhdqiuau .gt_row_group_first th {
  border-top-width: 2px;
}

#iluhdqiuau .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#iluhdqiuau .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#iluhdqiuau .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#iluhdqiuau .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#iluhdqiuau .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#iluhdqiuau .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#iluhdqiuau .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#iluhdqiuau .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#iluhdqiuau .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#iluhdqiuau .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#iluhdqiuau .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#iluhdqiuau .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#iluhdqiuau .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#iluhdqiuau .gt_left {
  text-align: left;
}

#iluhdqiuau .gt_center {
  text-align: center;
}

#iluhdqiuau .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#iluhdqiuau .gt_font_normal {
  font-weight: normal;
}

#iluhdqiuau .gt_font_bold {
  font-weight: bold;
}

#iluhdqiuau .gt_font_italic {
  font-style: italic;
}

#iluhdqiuau .gt_super {
  font-size: 65%;
}

#iluhdqiuau .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#iluhdqiuau .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#iluhdqiuau .gt_indent_1 {
  text-indent: 5px;
}

#iluhdqiuau .gt_indent_2 {
  text-indent: 10px;
}

#iluhdqiuau .gt_indent_3 {
  text-indent: 15px;
}

#iluhdqiuau .gt_indent_4 {
  text-indent: 20px;
}

#iluhdqiuau .gt_indent_5 {
  text-indent: 25px;
}
&lt;/style&gt;
&lt;table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false"&gt;
  &lt;thead&gt;
    
    &lt;tr class="gt_col_headings gt_spanner_row"&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="2" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Characteristic&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Characteristic&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_center gt_columns_top_border gt_column_spanner_outer" rowspan="1" colspan="3" scope="colgroup" id="OLS"&gt;
        &lt;span class="gt_column_spanner"&gt;OLS&lt;/span&gt;
      &lt;/th&gt;
      &lt;th class="gt_center gt_columns_top_border gt_column_spanner_outer" rowspan="1" colspan="3" scope="colgroup" id="QR 10%"&gt;
        &lt;span class="gt_column_spanner"&gt;QR 10%&lt;/span&gt;
      &lt;/th&gt;
      &lt;th class="gt_center gt_columns_top_border gt_column_spanner_outer" rowspan="1" colspan="3" scope="colgroup" id="QR 50%"&gt;
        &lt;span class="gt_column_spanner"&gt;QR 50%&lt;/span&gt;
      &lt;/th&gt;
      &lt;th class="gt_center gt_columns_top_border gt_column_spanner_outer" rowspan="1" colspan="3" scope="colgroup" id="QR 90%"&gt;
        &lt;span class="gt_column_spanner"&gt;QR 90%&lt;/span&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr class="gt_col_headings"&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Beta&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Beta&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;95% CI&amp;lt;/strong&amp;gt;&amp;lt;span class=&amp;quot;gt_footnote_marks&amp;quot; style=&amp;quot;white-space:nowrap;font-style:italic;font-weight:normal;&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;"&gt;&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;p-value&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;p-value&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Beta&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Beta&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;95% CI&amp;lt;/strong&amp;gt;&amp;lt;span class=&amp;quot;gt_footnote_marks&amp;quot; style=&amp;quot;white-space:nowrap;font-style:italic;font-weight:normal;&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;"&gt;&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;p-value&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;p-value&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Beta&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Beta&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;95% CI&amp;lt;/strong&amp;gt;&amp;lt;span class=&amp;quot;gt_footnote_marks&amp;quot; style=&amp;quot;white-space:nowrap;font-style:italic;font-weight:normal;&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;"&gt;&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;p-value&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;p-value&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;Beta&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;Beta&lt;/strong&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;95% CI&amp;lt;/strong&amp;gt;&amp;lt;span class=&amp;quot;gt_footnote_marks&amp;quot; style=&amp;quot;white-space:nowrap;font-style:italic;font-weight:normal;&amp;quot;&amp;gt;&amp;lt;sup&amp;gt;1&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;"&gt;&lt;strong&gt;95% CI&lt;/strong&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/th&gt;
      &lt;th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="&amp;lt;strong&amp;gt;p-value&amp;lt;/strong&amp;gt;"&gt;&lt;strong&gt;p-value&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class="gt_table_body"&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;cylinders&lt;/td&gt;
&lt;td headers="estimate_1" class="gt_row gt_center"&gt;-0.88&lt;/td&gt;
&lt;td headers="ci_1" class="gt_row gt_center"&gt;-1.7, -0.05&lt;/td&gt;
&lt;td headers="p.value_1" class="gt_row gt_center" style="font-weight: bold;"&gt;0.037&lt;/td&gt;
&lt;td headers="estimate_2" class="gt_row gt_center"&gt;-0.29&lt;/td&gt;
&lt;td headers="ci_2" class="gt_row gt_center"&gt;-1.1, 0.51&lt;/td&gt;
&lt;td headers="p.value_2" class="gt_row gt_center"&gt;0.5&lt;/td&gt;
&lt;td headers="estimate_3" class="gt_row gt_center"&gt;-1.2&lt;/td&gt;
&lt;td headers="ci_3" class="gt_row gt_center"&gt;-1.8, -0.53&lt;/td&gt;
&lt;td headers="p.value_3" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_4" class="gt_row gt_center"&gt;-2.3&lt;/td&gt;
&lt;td headers="ci_4" class="gt_row gt_center"&gt;-3.2, -1.3&lt;/td&gt;
&lt;td headers="p.value_4" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;displacement&lt;/td&gt;
&lt;td headers="estimate_1" class="gt_row gt_center"&gt;-0.01&lt;/td&gt;
&lt;td headers="ci_1" class="gt_row gt_center"&gt;-0.03, 0.01&lt;/td&gt;
&lt;td headers="p.value_1" class="gt_row gt_center"&gt;0.3&lt;/td&gt;
&lt;td headers="estimate_2" class="gt_row gt_center"&gt;-0.02&lt;/td&gt;
&lt;td headers="ci_2" class="gt_row gt_center"&gt;-0.03, -0.01&lt;/td&gt;
&lt;td headers="p.value_2" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_3" class="gt_row gt_center"&gt;-0.01&lt;/td&gt;
&lt;td headers="ci_3" class="gt_row gt_center"&gt;-0.03, 0.00&lt;/td&gt;
&lt;td headers="p.value_3" class="gt_row gt_center" style="font-weight: bold;"&gt;0.037&lt;/td&gt;
&lt;td headers="estimate_4" class="gt_row gt_center"&gt;-0.01&lt;/td&gt;
&lt;td headers="ci_4" class="gt_row gt_center"&gt;-0.03, 0.01&lt;/td&gt;
&lt;td headers="p.value_4" class="gt_row gt_center"&gt;0.6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;horsepower&lt;/td&gt;
&lt;td headers="estimate_1" class="gt_row gt_center"&gt;-0.11&lt;/td&gt;
&lt;td headers="ci_1" class="gt_row gt_center"&gt;-0.14, -0.08&lt;/td&gt;
&lt;td headers="p.value_1" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_2" class="gt_row gt_center"&gt;-0.07&lt;/td&gt;
&lt;td headers="ci_2" class="gt_row gt_center"&gt;-0.12, -0.03&lt;/td&gt;
&lt;td headers="p.value_2" class="gt_row gt_center" style="font-weight: bold;"&gt;0.003&lt;/td&gt;
&lt;td headers="estimate_3" class="gt_row gt_center"&gt;-0.07&lt;/td&gt;
&lt;td headers="ci_3" class="gt_row gt_center"&gt;-0.10, -0.05&lt;/td&gt;
&lt;td headers="p.value_3" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_4" class="gt_row gt_center"&gt;-0.07&lt;/td&gt;
&lt;td headers="ci_4" class="gt_row gt_center"&gt;-0.10, -0.05&lt;/td&gt;
&lt;td headers="p.value_4" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;acceleration&lt;/td&gt;
&lt;td headers="estimate_1" class="gt_row gt_center"&gt;-0.39&lt;/td&gt;
&lt;td headers="ci_1" class="gt_row gt_center"&gt;-0.61, -0.17&lt;/td&gt;
&lt;td headers="p.value_1" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_2" class="gt_row gt_center"&gt;-0.44&lt;/td&gt;
&lt;td headers="ci_2" class="gt_row gt_center"&gt;-0.69, -0.18&lt;/td&gt;
&lt;td headers="p.value_2" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_3" class="gt_row gt_center"&gt;-0.54&lt;/td&gt;
&lt;td headers="ci_3" class="gt_row gt_center"&gt;-0.73, -0.34&lt;/td&gt;
&lt;td headers="p.value_3" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_4" class="gt_row gt_center"&gt;-0.11&lt;/td&gt;
&lt;td headers="ci_4" class="gt_row gt_center"&gt;-0.52, 0.31&lt;/td&gt;
&lt;td headers="p.value_4" class="gt_row gt_center"&gt;0.6&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td headers="label" class="gt_row gt_left"&gt;origin&lt;/td&gt;
&lt;td headers="estimate_1" class="gt_row gt_center"&gt;1.7&lt;/td&gt;
&lt;td headers="ci_1" class="gt_row gt_center"&gt;0.96, 2.4&lt;/td&gt;
&lt;td headers="p.value_1" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_2" class="gt_row gt_center"&gt;-0.08&lt;/td&gt;
&lt;td headers="ci_2" class="gt_row gt_center"&gt;-1.1, 0.89&lt;/td&gt;
&lt;td headers="p.value_2" class="gt_row gt_center"&gt;0.9&lt;/td&gt;
&lt;td headers="estimate_3" class="gt_row gt_center"&gt;2.1&lt;/td&gt;
&lt;td headers="ci_3" class="gt_row gt_center"&gt;1.1, 3.0&lt;/td&gt;
&lt;td headers="p.value_3" class="gt_row gt_center" style="font-weight: bold;"&gt;&lt;0.001&lt;/td&gt;
&lt;td headers="estimate_4" class="gt_row gt_center"&gt;1.9&lt;/td&gt;
&lt;td headers="ci_4" class="gt_row gt_center"&gt;0.72, 3.1&lt;/td&gt;
&lt;td headers="p.value_4" class="gt_row gt_center" style="font-weight: bold;"&gt;0.002&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
  
  &lt;tfoot class="gt_footnotes"&gt;
    &lt;tr&gt;
      &lt;td class="gt_footnote" colspan="13"&gt;&lt;span class="gt_footnote_marks" style="white-space:nowrap;font-style:italic;font-weight:normal;"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt; CI = Confidence Interval&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;se = "nid"&lt;/code&gt; argument produces 95% confidence
intervals and p-values, which allows to build this useful table. And if
you want to learn how to produce similar publication ready tables for
data summaries, results of statistical tests or models, check out my
video on {gtsummary} package.&lt;/p&gt;
&lt;h1 id="some-further-useful-things"&gt;7. Some further useful things&lt;/h1&gt;
&lt;h2 id="confidence-intervals"&gt;Confidence intervals&lt;/h2&gt;
&lt;p&gt;There are several ways to compute confidence intervals for quantile
regression. This can be specified using the &lt;code&gt;"se ="&lt;/code&gt; option
in the &lt;code&gt;summary()&lt;/code&gt; or &lt;code&gt;tbl_regression()&lt;/code&gt;
functions. The default value is &lt;code&gt;se="rank"&lt;/code&gt;, however, it does
not deliver p-values, while other options “nid”, “iid” (not good), “ker”
and “boot” do (type &lt;code&gt;?summary.rq&lt;/code&gt; for details). However,
using “boot” is recommended only with large data-sets.&lt;/p&gt;
&lt;h2 id="equality-of-slopes"&gt;Equality of slopes&lt;/h2&gt;
&lt;p&gt;Khmaladze [1981] introduced the tests of equality of slopes across
quantiles. Or &lt;code&gt;anova()&lt;/code&gt; can compare two (better) or more
slopes.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;KhmaladzeTest(wage ~ jobclass, data = Wage, 
              tau = seq(.05, .95, by = 0.05))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Test of H_0: location 

Joint Test Statistic: 0.06793593 

Component Test Statistics: 0.06793593 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;anova(qm10, qm50)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Quantile Regression Analysis of Deviance Table

Model: wage ~ jobclass
Joint Test of Equality of Slopes: tau in {  0.1 0.5  }

  Df Resid Df F value   Pr(&amp;gt;F)   
1  1     5999  6.6577 0.009896 **
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;anova(qm20, qm30, qm50, qm70)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Quantile Regression Analysis of Deviance Table

Model: wage ~ jobclass
Joint Test of Equality of Slopes: tau in {  0.2 0.3 0.5 0.7  }

  Df Resid Df F value Pr(&amp;gt;F)
1  3    11997  0.8401 0.4717&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="speed-up-the-model"&gt;Speed up the model&lt;/h2&gt;
&lt;p&gt;The default calculation method is &lt;code&gt;method = "br"&lt;/code&gt;. For
more than a few thousand observations it is worthwhile considering
&lt;code&gt;method = "fn"&lt;/code&gt;. For extremely large data sets use
&lt;code&gt;method = "pfn"&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="contrasts-in-median-regression"&gt;Contrasts in median
regression&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;mr &amp;lt;- rq(wage ~ education, data = Wage, tau = 0.5)

emmeans::emmeans(mr, pairwise ~ education, weights = &amp;quot;prop&amp;quot;, adjust = &amp;quot;bonferroni&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
 education          emmean   SE   df lower.CL upper.CL
 1. &amp;lt; HS Grad         81.3 1.79 2995     77.8     84.8
 2. HS Grad           94.1 1.13 2995     91.9     96.3
 3. Some College     104.9 1.34 2995    102.3    107.5
 4. College Grad     118.9 1.79 2995    115.4    122.4
 5. Advanced Degree  141.8 2.46 2995    136.9    146.6

Confidence level used: 0.95 

$contrasts
 contrast                             estimate   SE   df t.ratio
 1. &amp;lt; HS Grad - 2. HS Grad               -12.8 2.12 2995  -6.043
 1. &amp;lt; HS Grad - 3. Some College          -23.6 2.23 2995 -10.589
 1. &amp;lt; HS Grad - 4. College Grad          -37.6 2.53 2995 -14.853
 1. &amp;lt; HS Grad - 5. Advanced Degree       -60.5 3.04 2995 -19.867
 2. HS Grad - 3. Some College            -10.8 1.75 2995  -6.191
 2. HS Grad - 4. College Grad            -24.8 2.12 2995 -11.702
 2. HS Grad - 5. Advanced Degree         -47.7 2.71 2995 -17.585
 3. Some College - 4. College Grad       -14.0 2.24 2995  -6.244
 3. Some College - 5. Advanced Degree    -36.9 2.80 2995 -13.143
 4. College Grad - 5. Advanced Degree    -22.9 3.05 2995  -7.511
 p.value
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001
  &amp;lt;.0001

P value adjustment: bonferroni method for 10 tests &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot_model(mr, type = &amp;quot;pred&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$education&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-20-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h2 id="median-regression-with-interactions"&gt;Median regression with
interactions&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;mr &amp;lt;- rq(wage ~ education*jobclass, data = Wage, tau = 0.5)

emmeans::emmeans(mr, pairwise ~ jobclass|education, weights = &amp;quot;prop&amp;quot;, adjust = &amp;quot;fdr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$emmeans
education = 1. &amp;lt; HS Grad:
 jobclass       emmean   SE   df lower.CL upper.CL
 1. Industrial    81.3 1.60 2990     78.2     84.4
 2. Information   86.7 3.31 2990     80.2     93.2

education = 2. HS Grad:
 jobclass       emmean   SE   df lower.CL upper.CL
 1. Industrial    93.5 1.07 2990     91.4     95.6
 2. Information   95.2 2.07 2990     91.2     99.3

education = 3. Some College:
 jobclass       emmean   SE   df lower.CL upper.CL
 1. Industrial   102.9 1.65 2990     99.6    106.1
 2. Information  105.9 1.69 2990    102.6    109.2

education = 4. College Grad:
 jobclass       emmean   SE   df lower.CL upper.CL
 1. Industrial   118.9 2.83 2990    113.3    124.4
 2. Information  118.9 2.31 2990    114.3    123.4

education = 5. Advanced Degree:
 jobclass       emmean   SE   df lower.CL upper.CL
 1. Industrial   134.7 6.82 2990    121.3    148.1
 2. Information  141.8 2.83 2990    136.2    147.3

Confidence level used: 0.95 

$contrasts
education = 1. &amp;lt; HS Grad:
 contrast                       estimate   SE   df t.ratio p.value
 1. Industrial - 2. Information    -5.41 3.68 2990  -1.472  0.1412

education = 2. HS Grad:
 contrast                       estimate   SE   df t.ratio p.value
 1. Industrial - 2. Information    -1.74 2.33 2990  -0.750  0.4536

education = 3. Some College:
 contrast                       estimate   SE   df t.ratio p.value
 1. Industrial - 2. Information    -3.06 2.36 2990  -1.294  0.1959

education = 4. College Grad:
 contrast                       estimate   SE   df t.ratio p.value
 1. Industrial - 2. Information     0.00 3.66 2990   0.000  1.0000

education = 5. Advanced Degree:
 contrast                       estimate   SE   df t.ratio p.value
 1. Industrial - 2. Information    -7.07 7.38 2990  -0.958  0.3383&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot_model(mr, type = &amp;quot;int&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-21-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h2 id="bayesian-median-regression"&gt;Bayesian median regression&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(brms)

d &amp;lt;- tibble(
  predictor = c(  1,   2,   3,  4,   5,   6,   7),
  outcome   = c(1.5, 2.3, 2.8,  4.1, 5.3, 0, 6.8)
)

mr &amp;lt;- brm(
  bf(outcome ~ predictor,
     quantile = 0.5),
  data = d, iter = 2000, warmup = 1000, chains = 4, refresh = 0,
  family = asym_laplace(link_quantile = &amp;quot;identity&amp;quot;)
)

mr2 &amp;lt;- quantreg::rq(outcome ~ predictor, data = d, tau = .5)

fitted_brm &amp;lt;- fitted(mr, dpar = &amp;quot;mu&amp;quot;)

ggplot(d, aes(predictor, outcome)) + 
  geom_point() + 
  geom_ribbon(aes(ymin = fitted_brm[,3], ymax = fitted_brm[,4], fill = &amp;#39;brm&amp;#39;), alpha = 0.2) +
  geom_line(aes(y = fitted(mr2), color = &amp;quot;rq&amp;quot;)) + 
  geom_line(aes(y = fitted_brm[,1], color = &amp;quot;brm&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-22-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h2 id="lqmm-package-fitting-linear-quantile-mixed-models"&gt;{lqmm}
package: Fitting Linear Quantile Mixed Models&lt;/h2&gt;
&lt;h3 id="random-intercept-model"&gt;Random intercept model&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(lqmm)
data(Orthodont)
rim &amp;lt;- lqmm(distance ~ age, random = ~ 1, group = Subject,
tau = c(0.1,0.5,0.9), data = Orthodont)
summary(rim)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Call: lqmm(fixed = distance ~ age, random = ~1, group = Subject, tau = c(0.1, 
    0.5, 0.9), data = Orthodont)

tau = 0.1

Fixed effects:
                Value Std. Error lower bound upper bound  Pr(&amp;gt;|t|)
(Intercept) 16.733609   0.763980   15.198334     18.2689 &amp;lt; 2.2e-16
age          0.522199   0.062525    0.396551      0.6478 5.563e-11
               
(Intercept) ***
age         ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

tau = 0.5

Fixed effects:
                Value Std. Error lower bound upper bound  Pr(&amp;gt;|t|)
(Intercept) 16.811968   0.762259   15.280150     18.3438 &amp;lt; 2.2e-16
age          0.618802   0.069988    0.478157      0.7594 1.017e-11
               
(Intercept) ***
age         ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

tau = 0.9

Fixed effects:
                Value Std. Error lower bound upper bound  Pr(&amp;gt;|t|)
(Intercept) 16.826789   0.763037   15.293408     18.3602 &amp;lt; 2.2e-16
age          0.796190   0.088709    0.617923      0.9745 6.417e-12
               
(Intercept) ***
age         ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

AIC:
[1] 476.0 (df = 4) 432.2 (df = 4) 485.4 (df = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="random-slope-model"&gt;Random slope model&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;rsm &amp;lt;- lqmm(distance ~ age, random = ~ age, group = Subject,
tau = c(0.1,0.5,0.9), cov = &amp;quot;pdDiag&amp;quot;, data = Orthodont)
summary(rsm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Call: lqmm(fixed = distance ~ age, random = ~age, group = Subject, 
    covariance = &amp;quot;pdDiag&amp;quot;, tau = c(0.1, 0.5, 0.9), data = Orthodont)

tau = 0.1

Fixed effects:
                Value Std. Error lower bound upper bound Pr(&amp;gt;|t|)    
(Intercept) 16.742845   0.941291   14.851249     18.6344  &amp;lt; 2e-16 ***
age          0.570874   0.308036   -0.048148      1.1899  0.06987 .  
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

tau = 0.5

Fixed effects:
               Value Std. Error lower bound upper bound  Pr(&amp;gt;|t|)    
(Intercept) 16.76179    0.94237    14.86801     18.6556 &amp;lt; 2.2e-16 ***
age          0.65987    0.10140     0.45611      0.8636  3.84e-08 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

tau = 0.9

Fixed effects:
               Value Std. Error lower bound upper bound  Pr(&amp;gt;|t|)    
(Intercept) 16.79738    0.93414    14.92015     18.6746 &amp;lt; 2.2e-16 ***
age          0.62056    0.11194     0.39560      0.8455 1.172e-06 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

AIC:
[1] 529.0 (df = 5) 510.9 (df = 5) 475.0 (df = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="final-thoughs"&gt;Final thoughs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the QR can be applied in any case where relationships for
different levels of response variable are needed to be addressed
differently&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the more data you have, the more details QR can capture from the
conditional distribution of response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;splitting a sample into several small dataset (low values of
outcome, high values of the outcome) and using LR on them reduces
statistical power. Besides, the results could differ depending on where
the cut point (e.g. for low values) is set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the interquantile range can be easily modeled and plotted with QR
(i.e., .25, .50, .75), like a &lt;strong&gt;fancy box-plot for continuous
variables&lt;/strong&gt; :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;set.seed(1)
o &amp;lt;-gcrq(wage ~ ps(age), 
         data = Wage %&amp;gt;% sample_n(1000), tau=seq(.25,.75,l=3))

# par(mfrow=c(1,2)) # for several plots
plot(o, legend=TRUE, conf.level = .95, shade=TRUE, lty = 1, lwd = 3, col = -1, res=TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf3c086d6_files/figure-html/unnamed-chunk-25-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="references-and-further-readings"&gt;References and further
readings&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The best introduction to QR!!! &lt;a
href="https://books.google.de/books?id=Oc91AwAAQBAJ&amp;amp;printsec=frontcover&amp;amp;hl=de&amp;amp;source=gbs_ge_summary_r&amp;amp;cad=0#v=onepage&amp;amp;q&amp;amp;f=false"
class="uri"&gt;https://books.google.de/books?id=Oc91AwAAQBAJ&amp;amp;printsec=frontcover&amp;amp;hl=de&amp;amp;source=gbs_ge_summary_r&amp;amp;cad=0#v=onepage&amp;amp;q&amp;amp;f=false&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quantile Regression Lingxin Hao - Johns Hopkins University, USA
Daniel Q. Naiman - The Johns Hopkins University&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I loved this paper too! But, be careful about their
interpretation using “gap”, it is confusing and might be incorrect, as
shown in the next reference: &lt;a
href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4166511/pdf/nihms529550.pdf"
class="uri"&gt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4166511/pdf/nihms529550.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commentary to the reference above with some corrections, among
which the most important one - is that we can interpret the coefficients
of QR as we do with OLS (page 9): &lt;a
href="https://srcd.onlinelibrary.wiley.com/doi/10.1111/cdev.13141"
class="uri"&gt;https://srcd.onlinelibrary.wiley.com/doi/10.1111/cdev.13141&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.econ.uiuc.edu/~roger/research/rq/QRJEP.pdf"
class="uri"&gt;http://www.econ.uiuc.edu/~roger/research/rq/QRJEP.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.econ.uiuc.edu/~roger/research/rq/QReco.pdf"
class="uri"&gt;http://www.econ.uiuc.edu/~roger/research/rq/QReco.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>98fde0a80ea80a621f42e465d8b56a72</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-12-01-quantileregression</guid>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-12-01-quantileregression/thumbnail_quantile_regression.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Robust Regression (don't depend on influential data!)</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-09-02-robustregression</link>
      <description>


&lt;h1 id="this-post-as-a-video"&gt;This post as a video&lt;/h1&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s less then 5 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/M_7MOkAm9WU" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/unnamed-chunk-2-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="make-sure-you-have-unusual-data"&gt;Make sure you have unusual
data&lt;/h1&gt;
&lt;p&gt;For the sake of simplicity let’s take only 5 observations with one
obvious outlier.&lt;/p&gt;
&lt;p&gt;First of all, how do we know that we have influential observations?
Well, plotting the raw data sometimes helps, but if you have a lot of
data and many predictors, &lt;strong&gt;the best way to find unusual data
is&lt;/strong&gt; to conduct a linear regression and to run &lt;strong&gt;residuals
diagnostics&lt;/strong&gt;. &lt;code&gt;ols_plot_resid_lev()&lt;/code&gt; function from
{olsrr} package displays all contaminations of data on a single plot. In
our case it finds observation 4 to be an obvious outlier.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# 1. create data
library(tidyverse)
d &amp;lt;- tibble(
  predictor = c(  1,   2,   3,  4,   5),
  outcome   = c(0.8, 2.3, 2.8,  0, 5.3)
)

plot(d)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/unnamed-chunk-3-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# 2. run ordinary least squares regression
m &amp;lt;- lm(outcome ~ predictor, data= d)

# 3.make residual diagnostics
library(olsrr)
ols_plot_resid_lev(m)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/unnamed-chunk-3-2.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="perform-robust-regression"&gt;Perform robust regression&lt;/h1&gt;
&lt;p&gt;Now, we’ll use &lt;code&gt;lmrob()&lt;/code&gt; function form {robustbase}
package to conduct the robust regression and have a look at the
&lt;code&gt;summary()&lt;/code&gt; and residuals plot of the model, because they
explain how robust regression actually works.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# 4. conduct robust regression
library(robustbase)
rm &amp;lt;- lmrob(outcome ~ predictor, data = d)

summary(rm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
Call:
lmrob(formula = outcome ~ predictor, data = d)
 \--&amp;gt; method = &amp;quot;MM&amp;quot;
Residuals:
       1        2        3        4        5 
-0.09832  0.31533 -0.27102 -4.15738  0.05627 

Coefficients:
            Estimate Std. Error t value Pr(&amp;gt;|t|)    
(Intercept) -0.18804    0.18312  -1.027     0.38    
predictor    1.08635    0.03763  28.873 9.12e-05 ***
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1

Robust residual standard error: 0.6541 
Multiple R-squared:  0.9791,    Adjusted R-squared:  0.9721 
Convergence in 5 IRWLS iterations

Robustness weights: 
     1      2      3      4      5 
0.9979 0.9789 0.9844 0.0000 0.9993 
Algorithmic parameters: 
       tuning.chi                bb        tuning.psi 
        1.548e+00         5.000e-01         4.685e+00 
       refine.tol           rel.tol         scale.tol 
        1.000e-07         1.000e-07         1.000e-10 
        solve.tol       eps.outlier             eps.x 
        1.000e-07         2.000e-02         9.095e-12 
warn.limit.reject warn.limit.meanrw 
        5.000e-01         5.000e-01 
     nResample         max.it       best.r.s       k.fast.s 
           500             50              2              1 
         k.max    maxit.scale      trace.lev            mts 
           200            200              0           1000 
    compute.rd fast.s.large.n 
             0           2000 
                  psi           subsampling                   cov 
           &amp;quot;bisquare&amp;quot;         &amp;quot;nonsingular&amp;quot;         &amp;quot;.vcov.avar1&amp;quot; 
compute.outlier.stats 
                 &amp;quot;SM&amp;quot; 
seed : int(0) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(sjPlot)
plot_residuals(m)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/unnamed-chunk-4-1.png" width="672" /&gt;&lt;/p&gt;
&lt;h1 id="how-and-why-does-robust-regression-works"&gt;How and why does
robust regression works?&lt;/h1&gt;
&lt;p&gt;Namely, a robust regression gives different &lt;strong&gt;robustness
weights&lt;/strong&gt;, from 0 to 1, to every observation based on it’s
residual. Where a residual is simply the differences between observed
and predicted values of data. So, the smaller the residual, the larger
the weight. For example, observations 1 and 3 have the smallest
residuals and therefore the highest weight, which means - they have the
strongest influence on our model. And while all observations with a
non-zero residual get down-weighted at least a little, our outlier gets
down-weighting the most … to … actually zero, so that our outlier has
zero influence on our model, which in fact makes our model ROBUST.&lt;/p&gt;
&lt;p&gt;The assignment of weight happens by &lt;strong&gt;Iteratively ReWeighting
Least Squares (IRWLS)&lt;/strong&gt;, thus we have to make sure, robust
regression algorithm converged. In our case, the model converged in only
a few iterations.&lt;/p&gt;
&lt;p&gt;But why don’t we just remove outliers and run a normal linear model,
right? Well, in most of the cases it’s a bad idea, because we’ll loose
information. For example in our case of 5 observations, we’d loose 20%
of data. In contrast, robust regression still squizzes some knowledge
out of unusual data, but lowers their weight which does not let unusual
data to influence our regression to much. Now lets …&lt;/p&gt;
&lt;h1 id="compare-both-models-and-choose-the-best"&gt;Compare both models and
choose the best&lt;/h1&gt;
&lt;p&gt;First, &lt;code&gt;plot_model()&lt;/code&gt; command from {sjPlot} package easily
visualizes predictions of both models.&lt;/p&gt;
&lt;p&gt;The ordinary linear model shows no trend. However, the absence of a
trend may only be caused by the outlier N°4, which drags the line down
and widens the confidence intervals, making us less confident in our
results. In contrast, a robust regression ignores the outlier and shows
a clear trend with a narrow confidence intervals.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# 5. visualize both models
plot_model(m,  type = &amp;quot;pred&amp;quot;, show.data = T)
plot_model(rm, type = &amp;quot;pred&amp;quot;, show.data = T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, &lt;code&gt;tab_model()&lt;/code&gt; command from {sjPlot} package
shows that a robust model has much higher coefficient of determination
&lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt;, which means that robust model
fits the data much better then the ordinary model. And finally, we can
see that the results can be dramatically different. Namely, a slope is
significant in a robust regression, while not significant in the
ordinary linear model, indicating that ordinary model (1) was soo
heavily biased by the outlier, (2) that it produced a wrong result, (3)
which made me miss an important discovery (4) and never win a Nobel
Price ;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$predictor&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$predictor&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/figures-side2-1.png" width="50%" /&gt;&lt;img src="file3ddf1bec997f_files/figure-html/figures-side2-2.png" width="50%" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# 6. compare coefficients and goodness of fit of both models
tab_model(m)&lt;/code&gt;&lt;/pre&gt;
&lt;table style="border-collapse:collapse; border:none;"&gt;
&lt;tr&gt;
&lt;th style="border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; "&gt;
 
&lt;/th&gt;
&lt;th colspan="3" style="border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; "&gt;
Dependent variable
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; "&gt;
Predictors
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
Estimates
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
CI
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
p
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; "&gt;
(Intercept)
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.23
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
-6.52 – 6.98
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.921
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; "&gt;
predictor
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.67
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
-1.37 – 2.71
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.372
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;"&gt;
Observations
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;" colspan="3"&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;"&gt;
R&lt;sup&gt;2&lt;/sup&gt; / R&lt;sup&gt;2&lt;/sup&gt; adjusted
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;" colspan="3"&gt;
0.268 / 0.024
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;pre class="r"&gt;&lt;code&gt;tab_model(rm)&lt;/code&gt;&lt;/pre&gt;
&lt;table style="border-collapse:collapse; border:none;"&gt;
&lt;tr&gt;
&lt;th style="border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; "&gt;
 
&lt;/th&gt;
&lt;th colspan="3" style="border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; "&gt;
Dependent variable
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; "&gt;
Predictors
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
Estimates
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
CI
&lt;/td&gt;
&lt;td style=" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  "&gt;
p
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; "&gt;
(Intercept)
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
-0.19
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
-0.77 – 0.39
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.380
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; "&gt;
predictor
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
1.09
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
0.97 – 1.21
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  "&gt;
&lt;strong&gt;&amp;lt;0.001&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;"&gt;
Observations
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;" colspan="3"&gt;
5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;"&gt;
R&lt;sup&gt;2&lt;/sup&gt; / R&lt;sup&gt;2&lt;/sup&gt; adjusted
&lt;/td&gt;
&lt;td style=" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;" colspan="3"&gt;
0.979 / 0.972
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, having robust regression in your statistical toolbox will already
step up your data-science game, but robust regression does not save you
from violations of other model assumptions, which you definitely need to
check, otherwise you might again get a completely wrong result.
Fortunately, there is only &lt;strong&gt;one function&lt;/strong&gt; which
&lt;strong&gt;checks and visualizes all the assumptions of any model at
once&lt;/strong&gt; which you can learn more about from &lt;a
href="https://youtu.be/EPIxQ5i5oxs"&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="works-also-in-a-complicated-model"&gt;Works also in a complicated
model&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(carData)
cm &amp;lt;- lm(prestige ~ income * education, data = Duncan)
ols_plot_resid_lev(cm)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/unnamed-chunk-5-1.png" width="672" /&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;crm &amp;lt;- lmrob(prestige ~ income * education, data = Duncan)

library(performance)
compare_performance(cm, crm, rank = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Comparison of Model Performance Indices

Name | Model |    R2 | R2 (adj.) |   RMSE |  Sigma | Performance-Score
----------------------------------------------------------------------
crm  | lmrob | 0.885 |     0.876 | 13.506 | 10.170 |            75.00%
cm   |    lm | 0.829 |     0.816 | 12.895 | 13.509 |            25.00%&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="there-are-further-packages-for-robust-regression-but"&gt;There are
further packages for robust regression, but…&lt;/h1&gt;
&lt;p&gt;MASS::rlm() does not provide &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt;
while robust::lmRob() does not provide info on outliers and has a
smaller &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt;. There are also other
options to conduct a non-parametric regression, like least trimmed
squares, quantile regression or bootstrapped regression. But, while all
of them have merits, I personally decided to always use
robustbase::lmrob() if I have unsual data.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;rm2 &amp;lt;- MASS::rlm(outcome ~ predictor, data= d)
rm3 &amp;lt;- robust::lmRob(outcome ~ predictor, data= d)

plot_model(rm2, type = &amp;quot;pred&amp;quot;, show.data = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$predictor&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot_model(rm3, type = &amp;quot;pred&amp;quot;, show.data = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$predictor&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf1bec997f_files/figure-html/figures-side4-1.png" width="50%" /&gt;&lt;img src="file3ddf1bec997f_files/figure-html/figures-side4-2.png" width="50%" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>eac1c282851219989ca8486736109c62</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>visualization</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-09-02-robustregression</guid>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-09-02-robustregression/thumbnail_robust.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {glmulti} find the best model!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-05-31-glmulti</link>
      <description>


&lt;h2 id="this-post-as-a-video"&gt;This post as a video&lt;/h2&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about. It’s less then 14 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/Im293ClFen4" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="why-do-we-need-glmulti"&gt;Why do we need {glmulti}?&lt;/h2&gt;
&lt;p&gt;The goal of ANY model is to explain a dependent variable by several
independent variables, sometimes called predictors. But which predictors
are useful(?) and how many should we include into our model(?), is
usually unknown. These questions are important, because if we take to
many predictors, we’ll overfit the model and explain the noise in the
data instead of uncovering true relationships. While, if we include only
a few predictors into our model, we’ll underfit the model and probably
miss some potentially important relationships. Thus, we need to find
&lt;strong&gt;THE BEST&lt;/strong&gt; model, with an &lt;strong&gt;optimal set of
predictors which explains maximum of our dependent variable, without
explaining the noise&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-05-31-glmulti/fit.png" /&gt;&lt;/p&gt;
&lt;h2 id="stepwise-variable-selection-approach"&gt;Stepwise variable
selection approach&lt;/h2&gt;
&lt;p&gt;One of the most common solutions for finding &lt;strong&gt;THE
BEST&lt;/strong&gt; model is &lt;strong&gt;a stepwise variable selection.&lt;/strong&gt;
But it’s not the best solution out there, and here is why. Stepwise
selection applies two main techniques: forwards and backwards selection.
Forwards selection starts with an empty model, adds one predictor,
compares two models, one with and another without this predictor, takes
the best model of the two, adds another predictor etc… Backwards
selection starts with the most complicated model, which includes all
predictors and interactions, and reduces the number of terms one by one.
But there are two problems with it. First, &lt;strong&gt;forwards and
backwards approaches would often not converge to the same
model&lt;/strong&gt;, like in our example. And secondly, even if they converge
to the same model, this model might not be the optimal one (gray circle
on the picture below). These problems occur simply because stepwise
selection doesn’t look at &lt;strong&gt;all possible models at the same
time&lt;/strong&gt;. They just remove or add terms one by one, compare two
models, take the best model of the two, remove or add another term
etc..&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-05-31-glmulti/stepwise_problem.png" /&gt;&lt;/p&gt;
&lt;p&gt;Load all needed packages at once, to avoid interruptions.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(car)        # extracts model results
library(MASS)       # provides &amp;quot;birthwt&amp;quot; dataset
library(ISLR)       # provides &amp;quot;Wage&amp;quot; dataset
library(tictoc)     # checks running time
library(sjPlot)     # visualizes model results
library(glmulti)    # finds the BEST model
library(flextable)  # beautifies tables
library(tidyverse)  # provides a lot of useful stuff !!! 
library(performance)# checks and compares quality of models

theme_set(theme_light(base_size = 12)) # beautifies plots
theme_update(panel.grid.minor = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# prepare selection
full_model &amp;lt;- glm(mpg ~ (hp + drat + wt + qsec + gear)^2, 
                 data = mtcars, family = gaussian)

null_model &amp;lt;- glm(mpg ~ 1, data = mtcars, family = gaussian)

# run stepwise selection
optimal_model_backward &amp;lt;- step(full_model, direction = &amp;quot;backward&amp;quot;,
                        scope = list(upper = full_model, lower = null_model))

optimal_model_forward &amp;lt;- step(null_model, direction = &amp;quot;forward&amp;quot;,
                        scope = list(upper = full_model, lower = null_model))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;# compare two final models
anova(optimal_model_backward, optimal_model_forward, test = &amp;quot;Chisq&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Analysis of Deviance Table

Model 1: mpg ~ hp + drat + wt + qsec + gear + hp:drat + hp:wt + hp:qsec + 
    hp:gear + drat:wt + drat:qsec + wt:qsec + wt:gear
Model 2: mpg ~ wt + hp + qsec + gear + wt:hp
  Resid. Df Resid. Dev Df Deviance Pr(&amp;gt;Chi)   
1        18      51.32                        
2        26     112.06 -8  -60.743  0.00638 **
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;compare_performance(optimal_model_backward, optimal_model_forward)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Comparison of Model Performance Indices

Name                   | Model | AIC (weights) | AICc (weights) | BIC (weights) |    R2 |  RMSE | Sigma
-------------------------------------------------------------------------------------------------------
optimal_model_backward |   glm | 135.9 (0.989) |  165.9 (&amp;lt;.001) | 157.9 (0.203) | 0.954 | 1.266 | 1.689
optimal_model_forward  |   glm | 144.9 (0.011) |  149.6 (&amp;gt;.999) | 155.2 (0.797) | 0.900 | 1.871 | 2.076&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="brute-force-approach-with-glmulti"&gt;“Brute force” approach with
{glmulti}&lt;/h2&gt;
&lt;p&gt;In contrast, {glmulti} R package builds &lt;strong&gt;all possible models
with all possible combinations of predictors and, optionally, even their
pairwise interactions&lt;/strong&gt;. Such approach was called “brute
force”.&lt;/p&gt;
&lt;p&gt;{glmulti} then compares the amount of useful information models
provide. Such model comparison is done with the help of information
criteria (IC), for example Akaike’s IC (aic) or Bayesian IC (bic).
Information criteria are used instead of other metrics, such as &lt;span
class="math inline"&gt;\(R^2\)&lt;/span&gt;, because they show the “fitness” of
the model, where this fitness is penalized by the number of predictors a
model incorporates. In contrast to information criteria, &lt;span
class="math inline"&gt;\(R^2\)&lt;/span&gt; will always increase with the
increasing number of terms and will eventually overfit the model. And as
mentioned before, an overfitted model is bad, because it describes the
noise rather than genuine relationships between variables. Consequently,
we can’t trust the coefficients and p-values of overfitted models.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-05-31-glmulti/bic_vs_r_squared.jpeg" style="width:50.0%" /&gt;&lt;/p&gt;
&lt;p&gt;This picture originates from &lt;a
href="https://www.igi-global.com/gateway/chapter/235052"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But that’s not all, overfitting produces another problem. Each sample
has its own unique quirks. Consequently, overfitted model that fits the
random quirks of one sample is unlikely to fit the random quirks of
another sample. That makes overfitted model less generalizable outside
the original dataset, and therefore less useful.&lt;/p&gt;
&lt;p&gt;That’s why we need to create &lt;strong&gt;all possible models&lt;/strong&gt;,
instead of using stepwise selection, and we need to compare models using
&lt;strong&gt;Information Criteria&lt;/strong&gt;, instead of &lt;span
class="math inline"&gt;\(R^2\)&lt;/span&gt;. And while “Brute force” approach is
great, the number of models to be considered can easily become
exorbitant. However, there are several possibilities to reduce the
number of models and to decrease calculation time. Let’s get into the
Code and see how to do that.&lt;/p&gt;
&lt;h2 id="how-to-compute-glmulti-to-find-the-best-model"&gt;How to compute
glmulti to find the best model&lt;/h2&gt;
&lt;p&gt;The code is similar to any other model, you use in R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first you have the &lt;strong&gt;formula&lt;/strong&gt; with the dependent
variable on the left side of the tilde (~), and all possible predictors
on the right side of the tilde. For this example we’ll study the salary
of 3000 american workers with 5 predictors: jobclass, education, age,
health and health-insurance&lt;/li&gt;
&lt;li&gt;then we’ll tell R which &lt;strong&gt;dataset&lt;/strong&gt; to use. In this
case we’ll use the “Wage” dataset from ISLR package&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;crit&lt;/strong&gt; specifies the &lt;strong&gt;Information
Criterion&lt;/strong&gt; to be used. Default is the Akaike IC (aic). Other
options are the Bayesian IC (bic), quasi-AIC for overdispersed or count
data (qaic and qaicc) and the small-sample corrected AIC (aicc), which I
personally prefer, because for big samples it always gets the same
result as Akaike’s IC, while with small samples it performs better&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;level&lt;/strong&gt; - argument is important! It specifies weather
all possible models supposed to be build without interactions (level =
1) or with interactions (level = 2)&lt;/li&gt;
&lt;li&gt;argument - &lt;strong&gt;method&lt;/strong&gt; - explores the candidate set of
models. Method = “d” counts the number of candidate models without
calculating anything. For our example of 5 predictors we’ll have 32
models without interactions and 1921 models with interactions. If method
= “h”, an &lt;strong&gt;exhaustive screening&lt;/strong&gt; is undertaken, which
means that all possible models will be created. If method = “g”, the
genetic algorithm is employed (recommended for large candidate
sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;glmulti(wage   ~ jobclass + education + age + health + health_ins,
        data   = Wage, 
        crit   = aicc,       # AICC corrected AIC for small samples
        level  = 1,          # 2 with interactions, 1 without  
        method = &amp;quot;d&amp;quot;,        # &amp;quot;d&amp;quot;, or &amp;quot;h&amp;quot;, or &amp;quot;g&amp;quot;
        family = gaussian, 
        fitfunction = glm,   # Type of model (LM, GLM etc.)
        confsetsize = 100)   # Keep 100 best models&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Initialization...
TASK: Diagnostic of candidate set.
Sample size: 3000
4 factor(s).
1 covariate(s).
0 f exclusion(s).
0 c exclusion(s).
0 f:f exclusion(s).
0 c:c exclusion(s).
0 f:c exclusion(s).
Size constraints: min =  0 max = -1
Complexity constraints: min =  0 max = -1
Your candidate set contains 32 models.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;glmulti(wage   ~ jobclass + education + age + health + health_ins,
        data   = Wage, 
        crit   = aicc,       # AICC corrected AIC for small samples
        level  = 2,          # 2 with interactions, 1 without  
        method = &amp;quot;d&amp;quot;,        # &amp;quot;d&amp;quot;, or &amp;quot;h&amp;quot;, or &amp;quot;g&amp;quot;
        family = gaussian, 
        fitfunction = glm,   # Type of model (LM, GLM, GLMER etc.)
        confsetsize = 100)   # Keep 100 best models&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Initialization...
TASK: Diagnostic of candidate set.
Sample size: 3000
4 factor(s).
1 covariate(s).
0 f exclusion(s).
0 c exclusion(s).
0 f:f exclusion(s).
0 c:c exclusion(s).
0 f:c exclusion(s).
Size constraints: min =  0 max = -1
Complexity constraints: min =  0 max = -1
Your candidate set contains 1921 models.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1921&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;you then specify the distribution &lt;strong&gt;family&lt;/strong&gt; and
the&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fitfunction&lt;/strong&gt;, where any function similar to
&lt;strong&gt;lm, glm or glmer&lt;/strong&gt; can be used&lt;/li&gt;
&lt;li&gt;lastly, &lt;strong&gt;confsetsize&lt;/strong&gt; argument allows you to keep a
particular number of the best models, so called - &lt;strong&gt;confident set
of best models&lt;/strong&gt;. One hundred - is a default value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, now let’s run the exhaustive algorithm and see how much time it
takes to compute 1921 regressions and to find the BEST model for our 5
predictors with interactions. “tic()” and “toc()” functions from
{tictoc} package would record running time for us.&lt;/p&gt;
&lt;p&gt;Fortunately, the exhaustive method took only 19 seconds. Not bad at
all, if you ask me. However, I usually have way more then five
predictors, which could cause performance problems. That’s why we need
to talk about the…&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;tic()

h_model &amp;lt;- glmulti(wage ~ jobclass + education + age + health + health_ins,
          data   = Wage, 
          crit   = aicc,       # AICC corrected AIC for small samples
          level  = 2,          # 2 with interactions, 1 without  
          method = &amp;quot;h&amp;quot;,        # &amp;quot;d&amp;quot;, or &amp;quot;h&amp;quot;, or &amp;quot;g&amp;quot;
          family = gaussian, 
          fitfunction = glm,   # Type of model (LM, GLM, GLMER etc.)
          confsetsize = 100)   # Keep 100 best models

toc() # 19 sec elapsed: 1921 models &lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="performance-impovement-techniques"&gt;Performance impovement
techniques&lt;/h2&gt;
&lt;h3 id="remove-unnecessary-terms"&gt;1. Remove unnecessary terms&lt;/h3&gt;
&lt;p&gt;And the first one is to remove all unnecessary predictors or
interactions. For example a &lt;em&gt;weight&lt;/em&gt; and &lt;em&gt;body mass index
(BMI)&lt;/em&gt; provide very similar information - the statisticians would
say - they are highly multicollinear. Anyway, if both, &lt;em&gt;weight&lt;/em&gt;
and &lt;em&gt;BMI&lt;/em&gt; are included, they would dramatically increase the
number of models without providing any value. Check this out, adding
only two additional categorical predictors (maritl &amp;amp; region) into
the Wage model above increases the number of models to over 2.5 millions
(2604485 to be exact, see below). And while it’s unimaginable to run so
many models in our life time, &lt;strong&gt;genetic algorithm&lt;/strong&gt;
provides a solution for it.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;glmulti(wage ~ jobclass + education + age + health + health_ins + maritl + region,
        data   = Wage, 
        crit   = aicc,       # AICC corrected AIC for small samples
        level  = 2,          # 2 with interactions, 1 without  
        method = &amp;quot;d&amp;quot;,        # &amp;quot;d&amp;quot;, or &amp;quot;h&amp;quot;, or &amp;quot;g&amp;quot;
        family = gaussian, 
        fitfunction = glm,   # Type of model (LM, GLM, GLMER etc.)
        confsetsize = 100,
        plotty=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Initialization...
TASK: Diagnostic of candidate set.
Sample size: 3000
6 factor(s).
1 covariate(s).
0 f exclusion(s).
0 c exclusion(s).
0 f:f exclusion(s).
0 c:c exclusion(s).
0 f:c exclusion(s).
Size constraints: min =  0 max = -1
Complexity constraints: min =  0 max = -1
Your candidate set contains 2604485 models.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 2604485&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="use-genetic-algorithm"&gt;2. Use genetic algorithm&lt;/h3&gt;
&lt;p&gt;Particularly, having 6 numeric predictors with interactions, the
“brute force” approach needs almost 3 hours, while genetic algorithm
runs only 40-80 seconds and produces almost identical results (with
sometimes slightly worse IC value).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;tic()

test_h &amp;lt;- glmulti(mpg ~ hp + drat + wt + qsec + gear, 
                 data   = mtcars, 
                 method = &amp;quot;h&amp;quot;,       # Exhaustive approach
                 crit   = aic,      # AICC corrected AIC for small samples
                 level  = 2,         # 2 with interactions, 1 without
                 family = gaussian,
                 fitfunction = glm,  # Type of model (LM, GLM, GLMER etc.)
                 confsetsize = 100)  # Keep 100 best models

toc() # 32768 models &amp;quot;h&amp;quot; takes 104-109 seconds
# 6 numeric predictors with interactions produces 2.097.152 models, and &amp;quot;h&amp;quot; method takes 9715.466 seconds or ca. 2.7 hours

tic()

test_g &amp;lt;- glmulti(mpg ~ hp + drat + wt + qsec + gear, 
                 data   = mtcars, 
                 method = &amp;quot;g&amp;quot;,       # genetic algorithm approach
                 crit   = aic,      # AICC corrected AIC for small samples
                 level  = 2,         # 2 with interactions, 1 without
                 family = gaussian,
                 fitfunction = glm,  # Type of model (LM, GLM, GLMER etc.)
                 confsetsize = 100)  # Keep 100 best models

toc() # 32768 models &amp;quot;g&amp;quot; takes 40-59 seconds
# 6 numeric predictors with interactions produces 2.097.152 models, and &amp;quot;g&amp;quot; method takes 40-80 seconds or ca. 1 minute&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, if genetic algorithm is sooo cool, why not use genetic algorithm
all the time? Well, interestingly enough, with categorical predictors,
having a lot of categories, genetic algorithms may perform slower as
compared to the exhaustive one. For instance, our Wage-model, which has
lots of categorical predictors took only 19 second with the exhaustive
screening, while needed 117 seconds till genetic algorithm converged,
so, almost 6 times longer. Moreover, genetic algorithm might have
convergence problem and might run indefinitely long, without you having
any idea of WHEN, or IF it ever stops. And lastly, exhaustive method
almost always delivers better IC values. That’s why I’d recommend to
&lt;strong&gt;produce all possible models (aka. using exhaustive screening,
aka. applying “brute force” approach) whenever possible&lt;/strong&gt; and
only use genetic algorithm for a high number of numeric predictors.&lt;/p&gt;
&lt;h3 id="specify-marginality-and-exclude-arguments-optional"&gt;3. Specify
“marginality” and “exclude” arguments (optional) –&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;marginality = TRUE&lt;/strong&gt;, argument considers only
marginal models. That would reduce the number of model from 2604485 to
2350602. I did not really understand what the martinality exactly does,
that is why I just prefer to leave it out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Argument &lt;strong&gt;exclude&lt;/strong&gt; excludes (main effects or
interactions) from the candidate models, e.g. c(“mass:height”) … it
somehow did not work in my code and I could not find out why. I hope it
will work on your machine!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using multiple cores while computing might help.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-the-hell-is-the-best-model-then"&gt;What the hell is THE BEST
model then ???&lt;/h2&gt;
&lt;p&gt;By the way, remember, in the beginning of the video I said, that
stepwise selection is not the best method, implying that {glmulti}
approach is better? Well, let’s compare the results of exhaustive and
genetic algorithms, to the results of forward and backwards selections
and see which is a &lt;strong&gt;TRULY BEST&lt;/strong&gt; model:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimal_model_glmulti_exhaustive &amp;lt;- test_h@objects[[1]]
optimal_model_glmulti_genetic    &amp;lt;- test_g@objects[[1]]
compare_performance(optimal_model_glmulti_exhaustive, optimal_model_glmulti_genetic, optimal_model_backward, optimal_model_forward)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Comparison of Model Performance Indices

Name                             | Model | AIC (weights) | AICc (weights) | BIC (weights) |    R2 |  RMSE | Sigma
-----------------------------------------------------------------------------------------------------------------
optimal_model_glmulti_exhaustive |   glm | 134.7 (0.391) |  141.0 (0.497) | 146.5 (0.496) | 0.932 | 1.547 | 1.750
optimal_model_glmulti_genetic    |   glm | 134.7 (0.391) |  141.0 (0.497) | 146.5 (0.496) | 0.932 | 1.547 | 1.750
optimal_model_backward           |   glm | 135.9 (0.215) |  165.9 (&amp;lt;.001) | 157.9 (0.002) | 0.954 | 1.266 | 1.689
optimal_model_forward            |   glm | 144.9 (0.002) |  149.6 (0.007) | 155.2 (0.006) | 0.900 | 1.871 | 2.076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimal_model_glmulti_exhaustive$formula&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mpg ~ 1 + wt + qsec + gear + drat:hp + qsec:wt + gear:wt
&amp;lt;environment: 0x7fd4224d0000&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimal_model_glmulti_genetic$formula&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mpg ~ 1 + wt + qsec + gear + drat:hp + qsec:wt + gear:wt
&amp;lt;environment: 0x7fd421e86070&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimal_model_backward$formula&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mpg ~ hp + drat + wt + qsec + gear + hp:drat + hp:wt + hp:qsec + 
    hp:gear + drat:wt + drat:qsec + wt:qsec + wt:gear
&amp;lt;environment: 0x7fd45bf525d0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;optimal_model_forward$formula&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mpg ~ wt + hp + qsec + gear + wt:hp
&amp;lt;environment: 0x7fd45bf525d0&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see {glmulti} approach produced lower AIC and much lower
BIC Information criteria, and interestingly enough, the &lt;span
class="math inline"&gt;\(R^2\)&lt;/span&gt; produced by {glmulti} is right in
between the &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt;s of forwards and
backwards selections, suggesting that {glmulti} models are neither
underfitted not overfitted. Moreover, in our example both exhaustive and
genetic algorithms have identical result (will not always be the case)
and showed three interactions (drat:hp + qsec:wt + gear:wt) to be
important, while backwards selection found 8 interactions to be
important, which to me sound like overfitting, which is in line with
it’s highest &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt;, and forwards
selection found only one interaction, which looks like underfitting,
which is in line with it’s lowest &lt;span
class="math inline"&gt;\(R^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So, I hope I could convince you that &lt;strong&gt;{glmulti} approach is
superior to the stepwise selection&lt;/strong&gt; approach and produces a
&lt;strong&gt;truly BEST model&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- ```{r eval=FALSE} --&gt;
&lt;!-- tic() --&gt;
&lt;!-- g_model &lt;- glmulti(wage ~ jobclass + education + age + health + health_ins, --&gt;
&lt;!--           data   = Wage,  --&gt;
&lt;!--           crit   = aicc,       # AICC corrected AIC for small samples --&gt;
&lt;!--           level  = 2,          # 2 with interactions, 1 without   --&gt;
&lt;!--           method = "g",        # "d", or "h", or "g" --&gt;
&lt;!--           family = gaussian,  --&gt;
&lt;!--           fitfunction = glm,   # Type of model (LM, GLM, GLMER etc.) --&gt;
&lt;!--           confsetsize = 100)   # Keep 100 best models --&gt;
&lt;!-- toc() # 117 sec elapsed: After 440 generations:  --&gt;
&lt;!-- ``` --&gt;
&lt;h2 id="some-exotic-applications-glmer-or-multinom"&gt;Some exotic
applications: GLMER or multinom&lt;/h2&gt;
&lt;p&gt;And while {glmulti} works fine with the classic functions like LM and
GLM, it can also fit some exotic models, such as “multinomial” models
via Neural Networks from {nnet} package.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(nnet)

multinom_glmulti &amp;lt;- glmulti(
  education ~ wage + jobclass + health, 
  data   = Wage, 
  level  = 2, 
  method = &amp;quot;h&amp;quot;
  fitfunction = multinom)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the predictions of the best multinomial model:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(effects::allEffects(multinom_glmulti@objects[[1]]),
     lines = list(multiline = T),
     confint = list(style = &amp;quot;auto&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf58861c84_files/figure-html/unnamed-chunk-14-1.png" width="1344" /&gt;&lt;/p&gt;
&lt;p&gt;And lastly, despite the fact there is no straightforward fitting
function for the mixed-effects models, such as GLMER from {lme4}
package, we can easily write our own wrapper-function and use it inside
of {glmulti}:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;glmer.glmulti&amp;lt;-function(formula, data, random = &amp;quot;&amp;quot;, ...){
   glmer(paste(deparse(formula),random),
         data    = data, REML = F, ...)
}

mixed_model &amp;lt;- glmulti(
  y = response ~ predictor_1 + predictor_2 + predictor_3,
  random  = &amp;quot;+(1|random_effect)&amp;quot;,
  crit    = aicc,
  data    = data,
  family  = binomial,
  method  = &amp;quot;h&amp;quot;,
  fitfunc = glmer.glmulti,
  marginality = F,
  level   = 2 )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s have a look at the results of our BEST model and interpret
them.&lt;/p&gt;
&lt;h2 id="extract-results"&gt;Extract results&lt;/h2&gt;
&lt;p&gt;The output of a {glmulti} analysis is an object containing the
&lt;strong&gt;confidence set of models (100 best models by default)&lt;/strong&gt;.
Standard R regression functions like “summary()”, “coef()” or “plot()”
can all be used to make a multi-model inference. But let’s start with
the brief summary of the results which can be obtained with via
“print()” command:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;print(h_model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;glmulti.analysis
Method: h / Fitting: glm / IC used: aicc
Level: 2 / Marginality: FALSE
From 100 models:
Best IC: 29793.4306133546
Best model:
[1] &amp;quot;wage ~ 1 + jobclass + education + health + health_ins + age + &amp;quot;  
[2] &amp;quot;    education:jobclass + health_ins:education + education:age + &amp;quot;
[3] &amp;quot;    health:age + health_ins:age&amp;quot;                                 
Evidence weight: 0.0786680339413555
Worst IC: 29801.3206286612
6 models within 2 IC units.
74 models to reach 95% of evidence weight.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… were we see the most important information, such as fitting
function, the information criteria used to rank the models, the formula
of the best model and even the number of models which as good as the
best model. There are 6 models, which we can also see if we plot our
object:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(h_model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf58861c84_files/figure-html/unnamed-chunk-18-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;This plot shows the IC values for all 100 models from the confidence
set. A horizontal line separates 6 best models, that are less than 2 IC
units away from &lt;strong&gt;THE BEST&lt;/strong&gt; model. But what predictors and
interactions do those 6 models contain? Using {weightable} function, we
can easily display them:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;weightable(h_model)[1:6,] %&amp;gt;% 
  regulartable() %&amp;gt;%       # beautifying tables
  autofit()&lt;/code&gt;&lt;/pre&gt;
&lt;div class="tabwid"&gt;&lt;style&gt;.cl-f5f2ee80{}.cl-f5ea4e60{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-f5edff74{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f5edff7e{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-f5ee16b2{width:12.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16c6{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16c7{width:1.092in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16d0{width:12.024in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16d1{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16da{width:1.092in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16db{width:12.024in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16e4{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-f5ee16e5{width:1.092in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}&lt;/style&gt;&lt;table data-quarto-disable-processing='true' class='cl-f5f2ee80'&gt;&lt;thead&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;th class="cl-f5ee16b2"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;model&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-f5ee16c6"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;aicc&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;th class="cl-f5ee16c7"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;weights&lt;/span&gt;&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16d0"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health + health_ins + age + education:jobclass + health_ins:education + education:age + health:age + health_ins:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16d1"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,793.43&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16da"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.07866803&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16d0"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health + health_ins + age + education:jobclass + health_ins:education + education:age + health:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16d1"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,793.68&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16da"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.06952606&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16d0"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health_ins + age + education:jobclass + health_ins:education + education:age + health:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16d1"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,794.40&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16da"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.04836431&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16d0"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health_ins + age + education:jobclass + health_ins:education + education:age + health:age + health_ins:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16d1"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,794.43&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16da"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.04776916&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16d0"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health + health_ins + age + education:jobclass + health_ins:education + jobclass:age + education:age + health:age + health_ins:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16d1"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,795.31&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16da"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.03070167&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="overflow-wrap:break-word;"&gt;&lt;td class="cl-f5ee16db"&gt;&lt;p class="cl-f5edff74"&gt;&lt;span class="cl-f5ea4e60"&gt;wage ~ 1 + jobclass + education + health + health_ins + age + education:jobclass + health_ins:jobclass + health_ins:education + education:age + health:age + health_ins:age&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16e4"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;29,795.36&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td class="cl-f5ee16e5"&gt;&lt;p class="cl-f5edff7e"&gt;&lt;span class="cl-f5ea4e60"&gt;0.02990738&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Here we see the formulas, Information Criteria and the Akaike weights
of our 6 best models. The Akaike weight for a particular model shows the
probability that the model is the best model out of all models
considered. To say it in a simple lingo - the model with the highest
weight minimizes the loss of information. So, while the “best” model has
the highest weight, its weight in this example is not substantially
larger than that of the second model (and also the third, fourth, and so
on). So, we shouldn’t be all too certain here that the top model is
really &lt;strong&gt;the best model&lt;/strong&gt; in the set. Several models are
almost equally plausible. So, &lt;strong&gt;which model should we take
then?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If all 6 models are great, but have different combinations of
predictors and interactions, figuring out which terms are important may
help to choose the best model. Fortunately for us, the
&lt;code&gt;plot()&lt;/code&gt; command with &lt;code&gt;type="s"&lt;/code&gt; argument displays
the relative importance of model terms across all models. The importance
value for a particular predictor or interaction is equal to the sum of
the weights for the models in which the variable appears. So, &lt;strong&gt;a
variable that shows up in lots of models with large weights will receive
a high importance value&lt;/strong&gt;. A vertical line is drawn at 80% (where
terms to the right of the line are part of 80% of the models), which is
sometimes used as a cutoff to differentiate between very important and
less important variables. This threshold is somewhat arbitrary though,
so that we are free to set it at … let’s say 50% and include all the
predictors and interactions with the importance above 50% into the final
model.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot(h_model, type = &amp;quot;s&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf58861c84_files/figure-html/unnamed-chunk-20-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;Interestingly, the very first model contains the
&lt;em&gt;age:health_ins&lt;/em&gt; interaction, which has ca. 50% importance. And
it would be totally fine to go with that. But, since we have so many
terms with the importance around 80%, I am happy to use only those,
including &lt;em&gt;education:health_insurance&lt;/em&gt; interaction and predictor
&lt;em&gt;health&lt;/em&gt;, because they are far enough from the rest. And if I
look at 6 best models, I’ll see that the second model has exactly those
terms. The third model is a bit worse because it does not contain
variable health, but since health is part of the most important
interaction - &lt;em&gt;age:health&lt;/em&gt;, I’d prefer to include it. So, now we
did not blindly trust the algorithm and took it’s &lt;strong&gt;BEST
MODEL&lt;/strong&gt;, but examined the results carefully and made a grounded
decision to take the second model as &lt;strong&gt;OUR BEST
MODEL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, we can easily interpret and visualize and check assumptions of
&lt;strong&gt;OUR BEST&lt;/strong&gt; model as we always do:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;best_model &amp;lt;- h_model@objects[[2]]

car::Anova(best_model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Analysis of Deviance Table (Type II tests)

Response: wage
                     LR Chisq Df Pr(&amp;gt;Chisq)    
jobclass                 4.91  1   0.026764 *  
education              626.21  4  &amp;lt; 2.2e-16 ***
health                  28.16  1  1.117e-07 ***
health_ins             158.79  1  &amp;lt; 2.2e-16 ***
age                     90.94  1  &amp;lt; 2.2e-16 ***
jobclass:education      16.14  4   0.002838 ** 
education:health_ins    10.22  4   0.036890 *  
education:age           12.11  4   0.016572 *  
health:age              10.13  1   0.001459 ** 
---
Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;plot_model(best_model, type = &amp;quot;int&amp;quot;) %&amp;gt;% 
  plot_grid()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file3ddf58861c84_files/figure-html/unnamed-chunk-21-1.png" width="1440" /&gt;&lt;/p&gt;
&lt;p&gt;And if you want to learn &lt;strong&gt;how to test ALL model-assumptions
using only one function&lt;/strong&gt;, check out {performance} package:&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/BNTn_f43U04" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="problems"&gt;Problems&lt;/h2&gt;
&lt;p&gt;So, while {glmulti} is an amazing package, but it is not perfect and
here are three things I found challenging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rJava package needed. If you can’t easily install rJava package
from RStudio, chances are your computed does not have Java installed.
Doing this can take some time and nerves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;some arguments are poorly described (e.g. “marginality”), or
simply do not work (e.g. “exclude”). Please, let me know in the comments
below, if you managed to use “exclude”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and while the &lt;code&gt;coef()&lt;/code&gt; and &lt;code&gt;predict()&lt;/code&gt;
commands are useful multi-model inference tools for models without
interactions and only with numeric predictors and could provide
multi-model averaged estimates, confidence intervals and predictions, I
find them less intuitive for the models with several interactions and
with many categorical predictors.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-readings-and-references"&gt;Further readings and
references&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jstatsoft.org/article/view/v034i12"
class="uri"&gt;https://www.jstatsoft.org/article/view/v034i12&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a
href="https://cran.r-project.org/web/packages/glmulti/glmulti.pdf"
class="uri"&gt;https://cran.r-project.org/web/packages/glmulti/glmulti.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.igi-global.com/gateway/chapter/235052"
class="uri"&gt;https://www.igi-global.com/gateway/chapter/235052&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>e293af68b10d93947ec753cf0794c593</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <category>machine learning</category>
      <category>R package reviews</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-05-31-glmulti</guid>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-05-31-glmulti/thumbnail_glmulti.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {gtsummary} Publication-Ready Tables of Data, Stat-Tests and Models!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-10-31-gtsummary</link>
      <description>{gtsummary} package helps to easily produce publication-ready &amp; beautifully formatted summary tables of Data, Statistical Tests and Models! It calculates tons of statistics and has a beautiful design by default, but you can customize every aspect of your table and export it as a picture or MS Word format.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <category>machine learning</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-10-31-gtsummary</guid>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-10-31-gtsummary/thumbnail_gtsummary.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Publication-Ready Tables of Particular Statistical Tests and Models with {gtsummary}</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-11-25-gtsummary2</link>
      <description>Find a review of incredibly useful {gtsummary} package in a separate blog-post. Here I'll just collect all the possible Statsitcal Tests and Models, {gtsummary} can help with.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <category>machine learning</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-11-25-gtsummary2</guid>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-11-25-gtsummary2/thumbnail_gtsummary2.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {rsample} Effective Resampling for Machine Learning!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-10-27-rsample</link>
      <description>Let's learn how to use three most important resampling techniques: train-test split, cross-validation and bootstrapping. We'll start with the question...</description>
      <category>videos</category>
      <category>statistics</category>
      <category>models</category>
      <category>machine learning</category>
      <category>tidymodels</category>
      <category>R package reviews</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-10-27-rsample</guid>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-10-27-rsample/thumbnail_rsample.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>4 Reasons Non-Parametric Bootstrapped Regression (with tidymodels) is Better thаn Ordinary Regression</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-08-31-bootstrappingregressions</link>
      <description>If the assumptions of parametric models can be satisfied, parametric models are the way to go. However, there are often many assumptions and to satisfy them all is rarely possible. Data transformation or using non-parametric methods are two solutions for that. In this post we'll learn the Non-Parametric Bootstrapped Regression as an alternative for the Ordinary Linear Regression in case when assumptions are violated.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>visualization</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-08-31-bootstrappingregressions</guid>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-08-31-bootstrappingregressions/thumbnail_bootstrapped_regression.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Repeated Measures ANOVA (One-Way) | How to Conduct, Visualise and Interpret</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-01-30-rmanova</link>
      <description>Can sport increase our selfesteem? Well, one experiment measured self-esteem of 10 people on three different time points and used Repeated Measures ANOVA to answer this question. So, let's learn how to produce this statistically rich plot using only one simple command and how to interpret all these results.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-01-30-rmanova</guid>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-01-30-rmanova/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo| Many Models with Nested (Grouped) Data Easily</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-09-12-manymodels</link>
      <description>In this blog-post, we'll learn how to produce grouped / nested models, with an amazing "map()" function from {purrr} package in R. We'll use linear models in this example for the sake of simplicity, but you can apply any model you want (robust, logistic, poisson etc.). We'll see, how to effectively store and use the information from multiple models. And while in this blog-post we'll produce "only" 10 models, you can produce any number of models you want.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>visualization</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-09-12-manymodels</guid>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-09-12-manymodels/thumbnail_many_models.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {sjPlot} How to Easily Visualize Data And Model Results</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-08-01-sjplot</link>
      <description>One picture is worth a thousand words. That's why visualizing data and model results is a crutial skill for any data scientist. {sjPlot} package became my favorite tool for visualization. That's why I want to share with you some simple but very effective commands which will make you more productive today. So, let's visualize Wage dataset, visualize bunch of models and see what people earn and what factors determine the salary.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>R package reviews</category>
      <category>visualization</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-08-01-sjplot</guid>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-08-01-sjplot/thumbnail_sjPlot.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {report} How To Report Statistical Results!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-06-18-report</link>
      <description>If you ever wandered how to correctly describe the results of statistical tests and models, this blog is for you. In a few minutes you'll learn how to report the results of correlations, t-tests, Generalised Linear Models, Mixed-Effects models, Bayesian Models and even more 😉 So, let's start with a simple t-test.</description>
      <category>videos</category>
      <category>statistics</category>
      <category>R package reviews</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-06-18-report</guid>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-06-18-report/thumbnail_report.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Tidy Data and Why We Need It!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-04-22-tidydata</link>
      <description>


&lt;h2 id="this-post-as-a-video"&gt;This post as a video&lt;/h2&gt;
&lt;p&gt;I recommend to watch a video first, because I highlight things I talk
about and you have visual examples. It’s ca. 12 minutes long.&lt;/p&gt;
&lt;div class="vembedr"&gt;
&lt;div&gt;
&lt;iframe src="https://www.youtube.com/embed/KW1laBLEiw0" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well, if I had to summarize the whole idea of tidy data into one
sentence, I’d say: &lt;strong&gt;“Whatever changes in your data, put it into a
column.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why columns? Because columns are &lt;strong&gt;the easiest way to store
similar data&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt; Important is that the data in every
column is &lt;strong&gt;similar, but not identical&lt;/strong&gt;, so, &lt;strong&gt;the
data vary&lt;/strong&gt;. For example &lt;em&gt;age&lt;/em&gt; varies from 1 to 100,
&lt;em&gt;gender&lt;/em&gt; varies from male to female. That’s actually why
&lt;strong&gt;a column is always a variable&lt;/strong&gt;. And a &lt;strong&gt;VARIABLE
IS what we need to make any type of analysis possible&lt;/strong&gt;. Let me
make tidy data even easier for you.&lt;/p&gt;
&lt;h2 id="principles-of-tidy-data"&gt;Principles of tidy data&lt;/h2&gt;
&lt;p&gt;There are only &lt;strong&gt;3 simple principles for tidy data&lt;/strong&gt;
(postulated by the father of tidy data Hadley Wickham):&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;strong&gt;each column is a variable&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;each row is an observation&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;each cell is a single value&lt;/strong&gt; or only one peace of
information&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/tidy-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, let’s say that any dataset which does not
follow these three rules is &lt;strong&gt;messy&lt;/strong&gt;. And the problem with
messy data is that &lt;strong&gt;it requires different strategies&lt;/strong&gt; and
&lt;strong&gt;tons of work&lt;/strong&gt; to extract different variables, in order
to enable different statistical analyses.&lt;/p&gt;
&lt;h2 id="does-messy-data-exist"&gt;Does messy data exist?&lt;/h2&gt;
&lt;p&gt;These three rules of tidy data seem so obvious that you might wonder
whether messy datasets even exist. Well, unfortunately, most real world
data is messy, because there are soo many opportunities to mess things
up, and people are usually very creative. Leo Tolstoy once said:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Happy families are all alike; while every unhappy family is
unhappy in its own way”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Like families, tidy datasets are all alike; but every messy
dataset is messy in its own way.” - Hadley Wickham&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Does this mean, that messy data is bad? Absolutely not. Messy
datasets might be very convenient for data collection and for having a
good overview of the whole dataset, containing all the information we
have, including explanatory columns, commentaries, colors etc. .
However, while useful for you, it is useless for
&lt;strong&gt;statistics&lt;/strong&gt;, which &lt;strong&gt;needs only variables and
observations&lt;/strong&gt;. So, you might end up having two tables, one for
you, and the other one for statistical analysis. Let me show you the
most common cases of messy data and how to fix them. The first one is
when…&lt;/p&gt;
&lt;h3
id="one-variable-is-stored-in-multiple-columns-or-when-column-headers-are-actually-values-not-variable-names"&gt;1.
One variable is stored in multiple columns, or when column headers are
actually values, not variable names&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/tidy-9.png" /&gt;&lt;/p&gt;
&lt;p&gt;Different &lt;em&gt;timepoints&lt;/em&gt;, for example &lt;em&gt;years&lt;/em&gt; or
&lt;em&gt;days&lt;/em&gt;, are usually stored in different columns. And while it
might be convenient for recording data, it’s hardly possible to analyse
it. Why? Well, if we have time, we usually want to study change in
something over time, right? But a variable &lt;strong&gt;time&lt;/strong&gt; does
not exist if years are spread across different columns. Moreover, if we
see this table for the first time, we have no idea what those
&lt;strong&gt;numbers&lt;/strong&gt; are, so they are also not a variable, because
they are not in a single named column. Making this &lt;strong&gt;wide dataset
longer&lt;/strong&gt; creates two new variables which immedeatly allows to
study the &lt;strong&gt;change in tuberculosis cases over time&lt;/strong&gt; for
every country.&lt;/p&gt;
&lt;p&gt;So, every combination of a country and a year BECOMES &lt;strong&gt;a
single observation&lt;/strong&gt; of tuberculosis cases, and with that -
&lt;strong&gt;a single row&lt;/strong&gt;. But if we overdo that, we can end up with
a second common problem, where…&lt;/p&gt;
&lt;h3 id="multiple-variables-are-stored-in-one-column"&gt;2. Multiple
variables are stored in one column&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/tidy-8.png" /&gt;&lt;/p&gt;
&lt;p&gt;As mentioned before, the observations within one column suppose to
belong together, for example gender with categories “females” and
“males”, or countries like Brazil and China. However, it’s important to
separate several &lt;strong&gt;categories&lt;/strong&gt; of the same variable, from
the column &lt;strong&gt;key&lt;/strong&gt;, which stores &lt;strong&gt;two different
variables&lt;/strong&gt; &lt;em&gt;cases and population&lt;/em&gt; in one column.
&lt;em&gt;Cases and population&lt;/em&gt; do not belong together, and thus can not
be analysed. To solve this problem we simply &lt;strong&gt;make a long table
wider&lt;/strong&gt;. Now, having two variables we can calculate the rate of
tuberculosis by dividing a column cases by the column population. Which
would not be possible if both values would be stored in the same cell,
being the third common problem…&lt;/p&gt;
&lt;h3 id="more-then-one-value-in-one-cell"&gt;3. More then ONE value in ONE
cell&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/tidy-17.png" /&gt;&lt;/p&gt;
&lt;p&gt;This one can be very sneaky, because it pretends to convey a lot of
useful information, like a range of values from zero to five (0-5),
undecided values, like 2 or 3 or some borderline values, like &amp;lt;3 or
&amp;gt;99. To fix this problem, follow the third principle of tidy data and
always put only one value in one cell. And, please, &lt;strong&gt;don’t use
any special characters for numeric values&lt;/strong&gt;, because it will
produce the next most common problem, where…&lt;/p&gt;
&lt;h3
id="different-types-of-data-numbers-text-are-stored-in-the-same-column"&gt;4.
Different types of data (numbers &amp;amp; text) are stored in the same
column&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/missing_data1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data can be either numbers or text (categories)&lt;/strong&gt;. Any
text or special characters (like @, €, *, ^, &amp;gt;, &amp;lt;, +, (), ” “, .
etc.) inside of a numeric column converts the whole variable into text.
Words like”unknown” or “missing” are the most common examples of text
inside of numeric columns. &lt;strong&gt;If the value is missing, it’s better
to leave the cell empty&lt;/strong&gt;. By the way, ironically, missing values
can sometimes cause the most damage, so it’s really important to …&lt;/p&gt;
&lt;h3 id="understand-what-a-missing-value-really-is"&gt;5. Understand what a
missing value really is&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/missing_data.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;real missing value&lt;/strong&gt; represents a measurement or
observation that should have been made, but wasn’t. One of the
non-intentional mistakes is to put &lt;em&gt;zeros&lt;/em&gt; (0) into cells with
missing values. Think about measuring blood pressure of a cat for
example. If cat’s owner doesn’t bring the cat to the clinic at Monday,
the blood pressure record &lt;strong&gt;should remain empty&lt;/strong&gt;. However,
if we put zero instead of a missing value on Monday, that would mean
that blood pressure of our cat WAS measured and it WAS zero - so our
Monday cat was either dead or a zombie. An example of a real zero is if
you measured virus load of that cat on Tuesday, but did not find any
virus. In this case a zero means that our cat is absolutely healthy and
it’s important to record that 0! So, &lt;strong&gt;a zero conveys a lot of
information, while a&lt;/strong&gt; &lt;strong&gt;missing value conveys NO
information and should therefore remain empty&lt;/strong&gt;. But the most
complicated form of messy data occurs when (see the picture above)…&lt;/p&gt;
&lt;h3 id="variables-are-stored-in-both-rows-and-columns."&gt;6. Variables are
stored in both rows and columns.&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/tidied_up_data.png" /&gt;&lt;/p&gt;
&lt;p&gt;For example, days of the week is our “day” variable which we would
like to have in order to study blood pressure of cats over time, so we’d
need to put the days into a single column. Then, if we want to estimate
an average for Monday we can’t do that, because Monday contains two
different values, blood pressure and virus load. Thus we need to split
the column “test” into two different columns and just move the values.
In this tidy data values inside of every columns belong together.
Finally, let me quickly show you a few more…&lt;/p&gt;
&lt;h3
id="examples-of-messyness-and-the-checklist-to-follow-in-order-to-keep-the-data-tidy"&gt;7.
Examples of messyness and the checklist to follow in order to keep the
data tidy&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://yuzar-blog.netlify.app//posts/2022-04-22-tidydata/messy_data.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;remove empty rows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;remove empty and constant columns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;remove merged cells&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use only the first raw as your header&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;store same data in the same table, for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if control and treatment are in two tables, put them below each
other and create a new variable - “group”, because this is exactly what
we want - compare &lt;strong&gt;groups&lt;/strong&gt;, then…&lt;/li&gt;
&lt;li&gt;if multiple excel sheets contain similar information, for example
multiple years, combine them into one table and create a variable -
“years”, because we often want to study something over time&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a thing to remember is that statistics has no good taste, thus
simple is better then beautiful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;so, any visual effects like colors, italic or bold font etc. don’t
provide any information, because statistics is blind, thus if colors are
important, turn them into variables&lt;/li&gt;
&lt;li&gt;if you want to show that some of the observations aren’t very good
(e.g. calibration error), create a new column “error” and use 1 every
time you aren’t sure, and 0 every time you are sure about the
measurement. That would later allow to exclude these ones easily if we
would want to.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use short, simple, but still clear column names, instead of long
explanational names, because when you start to work with them, it will
hurt. Too short names, like “d” or “s” are also bad, because they don’t
communicate any information, while “days” or “species” do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;check for similar but not identical categories (mostly created by
typos), because “cat”, “cat_” with a space and “cat.” with a dot could
be considered three different categories. The solution for that is to go
to Excel Table &amp;gt; Data &amp;gt; Filter, and to check all categorical
variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;remove all the columns and data which do not participate in the
analyses. As mentioned above, you may keep two tables, one for yourself,
with all the explanations and colors, and one new minimalistic table for
the analyses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;but please don’t remove rows or columns only because they have
some missing values (empty cells), otherwise we would lose a lot of
existing information&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;don’t summarize, calculate or explain something on the side or
below the table, because a software will try to incorporate this
information in form of variables or observations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you plan to use R software don’t code categorical variables
into numbers, for example instead 1 and 2 for sex, write “female” and
“male”. For SPSS or other software you might need to code them, and last
but not least …&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you think your table will become too long or that tidying up
the data is too much work … &lt;strong&gt;stop thinking that&lt;/strong&gt; :),
because approximately 80% of time in data analysis is spent on cleaning
and preparing the data &lt;a href="#fn1" class="footnote-ref"
id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; for calculations&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, these were just the most common messyness examples I encountered.
But the human creativity is not be underestimated. Thus, as you can see
- it is much easier to learn what to do, namely &lt;strong&gt;only three
principles of tidy data&lt;/strong&gt;, then what not to do.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vita.had.co.nz/papers/tidy-data.pdf"
class="uri"&gt;https://vita.had.co.nz/papers/tidy-data.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dasu T, Johnson T (2003). Exploratory Data Mining and Data Cleaning.
Wiley-IEEE.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you think, I missed something, please comment on it, and I’ll
improve this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you for learning!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Dasu T, Johnson T (2003). Exploratory Data Mining and
Data Cleaning. Wiley-IEEE.&lt;a href="#fnref1"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>d96681a1558b263f1642c3de040596c8</distill:md5>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-04-22-tidydata</guid>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-04-22-tidydata/tidydata_2.jpeg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>R demo | ANOVA (One-Way ) | Fisher's, Welch's, Bayesian, Robust</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-04-03-anova</link>
      <description>How does education influence our salary? ANOVA which is just the abbreviation for Analysis Of Variances you see on the thumbnail answeres this question with Frequentists and Bayesian tests. It also privides two different effect sizes, compares education levels pairwisely and even corrects p-values for multiple comparisons. ALL OF THAT is done by this simple command. So, in this blog-post you'll learn how to produce the statistically rich plot, you'll understand when to conduct Welch's ANOVA and when Fisher's ANOVA and you'll know how to interpret every little detail on this plot. Lets get into it.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-04-03-anova</guid>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-04-03-anova/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Kruskal-Wallis test | How to conduct, visualize, interpret &amp; more 😉</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-04-13-kw</link>
      <description>If we have ordinal or not-normally distributed data, ANOVA might produce a wrong result. That's why we need Kruskal-Wallis test. Kruskal-Wallis test you see on the screen answers two question (1) whether at least one group is different from other groups and (2) between which groups exactly this difference is. So, let's learn how to get and interpret all these results.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-04-13-kw</guid>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-04-13-kw/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Cochran’s Q Test + Pairwise McNemar Tests (post-hoc)</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-03-04-cochran</link>
      <description>Cochran test is an extension of the McNemar test for comparing MORE than two PAIRED categorical samples in which the same individuals appear in each sample. If Cochran test is significant, we'd need to compare samples among each other pairwisely with McNemar tests. So, let's do that.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-03-04-cochran</guid>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-03-04-cochran/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Mann-Whitney U Test = Wilcoxon Rank Sum Test | How to conduct, visualise &amp; interpret 🥳 What happens if we use a wrong test 😱</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-03-16-mwutest</link>
      <description>Comparing two groups with not-normally disctributed or ordinal data is the reason we need Mann-Whitney U Test instead of t-Test. So, today we'll learn (1) how to conduct and visualize Mann-Whitney U Test you saw on the thumbnail with one simple command, (2) how to interpret all statistical results on that plot and (3) why this test is sometimes called Wilcoxon Rank Sum Test and why we shouldn't use this name</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-03-16-mwutest</guid>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-03-16-mwutest/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Correlation Matrix | Danger or opportunity?</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-01-05-correlationmatrixinr</link>
      <description>Having several numeric variables, we often wanna know which of them are correlated and how. Correlation Matrix seems to be a good solution for it. But drawing conclusions from plain correlation coeffitients and p-values is dangerous, if we don't visualize the data. Let's learn a better way to produce a correlation matrix.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-01-05-correlationmatrixinr</guid>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-01-05-correlationmatrixinr/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>R demo | Two-Samples t-Test | Student's &amp; Welch's | How to conduct, visualise, interpret | What happens if we use a wrong test 😱</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-03-11-ttest</link>
      <description>Two-samples t-test can answer useful questions, for example - where can we get more money, working in a factory or in the IT-industry? So, let's learn (1) how to make sure t-test is a CORRECT test for our data, (2) how to get all these results with one simple command, (3) how to interpret all these results and (4) finally see what happens if we choose a wrong test.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-03-11-ttest</guid>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-03-11-ttest/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Paired Samples t-Test | How to conduct, visualise and interpret</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-01-22-pairedsamplesttestinr</link>
      <description>Can one week of training significantly improve your number of sit-ups? Well, Paired t-Test can answer this question by comparing your performance Before and After this week. So, let's learn how to produce this statistically rich plot using only one simple command, how to interpret all these results and see what happens if we use a wrong test.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-01-22-pairedsamplesttestinr</guid>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-01-22-pairedsamplesttestinr/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | McNemar Test | How to Conduct, Visualise and Interpret</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-02-20-mcnemar</link>
      <description>If you need to compare two PAIRED categorical samples, McNemar test is a correct choise for you. Though, people often use Chi-Square test instead. Thus, in this blog-post we'll first conduct, visualize and interpret McNemac test you see on the picture to your right using only one simple command and then see what happens if we use Chi-Square test for paired data.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-02-20-mcnemar</guid>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-02-20-mcnemar/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Friedman Test | How to Conduct, Visualise and Interpret</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-02-08-friedman</link>
      <description>The Friedman Test is a non-parametric brother of Repeated Measures ANOVA, which does much better job when data is not-normally distributed (which happens pretty often ;). Friedman test is also superior to Repeated Measures ANOVA when our data is ordinal (e.g., scales from 1 to 10). Friedman Test can also be a non-parametric father of the Paired Wilcoxon test, because it can compare more then two groups.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-02-08-friedman</guid>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-02-08-friedman/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R demo | Paired Samples Wilcoxon Signed Rank Test</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2022-01-13-pairedsampleswilcoxonsigned-ranktestinr</link>
      <description>Can a speed-reading exercise make you a faster reader? Well, Wilcoxon Signed Rank Test displayed here is a correct test to answer this question. So, in this video we'll learn how to choose a correct test and what happens if we use a wrong test, why Wilcoxon test is called Signed Rank and how to produce and interpret this statistically rich plot using only one simple command.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2022-01-13-pairedsampleswilcoxonsigned-ranktestinr</guid>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2022-01-13-pairedsampleswilcoxonsigned-ranktestinr/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Correlation Analysis in R | Pearson, Spearman, Robust, Bayesian | How to conduct, visualise and interpret</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-12-29-correlationinr</link>
      <description>Having two numeric variables, we often wanna know whether they are correlated and how. One simple command {ggscatterstats} can answer both questions by visualizing the data and conducting frequentists and bayesian correlation analysis at the same time. So, let's learn how to do that, how to interpret all those results and how to choose the right correlation method in the first place.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-12-29-correlationinr</guid>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-12-29-correlationinr/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>One-sample Student’s t-test and One-sample Wilcoxon test: or how to compare your work to the work of others.</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-12-20-one-sample-t-test-do-your-results-make-sense-or-how-to-compare-your-work-to-the-work-of-others</link>
      <description>Imagine you get 7 out of 10 to-dos from your list done on average. Are you then more productive then others? One-sample t-test and One-sample Wilcoxon test can answer this question. So, in this blog-post you'll learn how to conduct and visualize these tests with only one simple command, how to interpret all these results and how to choose the right test in the first place. Let's get straight into it.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-12-20-one-sample-t-test-do-your-results-make-sense-or-how-to-compare-your-work-to-the-work-of-others</guid>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-12-20-one-sample-t-test-do-your-results-make-sense-or-how-to-compare-your-work-to-the-work-of-others/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>R demo | Chi-Square Test | how to conduct, visualize &amp; interpret | + pairwise post-hoc tests</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-12-14-how-to-conduct-chi-square-test-in-r</link>
      <description>Chi-Square Test checks the independence between two categorical variables, where variables can have two or more categories. Need to do Chi-Square test? It can actually be done with only one line of code. There is no better way than {ggbarstats} function from {ggstatsplot} package 📦. In this short blog-post you'll learn how to conduct, visualize and interpret Chi-Square test &amp; pairwise post-hoc tests in R.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-12-14-how-to-conduct-chi-square-test-in-r</guid>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-12-14-how-to-conduct-chi-square-test-in-r/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>R package reviews {dlookr} diagnose, explore and transform your data</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-30-r-package-reviews-dlookr-diagnose-explore-and-transform-your-data</link>
      <description>Raw data need to be diagnosed for existing problems, explored for new hypotheses and repaired in order to increase data quality and output. The {dlookr} package makes these steps fast and easy. {dlookr} generates automated reports and performs compex operations, like imputing missing values or outliers, with simple functions. Moreover, {dlookr} collaborates perfectly with {tidyverse} packages, like {dplyr} and {ggplot2} to name just a few!</description>
      <category>EDA</category>
      <category>videos</category>
      <category>data wrangling</category>
      <category>R package reviews</category>
      <category>visualization</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-30-r-package-reviews-dlookr-diagnose-explore-and-transform-your-data</guid>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-30-r-package-reviews-dlookr-diagnose-explore-and-transform-your-data/dlookr_thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Deep Exploratory Data Analysis (EDA) in R</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-09-exploratory-data-analysis-and-beyond-in-r-in-progress</link>
      <description>Exploratory Data Analysis is an important first step on the long way to the final result, be it a statistical inference in a scientific paper or a machine learning algorithm in production. This long way is often bumpy, highly iterative and time consuming. However, EDA might be the most important part of data analysis, because it helps to generate hypothesis, which then determine THE final RESULT. Thus, in this post I'll provide the simplest and most effective ways to explore data in R, which will significantly speed up your work. Moreover, we'll go one step beyond EDA by starting to test our hypotheses with simple statistical tests.</description>
      <category>EDA</category>
      <category>videos</category>
      <category>data wrangling</category>
      <category>visualization</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-09-exploratory-data-analysis-and-beyond-in-r-in-progress</guid>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-09-exploratory-data-analysis-and-beyond-in-r-in-progress/DEDA_thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>How to impute missing values with Machine Learning in R</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-03-04-how-to-impute-missing-values-in-r</link>
      <description>Imputation simply means - replacing a missing value with a value that makes sense. But how can we get such values? Well, we'll use Machine Learning algorithms, because they have a high prediction power. So, in this post we'll learn how to impute missing values easily and effectively.</description>
      <category>videos</category>
      <category>data wrangling</category>
      <category>visualization</category>
      <category>machine learning</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-03-04-how-to-impute-missing-values-in-r</guid>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-03-04-how-to-impute-missing-values-in-r/thumbnail_missing_values.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Null Hypothesis, Alternative Hypothesis and Hypothesis Testing</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-06-04-my-second-blog-postthis-one-will-be-really-good</link>
      <description>Hypothesis testing is one of the most important concepts in (frequentiest) statistics and science. However, most people who test hypotheses are scientists, but not statisticians. That's why scientists often do not test hypotheses properly, without any bad intensionс. So, in this blog-post we'll break down hypothesis testing in small parts and try to properly understand every of them.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-06-04-my-second-blog-postthis-one-will-be-really-good</guid>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-06-04-my-second-blog-postthis-one-will-be-really-good/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>What is p-value and why we need it</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-07-31-p-value-intuitive-explanation</link>
      <description>Why do we need p-values? Well, they help to **make decisions** and **answer the question whether we found something new or not**. But despite the fact that **p-values are** actually **useful**, they are **far from perfect**! And while everyone uses p-values, understanding them (and using them correctly) is very hard. The definition of the p-value from the book is often correct but rarely intuitive. Intuitive explanations are often not entirely correct. So, in this blog-post (and video) we’ll start with an intuitive (and not entirely correct) definition and will gradually build up the understanding of the p-value step by step. Thus, I don’t recommend to skip any part of this blog (or video). We’ll also talk about how to use and interpret p-values correctly in order to **make better decisions and better science**.</description>
      <category>videos</category>
      <category>statistics</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-07-31-p-value-intuitive-explanation</guid>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-07-31-p-value-intuitive-explanation/thumbnail.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>R package reviews {DataExplorer} explore your data!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-06-r-package-reviews-dataexplorer-explore-your-data</link>
      <description>What is the best way to explore the data quick? I think it's visualization. And what it the best way to visualize the data quick? I think it's - {DataExplorer} package, because it can visualize all your data in seconds using only one function! Check this out...</description>
      <category>R package reviews</category>
      <category>EDA</category>
      <category>videos</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-06-r-package-reviews-dataexplorer-explore-your-data</guid>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-06-r-package-reviews-dataexplorer-explore-your-data/2.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Survival analysis 2: parametric survival models</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-06-survival-analysis-2-parametric-survival-models</link>
      <description>The non-parametric Kaplan-Meier method (KM) can not describe survival probability by a smooth function, which means it can not predict anything. The parametric models (e.g. Exponential, Weibull etc.) can! Besides, in case where parametric models are appropriate, they are more exact, more effective and more informative than KM or Cox. However, unfortunately, this step is often left out due to the rear use of parametric models. In this post we’ll try to close this gap.</description>
      <category>survival analysis</category>
      <category>videos</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-06-survival-analysis-2-parametric-survival-models</guid>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-06-survival-analysis-2-parametric-survival-models/thumbnail_survival_2.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {performance} check how good your model is! </title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-03-r-package-reviews-performance-check-how-good-your-model-is</link>
      <description>There are several indicators of model quality, e.g. $R^2$ or AIC, and several assumption for every model which supposed to be checked, e.g. normality of residuals, multicollinearity etc.. R provides solutions for every indicator or assumption you can imagine. However, they are usually spread around different packages and functions. {performance} package brings all of quality indicators and all of the assumption under one roof. Thus, for me it became the one-stop solution for modelling.</description>
      <category>R package reviews</category>
      <category>videos</category>
      <category>visualization</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-03-r-package-reviews-performance-check-how-good-your-model-is</guid>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-03-r-package-reviews-performance-check-how-good-your-model-is/14.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>Survival analysis 1: a gentle introduction into Kaplan-Meier Curves</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-03-survival-analysis-1-a-gentle-introduction-into-kaplan-meier-curves</link>
      <description>Survival time analysis is necessary in any study which investigates the time to a particular outcome of interest. Cancer studies in the medicine and the first failure of the car in the engineering field (failure time analysis) are good examples. The outcome of interest could be death, remission to relapse, progression, or failure. Point in time of reaching that outcome is generally called the event. Thank goodness, not every “event” is fatal 😃, but can sometimes even be a favorable outcome such as discharge from hospital. And thus, survival analysis is also a generic term, because it is not only about survival.</description>
      <category>survival analysis</category>
      <category>videos</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-03-survival-analysis-1-a-gentle-introduction-into-kaplan-meier-curves</guid>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-03-survival-analysis-1-a-gentle-introduction-into-kaplan-meier-curves/thumbnail_survival_1.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>R package reviews {janitor} clean your data!</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-02-r-package-reviews-janitor-clean-your-data</link>
      <description>Data Scientists spend up to 80% of their time cleaning and preparing data for analysis. " Happy families are all alike; every unhappy family is unhappy in its own way" — Leo Tolstoy. "Like families, tidy datasets are all alike but every messy dataset is messy in its own way" - Hadley Wickham. Thats when "janitor" helps to clean the mess.</description>
      <category>R package reviews</category>
      <category>videos</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-02-r-package-reviews-janitor-clean-your-data</guid>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-02-r-package-reviews-janitor-clean-your-data/11.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>How to visualize models, their assumptions and post-hocs</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2021-01-01-how-to-visualize-models-their-assumptions-and-post-hocs</link>
      <description>A picture is worth a thousand words! This article shows how to visualize results of 16 different models in R: from a simple linear model to a multiple-additive-non-linear-mixed-effects model. Among them are logistic, multinomial, additive and survival models with and without interactions. **Goal: minimum R code &amp; maximum output!** We'll also go a bit beyond only model visualization. So, don't miss the bonuses 😉.</description>
      <category>visualization</category>
      <category>videos</category>
      <category>models</category>
      <guid>https://yuzar-blog.netlify.app/posts/2021-01-01-how-to-visualize-models-their-assumptions-and-post-hocs</guid>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2021-01-01-how-to-visualize-models-their-assumptions-and-post-hocs/thumbnail_visualize_models.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
    <item>
      <title>How to create a blog or a website in R with {Distill} package</title>
      <dc:creator>Yury Zablotski</dc:creator>
      <link>https://yuzar-blog.netlify.app/posts/2020-12-26-how-to-create-a-blog-or-a-website-in-r-with-distill-package</link>
      <description>If you're not online, you don't exist. A personal webpage or a blog became the business card of the digital century. It shows who you are and what you are capable of. Thus: show, don't tell.</description>
      <category>R &amp; the Web</category>
      <category>videos</category>
      <guid>https://yuzar-blog.netlify.app/posts/2020-12-26-how-to-create-a-blog-or-a-website-in-r-with-distill-package</guid>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yuzar-blog.netlify.app/posts/2020-12-26-how-to-create-a-blog-or-a-website-in-r-with-distill-package/images/thumbnail.png" medium="image" type="image/png" width="1920" height="1080"/>
    </item>
  </channel>
</rss>
